{"1": ["I remained under the banyan tree, exhausted by my daily ritual of dragooning the men every two hours.", "I remained under the banyan tree, exhausted by my daily ritual of herding the cats every two hours.", "# ::snt I remained under the banyan tree, exhausted by my daily ritual of dragooning the men every two hours.\n(z1 / remain-01\n      :ARG1 (z2 / i)\n      :location (z3 / under\n            :op1 (z4 / tree\n                  :mod (z5 / banyan)))\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / exhaust-01\n                  :ARG0 (z8 / ritual\n                        :frequency (z9 / rate-entity-91\n                              :ARG3 (z10 / temporal-quantity\n                                    :quant 1\n                                    :unit (z11 / day)))\n                        :poss z2\n                        :mod (z12 / drag-01\n                              :ARG0 z2\n                              :ARG1 (z13 / man)\n                              :frequency (z14 / rate-entity-91\n                                    :ARG3 (z15 / temporal-quantity\n                                          :quant 2\n                                          :unit (z16 / hour))))))\n            :ARG1 z2))", "# ::snt I remained under the banyan tree, exhausted by my daily ritual of herding the cats every two hours.\n(z1 / remain-01\n      :ARG1 (z2 / i)\n      :location (z3 / under\n            :op1 (z4 / tree\n                  :mod (z5 / banyan)))\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / exhaust-01\n                  :ARG0 (z8 / ritual\n                        :frequency (z9 / rate-entity-91\n                              :ARG3 (z10 / temporal-quantity\n                                    :quant 1\n                                    :unit (z11 / day)))\n                        :poss z2\n                        :mod (z12 / herd-01\n                              :ARG0 z2\n                              :ARG1 (z13 / cat)\n                              :frequency (z14 / rate-entity-91\n                                    :ARG3 (z15 / temporal-quantity\n                                          :quant 2\n                                          :unit (z16 / hour))))))\n            :ARG1 z2))"], "2": ["In the US, it will depend on the school.", "It really depends on the school and the program.", "# ::snt In the US, it will depend on the school.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / school)\n      :location (z4 / country\n            :name (z5 / name\n                  :op1 \"US\")))", "# ::snt It really depends on the school and the program.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / school)\n            :op2 (z5 / program))\n      :degree (z6 / really))"], "3": ["There's also what the string is made of.", "There is also a Youtube-Version of the film.", "# ::snt There's also what the string is made of.\n(z1 / thing\n      :ARG2-of (z2 / make-01\n            :ARG1 (z3 / string))\n      :mod (z4 / also))", "# ::snt There is also a Youtube-Version of the film.\n(z1 / version\n      :medium (z2 / publication\n            :name (z3 / name\n                  :op1 \"YouTube\"))\n      :mod (z4 / also)\n      :mod (z5 / film))"], "4": ["You also imply you may not be paid if they cannot place you with a client.", "You can do it, but you might not be a professor.", "# ::snt You also imply you may not be paid if they cannot place you with a client.\n(z1 / imply-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / possible-01\n            :ARG1 (z4 / pay-01\n                  :polarity -\n                  :ARG2 z2)\n            :condition (z5 / possible-01\n                  :polarity -\n                  :ARG1 (z6 / place-01\n                        :ARG0 (z7 / they)\n                        :ARG1 z2\n                        :ARG2 (z8 / client)))))", "# ::snt You can do it, but you might not be a professor.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / do-02\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / it)))\n      :ARG2 (z6 / possible-01\n            :ARG1 (z7 / professor\n                  :polarity -\n                  :domain z4)))"], "5": ["I did this one time as well.", "I have this habit as well.", "# ::snt I did this one time as well.\n(z1 / do-02\n      :frequency 1\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / this)\n      :mod (z4 / as-well))", "# ::snt I have this habit as well.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / habit\n            :mod (z4 / this))\n      :mod (z5 / as-well))"], "6": ["You just have to base your answer on what you do know, which is what you want.", "You may want it, but the process given to you is what you have to work within.", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt You may want it, but the process given to you is what you have to work within.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / want-01\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / it))))"], "7": ["You do not need to worry.", "You don't have to worry.", "# ::snt You do not need to worry.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / worry-02\n            :ARG0 z2))", "# ::snt You don't have to worry.\n(z1 / obligate-01\n      :polarity -\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / worry-02\n            :ARG0 z2))"], "8": ["You should do it.", "You should do what it says.", "# ::snt You should do it.\n(z1 / recommend-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)))", "# ::snt You should do what it says.\n(z1 / recommend-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / say-01\n                        :ARG0 (z6 / it))))\n      :ARG2 z3)"], "9": ["You should just ask your boss what he wants you to do.", "You should listen to your boss, because you're not paid to tell the boss what to do.", "# ::snt You should just ask your boss what he wants you to do.\n(z1 / recommend-01\n      :ARG1 (z2 / ask-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 z3\n                        :ARG1-of (z6 / want-01\n                              :ARG0 (z7 / person\n                                    :ARG0-of (z8 / have-rel-role-91\n                                          :ARG1 z3\n                                          :ARG2 (z9 / boss))))))\n            :ARG2 z7\n            :mod (z10 / just))\n      :ARG2 z3)", "# ::snt You should listen to your boss, because you're not paid to tell the boss what to do.\n(z1 / cause-01\n      :ARG0 (z2 / pay-01\n            :polarity -\n            :ARG2 (z3 / you)\n            :ARG3 (z4 / tell-01\n                  :ARG0 z3\n                  :ARG1 (z5 / thing\n                        :ARG1-of (z6 / do-02\n                              :ARG0 (z7 / boss\n                                    :ARG2-of z4))))))"], "10": ["You need to read a lot to know what you like and what you don't.", "You have to decide how much you want to demand, and what unmet demands you can live with.", "# ::snt You need to read a lot to know what you like and what you don't.\n(z1 / need-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / read-01\n            :ARG0 z2\n            :quant (z4 / lot)\n            :purpose (z5 / know-01\n                  :ARG0 z2\n                  :ARG1 (z6 / and\n                        :op1 (z7 / thing\n                              :ARG1-of (z8 / like-01\n                                    :ARG0 z2))\n                        :op2 (z9 / thing\n                              :ARG1-of (z10 / dislike-01\n                                    :ARG0 z2))))))", "# ::snt You have to decide how much you want to demand, and what unmet demands you can live with.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / decide-01\n            :ARG0 z2\n            :ARG1 (z4 / and\n                  :op1 (z5 / monetary-quantity\n                        :ARG1-of (z6 / demand-01\n                              :ARG0 z2\n                              :ARG1-of (z7 / want-01\n                                    :ARG0 z2)))\n                  :op2 (z8 / monetary-quantity\n                        :ARG1-of (z9 / demand-01\n                              :ARG1-of (z10 / meet-01\n                                    :polarity -))\n                        :ARG2-of (z11 / live-01\n                              :ARG0 z2\n                              :ARG1-of (z12 / possible-01))))))"], "11": ["It depends on what you want to have in your tank.", "i think it depends what you want:", "# ::snt It depends on what you want to have in your tank.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / have-03\n                  :ARG0 (z5 / you)\n                  :ARG1-of (z6 / want-01\n                        :ARG0 z5)\n                  :location (z7 / tank\n                        :poss z5))))", "# ::snt i think it depends what you want:\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / thing\n                  :ARG1-of (z6 / want-01\n                        :ARG0 (z7 / you)))))"], "12": ["You can do it, too.", "Yes, you can do it.", "# ::snt You can do it, too.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :mod (z5 / too)))", "# ::snt Yes, you can do it.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)))"], "13": ["You should do it.", "You can do it, too.", "# ::snt You should do it.\n(z1 / recommend-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)))", "# ::snt You can do it, too.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :mod (z5 / too)))"], "14": ["You have to decide what you want to get out of this.", "You have to know what you want to do.", "# ::snt You have to decide what you want to get out of this.\n(z1 / obligate-01\n      :ARG2 (z2 / decide-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / get-out-07\n                        :ARG0 z3\n                        :ARG2 (z6 / this))\n                  :ARG1-of (z7 / want-01\n                        :ARG0 z3))))", "# ::snt You have to know what you want to do.\n(z1 / obligate-01\n      :ARG2 (z2 / know-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 z3\n                        :ARG1-of (z6 / want-01\n                              :ARG0 z3)))))"], "15": ["I have few suggestions for you:", "I have two suggestions for you:", "# ::snt I have few suggestions for you:\n(z1 / suggest-01\n      :ARG0 (z2 / i)\n      :ARG2 (z3 / you)\n      :quant (z4 / few))", "# ::snt I have two suggestions for you:\n(z1 / suggest-01\n      :quant 2\n      :ARG0 (z2 / i)\n      :ARG2 (z3 / you))"], "16": ["You want to start in the room that is the largest to make sure you have the straightest start.", "You will have to start with the clinic, and maybe move on to the insurance company.", "# ::snt You want to start in the room that is the largest to make sure you have the straightest start.\n(z1 / want-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / start-01\n            :ARG0 z2\n            :location (z4 / room\n                  :ARG1-of (z5 / have-degree-91\n                        :ARG2 (z6 / large)\n                        :ARG3 (z7 / most)))\n            :purpose (z8 / ensure-01\n                  :ARG0 z2\n                  :ARG1 (z9 / have-03\n                        :ARG0 z2\n                        :ARG1 (z10 / start-01\n                              :ARG0 z2\n                              :ARG1-of (z11 / straight-04\n                                    :ARG2-of (z12 / have-degree-91\n                                          :ARG1 z10\n                                          :ARG3 (z13 / most))))))))", "# ::snt You will have to start with the clinic, and maybe move on to the insurance company.\n(z1 / and\n      :op1 (z2 / obligate-01\n            :ARG2 (z3 / start-01\n                  :ARG0 (z4 / you)\n                  :ARG2 (z5 / clinic)))\n      :op2 (z6 / possible-01\n            :ARG1 (z7 / move-01\n                  :ARG0 z4\n                  :ARG2 (z8 / company\n                        :ARG0-of (z9 / insure-02))\n                  :direction (z10 / on))))"], "17": ["if you don't want to derail the meeting, but the key is to speak up.", "The key thing you need to do in this meeting is listen.", "# ::snt if you don't want to derail the meeting, but the key is to speak up.\n(z1 / have-condition-91\n      :ARG2 (z2 / want-01\n            :polarity -\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / derail-01\n                  :ARG0 z3\n                  :ARG1 (z5 / meet-03))\n            :concession-of (z6 / speak-up-02\n                  :ARG0 z3\n                  :ARG1-of (z7 / key-02))))", "# ::snt The key thing you need to do in this meeting is listen.\n(z1 / thing\n      :ARG1-of (z2 / key-02)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :time (z5 / meet-03\n                  :mod (z6 / this))\n            :ARG1-of (z7 / need-01\n                  :ARG0 z4))\n      :domain (z8 / listen-01\n            :ARG0 z4))"], "18": ["Unfortunately the answer to your question is we simply do not know.", "My answer to your question is \"Probably Not\".", "# ::snt Unfortunately the answer to your question is we simply do not know.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / know-01\n            :polarity -\n            :ARG0 (z5 / we)\n            :ARG1-of (z6 / simple-02))\n      :ARG2-of (z7 / fortunate-01\n            :polarity -))", "# ::snt My answer to your question is \"Probably Not\".\n(z1 / answer-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / question-01\n            :ARG0 (z4 / you))\n      :ARG2 (z5 / probable\n            :op1 (z6 / have-polarity-91\n                  :ARG2 -)))"], "19": ["As soon as possible.", "Start them as early as possible.", "# ::snt As soon as possible.\n(z1 / soon\n      :ARG2-of (z2 / have-degree-91\n            :ARG3 (z3 / equal)\n            :ARG4 (z4 / possible-01)))", "# ::snt Start them as early as possible.\n(z1 / start-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / they)\n      :time (z4 / early\n            :ARG2-of (z5 / have-degree-91\n                  :ARG1 z1\n                  :ARG3 (z6 / equal)\n                  :ARG4 (z7 / possible-01\n                        :ARG1 z1))))"], "20": ["You just have to base your answer on what you do know, which is what you want.", "It depends on what you want to do next, and where you want to do it.", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))"], "21": ["The answer to both questions is: Yes.", "The answer to both of your questions is yes.", "# ::snt The answer to both questions is: Yes.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :mod (z3 / both))\n      :ARG2 (z4 / yes))", "# ::snt The answer to both of your questions is yes.\n(z1 / yes\n      :ARG2-of (z2 / answer-01\n            :ARG1 (z3 / question-01\n                  :ARG0 (z4 / you)\n                  :mod (z5 / both))))"], "22": ["To give this an answer:", "I'll answer this question:", "# ::snt To give this an answer:\n(z1 / give-01\n      :ARG1 (z2 / thing\n            :ARG2-of (z3 / answer-01)\n            :mod (z4 / this)))", "# ::snt I'll answer this question:\n(z1 / answer-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / question-01\n            :mod (z4 / this)))"], "23": ["Unfortunately the answer to your question is we simply do not know.", "Sorry, I don't know the answer to your question.", "# ::snt Unfortunately the answer to your question is we simply do not know.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / know-01\n            :polarity -\n            :ARG0 (z5 / we)\n            :ARG1-of (z6 / simple-02))\n      :ARG2-of (z7 / fortunate-01\n            :polarity -))", "# ::snt Sorry, I don't know the answer to your question.\n(z1 / sorry-01\n      :ARG1 (z2 / i)\n      :ARG2 (z3 / know-01\n            :polarity -\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG1 (z5 / thing\n                        :ARG1-of (z6 / question-01\n                              :ARG0 (z7 / you))))))"], "24": ["The rule - When in doubt throw it out!", "I always go by the rule \"When in doubt, throw it out!", "# ::snt The rule - When in doubt throw it out!\n(z1 / rule-out-02\n      :ARG1 (z2 / throw-out-06\n            :mode imperative\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :condition (z5 / doubt-01\n                  :ARG0 z3)))", "# ::snt I always go by the rule \"When in doubt, throw it out!\n(z1 / rule-01\n      :ARG1 (z2 / throw-out-06\n            :mode imperative\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :condition (z5 / doubt-01\n                  :ARG0 z3)))"], "25": ["This is not a good idea.", "This sound like a very bad idea.", "# ::snt This is not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / this))", "# ::snt This sound like a very bad idea.\n(z1 / sound-01\n      :ARG1 (z2 / this)\n      :ARG2 (z3 / idea\n            :ARG1-of (z4 / bad-07\n                  :degree (z5 / very))))"], "26": ["Yes, it's probably a good idea to renew your passport.", "It's a good idea.", "# ::snt Yes, it's probably a good idea to renew your passport.\n(z1 / probable\n      :domain (z2 / idea\n            :ARG1-of (z3 / good-02)\n            :domain (z4 / renew-01\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / passport\n                        :poss z5))))", "# ::snt It's a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02)\n      :domain (z3 / it))"], "27": ["It probably depends on the cut of meat.", "It depends on the meat and how it's cut.", "# ::snt It probably depends on the cut of meat.\n(z1 / probable\n      :domain (z2 / depend-01\n            :ARG0 (z3 / it)\n            :ARG1 (z4 / cut-02\n                  :ARG1 (z5 / meat))))", "# ::snt It depends on the meat and how it's cut.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / meat)\n            :op2 (z5 / thing\n                  :manner-of (z6 / cut-01\n                        :ARG1 z4))))"], "28": ["It's not a good idea.", "It's a good question.", "# ::snt It's not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / it))", "# ::snt It's a good question.\n(z1 / thing\n      :ARG1-of (z2 / question-01)\n      :ARG1-of (z3 / good-02)\n      :domain (z4 / it))"], "29": ["It's pretty much up to you.", "It's much better to ask.", "# ::snt It's pretty much up to you.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / you)\n      :degree (z4 / pretty-much))", "# ::snt It's much better to ask.\n(z1 / have-degree-91\n      :ARG1 (z2 / ask-01)\n      :ARG2 (z3 / good-02\n            :ARG1 z2)\n      :ARG3 (z4 / more\n            :quant (z5 / much)))"], "30": ["Yes, there is a reason for it.", "Yes, that is exactly what it means.", "# ::snt Yes, there is a reason for it.\n(z1 / reason\n      :ARG0-of (z2 / cause-01\n            :ARG1 (z3 / it)))", "# ::snt Yes, that is exactly what it means.\n(z1 / mean-01\n      :ARG1 (z2 / it)\n      :ARG2 (z3 / that)\n      :mod (z4 / exact))"], "31": ["Have you tried asking your employees?", "Have you tried asking?", "# ::snt Have you tried asking your employees?\n(z1 / try-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / ask-01\n            :ARG0 z2\n            :ARG2 (z4 / person\n                  :ARG1-of (z5 / employ-01\n                        :ARG0 z2)))\n      :polarity (z6 / amr-unknown))", "# ::snt Have you tried asking?\n(z1 / try-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / ask-01\n            :ARG0 z2)\n      :polarity (z4 / amr-unknown))"], "32": ["You guys are making this all WAAAAAY too complicated.", "You are making this too complicated.", "# ::snt You guys are making this all WAAAAAY too complicated.\n(z1 / complicate-01\n      :ARG0 (z2 / you\n            :mod (z3 / guy))\n      :ARG1 (z4 / this\n            :mod (z5 / all))\n      :ARG2-of (z6 / have-degree-91\n            :ARG1 z4\n            :ARG3 (z7 / too\n                  :mod (z8 / way))))", "# ::snt You are making this too complicated.\n(z1 / complicate-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / this)\n      :ARG2-of (z4 / have-degree-91\n            :ARG1 z3\n            :ARG3 (z5 / too)))"], "33": ["You don't have to know.", "You have no need to do anything.", "# ::snt You don't have to know.\n(z1 / obligate-01\n      :polarity -\n      :ARG2 (z2 / know-01\n            :ARG0 (z3 / you)))", "# ::snt You have no need to do anything.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / do-02\n            :ARG0 z2\n            :ARG1 (z4 / anything)))"], "34": ["There are two things to consider:", "There are two possible causes for this:", "# ::snt There are two things to consider:\n(z1 / thing\n      :quant 2\n      :ARG1-of (z2 / consider-02))", "# ::snt There are two possible causes for this:\n(z1 / possible-01\n      :ARG1 (z2 / cause-01\n            :quant 2\n            :ARG1 (z3 / this)))"], "35": ["Work into it slowly.", "It seems to work.", "# ::snt Work into it slowly.\n(z1 / work-01\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it)\n      :ARG1-of (z4 / slow-05))", "# ::snt It seems to work.\n(z1 / seem-01\n      :ARG1 (z2 / work-09\n            :ARG1 (z3 / it)))"], "36": ["You can buy it on amazon for $5.", "You can buy it on ebay for $25 and up.", "# ::snt You can buy it on amazon for $5.\n(z1 / possible-01\n      :ARG1 (z2 / buy-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :ARG3 (z5 / monetary-quantity\n                  :quant 5\n                  :unit (z6 / dollar))\n            :medium (z7 / company\n                  :name (z8 / name\n                        :op1 \"Amazon\"))))", "# ::snt You can buy it on ebay for $25 and up.\n(z1 / possible-01\n      :ARG1 (z2 / buy-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :ARG3 (z5 / company\n                  :name (z6 / name\n                        :op1 \"eBay\"))\n            :ARG4 (z7 / at-least\n                  :op1 (z8 / monetary-quantity\n                        :quant 25\n                        :unit (z9 / dollar)))))"], "37": ["The coffee simply picks up the aluminum from the pot, as the coffee is acidic.", "One idea is cleaning the coffee residue from the coffee pot.", "# ::snt The coffee simply picks up the aluminum from the pot, as the coffee is acidic.\n(z1 / pick-up-04\n      :ARG0 (z2 / coffee)\n      :ARG1 (z3 / aluminum)\n      :ARG2 (z4 / pot)\n      :ARG1-of (z5 / simple-02)\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / acidic\n                  :domain z2)))", "# ::snt One idea is cleaning the coffee residue from the coffee pot.\n(z1 / idea\n      :quant 1\n      :domain (z2 / clean-01\n            :ARG1 (z3 / residue\n                  :mod (z4 / coffee)\n                  :source (z5 / pot\n                        :mod z4))))"], "38": ["There are two ways to start with: plunging and dripping.", "There are two traditional ways to bend wood:", "# ::snt There are two ways to start with: plunging and dripping.\n(z1 / way\n      :quant 2\n      :manner-of (z2 / start-01)\n      :ARG1-of (z3 / mean-01\n            :ARG2 (z4 / and\n                  :op1 (z5 / plunge-01)\n                  :op2 (z6 / drip-01))))", "# ::snt There are two traditional ways to bend wood:\n(z1 / way\n      :quant 2\n      :manner-of (z2 / bend-01\n            :ARG1 (z3 / wood))\n      :mod (z4 / tradition))"], "39": ["You might have to try a variety before you find one that clicks with him.", "My advice would be to try a variety of coffees that you can afford and find one you like.", "# ::snt You might have to try a variety before you find one that clicks with him.\n(z1 / possible-01\n      :ARG1 (z2 / obligate-01\n            :ARG1 (z3 / you)\n            :ARG2 (z4 / try-01\n                  :ARG0 z3\n                  :ARG1 (z5 / variety)\n                  :time (z6 / before\n                        :op1 (z7 / find-01\n                              :ARG0 z3\n                              :ARG1 (z8 / one\n                                    :ARG1-of (z9 / click-02\n                                          :ARG2 (z10 / he))))))))", "# ::snt My advice would be to try a variety of coffees that you can afford and find one you like.\n(z1 / advise-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / and\n            :op1 (z4 / try-01\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / coffee\n                        :mod (z7 / variety)\n                        :ARG1-of (z8 / afford-01\n                              :ARG0 z5\n                              :ARG1-of (z9 / possible-01))))\n            :op2 (z10 / find-01\n                  :ARG0 z5\n                  :ARG1 (z11 / coffee\n                        :ARG1-of (z12 / like-01\n                              :ARG0 z5)))))"], "40": ["It's not a good idea.", "It is not a good idea.", "# ::snt It's not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / it))", "# ::snt It is not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / it))"], "41": ["You just have to base your answer on what you do know, which is what you want.", "They can, but the way to do it depends on what you have available.", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt They can, but the way to do it depends on what you have available.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / do-02\n                  :ARG0 (z4 / they)))\n      :ARG2 (z5 / depend-01\n            :ARG0 (z6 / way\n                  :manner-of (z7 / do-02\n                        :ARG1 (z8 / it)))\n            :ARG1 (z9 / have-03\n                  :ARG0 (z10 / you)\n                  :ARG1 (z11 / thing\n                        :ARG2-of (z12 / available-02)))))"], "42": ["Yes, you should mention your experience.", "Yes, you should mention it.", "# ::snt Yes, you should mention your experience.\n(z1 / recommend-01\n      :ARG1 (z2 / mention-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / experience-01\n                  :ARG0 z3)))", "# ::snt Yes, you should mention it.\n(z1 / recommend-01\n      :ARG1 (z2 / mention-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)))"], "43": ["From what I understand this is what you can do :", "Can you do this?", "# ::snt From what I understand this is what you can do :\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / this))\n      :ARG1-of (z5 / understand-01\n            :ARG0 (z6 / i)))", "# ::snt Can you do this?\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / this))\n      :polarity (z5 / amr-unknown))"], "44": ["Take a look at these:", "Take a look at this: ", "# ::snt Take a look at these:\n(z1 / look-01\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / this))", "# ::snt Take a look at this: \n(z1 / look-01\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / this))"], "45": ["I'd say it primarily depends on two things:", "I'd say it depends on the ultimate outcome you want?", "# ::snt I'd say it primarily depends on two things:\n(z1 / say-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / thing\n                  :quant 2)\n            :mod (z6 / primary)))", "# ::snt I'd say it depends on the ultimate outcome you want?\n(z1 / say-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / outcome\n                  :mod (z6 / ultimate)\n                  :ARG1-of (z7 / want-01\n                        :ARG0 (z8 / you)))\n            :polarity (z9 / amr-unknown)))"], "46": ["Some of what you can do:", "Not much you can do besides:", "# ::snt Some of what you can do:\n(z1 / thing\n      :quant (z2 / some)\n      :ARG1-of (z3 / include-91\n            :ARG2 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :ARG1-of (z7 / possible-01)))))", "# ::snt Not much you can do besides:\n(z1 / possible-01\n      :polarity -\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / much\n                  :mod (z5 / besides))))"], "47": ["This is not a good idea.", "But it is not a good idea.", "# ::snt This is not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / this))", "# ::snt But it is not a good idea.\n(z1 / contrast-01\n      :ARG2 (z2 / idea\n            :ARG1-of (z3 / good-02\n                  :polarity -)\n            :domain (z4 / it)))"], "48": ["The answers so far are already good, but I'd like to add a map for Switzerland:", "You have a lot of answers already, but I'd like to add Curries as another solutions.", "# ::snt The answers so far are already good, but I'd like to add a map for Switzerland:\n(z1 / contrast-01\n      :ARG1 (z2 / good-02\n            :ARG1 (z3 / answer\n                  :time (z4 / so-far))\n            :time (z5 / already))\n      :ARG2 (z6 / like-02\n            :ARG0 (z7 / i)\n            :ARG1 (z8 / add-02\n                  :ARG0 z7\n                  :ARG1 (z9 / map\n                        :topic (z10 / country\n                              :name (z11 / name\n                                    :op1 \"Switzerland\"))))))", "# ::snt You have a lot of answers already, but I'd like to add Curries as another solutions.\n(z1 / contrast-01\n      :ARG1 (z2 / have-03\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / answer\n                  :quant (z5 / lot))\n            :time (z6 / already))\n      :ARG2 (z7 / like-02\n            :ARG0 (z8 / i)\n            :ARG1 (z9 / add-02\n                  :ARG0 z8\n                  :ARG1 (z10 / curry\n                        :prep-as (z11 / solution\n                              :mod (z12 / another))))))"], "49": ["I was in a similar situation.", "I had a similar situation.", "# ::snt I was in a similar situation.\n(z1 / be-located-at-91\n      :ARG1 (z2 / i)\n      :ARG2 (z3 / situation\n            :ARG1-of (z4 / resemble-01)))", "# ::snt I had a similar situation.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / situation\n            :ARG1-of (z4 / resemble-01)))"], "50": ["I've had this same problem.", "I had this same problem.", "# ::snt I've had this same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01)\n            :mod (z5 / this)))", "# ::snt I had this same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01)\n            :mod (z5 / this)))"], "51": ["There is no maximum.", "There is no quarantine period.", "# ::snt There is no maximum.\n(z1 / maximum\n      :polarity -)", "# ::snt There is no quarantine period.\n(z1 / period\n      :polarity -\n      :mod (z2 / quarantine))"], "52": ["I am not sure this is the right site for the question.", "I am not sure this question would have made much sense to the Romans themselves.", "# ::snt I am not sure this is the right site for the question.\n(z1 / sure-02\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / site\n            :ARG1-of (z4 / right-02\n                  :ARG2 (z5 / thing\n                        :ARG1-of (z6 / question-01)))\n            :domain (z7 / this)))", "# ::snt I am not sure this question would have made much sense to the Romans themselves.\n(z1 / sure-02\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / sense-02\n            :ARG1 (z4 / question-01\n                  :mod (z5 / this))\n            :ARG2 (z6 / person\n                  :mod (z7 / country\n                        :name (z8 / name\n                              :op1 \"Rome\")))\n            :degree (z9 / much)))"], "53": ["It depends on what you want to do next, and where you want to do it.", "In other words, it depends on where you go, when you do there and how.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt In other words, it depends on where you go, when you do there and how.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / location\n                  :ARG4-of (z5 / go-02\n                        :ARG0 (z6 / you)))\n            :op2 (z7 / time\n                  :time-of (z8 / do-02\n                        :ARG0 z6\n                        :location z4))\n            :op3 (z9 / thing\n                  :manner-of z8)))"], "54": ["You need to read a lot to know what you like and what you don't.", "Yes, you should create a portfolio site to showcase what you can do and what you've done.", "# ::snt You need to read a lot to know what you like and what you don't.\n(z1 / need-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / read-01\n            :ARG0 z2\n            :quant (z4 / lot)\n            :purpose (z5 / know-01\n                  :ARG0 z2\n                  :ARG1 (z6 / and\n                        :op1 (z7 / thing\n                              :ARG1-of (z8 / like-01\n                                    :ARG0 z2))\n                        :op2 (z9 / thing\n                              :ARG1-of (z10 / dislike-01\n                                    :ARG0 z2))))))", "# ::snt Yes, you should create a portfolio site to showcase what you can do and what you've done.\n(z1 / recommend-01\n      :ARG1 (z2 / create-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / site\n                  :mod (z5 / portfolio))\n            :purpose (z6 / showcase-01\n                  :ARG0 z4\n                  :ARG1 (z7 / and\n                        :op1 (z8 / thing\n                              :ARG1-of (z9 / do-02\n                                    :ARG0 z3\n                                    :ARG1-of (z10 / possible-01)))\n                        :op2 (z11 / thing\n                              :ARG1-of (z12 / do-02\n                                    :ARG0 z3))))))"], "55": ["You are not disclosing key info.", "No you are not.", "# ::snt You are not disclosing key info.\n(z1 / disclose-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / information\n            :ARG1-of (z4 / key-02)))", "# ::snt No you are not.\n(z1 / have-polarity-91\n      :ARG1 (z2 / you)\n      :ARG2 -)"], "56": ["It depends on what you want to do next, and where you want to do it.", "I guess it depends on what you're going to do.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt I guess it depends on what you're going to do.\n(z1 / guess-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / thing\n                  :ARG1-of (z6 / do-02\n                        :ARG0 (z7 / you)))))"], "57": ["You just have to base your answer on what you do know, which is what you want.", "It is his job to see that you have what you need to do your job.", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt It is his job to see that you have what you need to do your job.\n(z1 / job\n      :poss (z2 / he)\n      :domain (z3 / see-01\n            :ARG0 z2\n            :ARG1 (z4 / have-03\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / thing\n                        :ARG1-of (z7 / need-01\n                              :ARG0 z5\n                              :purpose (z8 / do-02\n                                    :ARG0 z5\n                                    :ARG1 z1))))))"], "58": ["It depends on what you want to do next, and where you want to do it.", "It depends on what you want to achieve.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt It depends on what you want to achieve.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / achieve-01\n                  :ARG0 (z5 / you)\n                  :ARG1-of (z6 / want-01\n                        :ARG0 z5))))"], "59": ["This is a problem that the professor has to deal with.", "This is a big problem.", "# ::snt This is a problem that the professor has to deal with.\n(z1 / problem\n      :domain (z2 / this)\n      :ARG2-of (z3 / deal-01\n            :ARG0 (z4 / professor)\n            :ARG2-of (z5 / obligate-01)))", "# ::snt This is a big problem.\n(z1 / problem\n      :mod (z2 / big)\n      :domain (z3 / this))"], "60": ["This is a very unusual request.", "This sounds a bit unusual.", "# ::snt This is a very unusual request.\n(z1 / request\n      :mod (z2 / usual\n            :polarity -\n            :degree (z3 / very))\n      :domain (z4 / this))", "# ::snt This sounds a bit unusual.\n(z1 / sound-01\n      :ARG1 (z2 / this)\n      :ARG2 (z3 / usual\n            :polarity -\n            :degree (z4 / bit)))"], "61": ["It very much depends on the grant in question.", "I think it depends very much on the area.", "# ::snt It very much depends on the grant in question.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / grant\n            :ARG1-of (z4 / question-01))\n      :degree (z5 / much\n            :degree (z6 / very)))", "# ::snt I think it depends very much on the area.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / area)\n            :degree (z6 / much\n                  :degree (z7 / very))))"], "62": ["I have the same thing.", "I have had the same problem.", "# ::snt I have the same thing.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / same-01)))", "# ::snt I have had the same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01)))"], "63": ["No it does not affect your ratings.", "No it is not.", "# ::snt No it does not affect your ratings.\n(z1 / affect-01\n      :polarity -\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / rate-01\n            :ARG1 (z4 / you)))", "# ::snt No it is not.\n(z1 / have-polarity-91\n      :ARG1 (z2 / it)\n      :ARG2 -)"], "64": ["My answer to your question is \"Probably Not\".", "I think that the short  answer to your question is: No.", "# ::snt My answer to your question is \"Probably Not\".\n(z1 / answer-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / question-01\n            :ARG0 (z4 / you))\n      :ARG2 (z5 / probable\n            :op1 (z6 / have-polarity-91\n                  :ARG2 -)))", "# ::snt I think that the short  answer to your question is: No.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / answer-01\n            :ARG1 (z4 / question-01\n                  :ARG0 (z5 / you))\n            :ARG2 (z6 / no)\n            :ARG1-of (z7 / short-07)))"], "65": ["I don't think it makes any tremendous difference.", "I don't think it makes much difference.", "# ::snt I don't think it makes any tremendous difference.\n(z1 / think-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / make-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / differ-02\n                  :mod (z6 / tremendous)\n                  :mod (z7 / any))))", "# ::snt I don't think it makes much difference.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / make-01\n            :polarity -\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / differ-02\n                  :quant (z6 / much))))"], "66": ["It depends on what they are.", "It depends on what they are evaluating, and how.", "# ::snt It depends on what they are.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :domain (z4 / they)))", "# ::snt It depends on what they are evaluating, and how.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / evaluate-01\n                  :ARG0 (z5 / they)\n                  :ARG1 (z6 / thing))\n            :op2 (z7 / evaluate-01\n                  :ARG0 z5\n                  :manner (z8 / amr-unknown))))"], "67": ["There's not a lot you can do about that.", "There's not that much that you can do with a sourdough starter.", "# ::snt There's not a lot you can do about that.\n(z1 / possible-01\n      :polarity -\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / lot)\n            :ARG2 (z5 / that)))", "# ::snt There's not that much that you can do with a sourdough starter.\n(z1 / much\n      :polarity -\n      :ARG1-of (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1-of (z4 / possible-01)\n            :instrument (z5 / starter\n                  :mod (z6 / sourdough))))"], "68": ["You answered your own question.", "You have answered your own question.", "# ::snt You answered your own question.\n(z1 / answer-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / question-01\n                  :ARG0 z2)))", "# ::snt You have answered your own question.\n(z1 / answer-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / question-01\n            :ARG0 z2))"], "69": ["You just have to base your answer on what you do know, which is what you want.", "Th answer to you problem is that you dont actually know what you're getting in .", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt Th answer to you problem is that you dont actually know what you're getting in .\n(z1 / answer-01\n      :ARG1 (z2 / problem\n            :poss (z3 / you))\n      :ARG2 (z4 / know-01\n            :polarity -\n            :ARG0 z3\n            :ARG1 (z5 / thing\n                  :ARG2-of (z6 / get-05\n                        :ARG1 z3))\n            :ARG1-of (z7 / actual-02)))"], "70": ["This is not a good idea.", "This is probably not a good idea but I will suggest it anyhow.", "# ::snt This is not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / this))", "# ::snt This is probably not a good idea but I will suggest it anyhow.\n(z1 / have-concession-91\n      :ARG1 (z2 / suggest-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / idea\n                  :ARG1-of (z5 / good-02\n                        :polarity -\n                        :mod (z6 / probable))\n                  :domain (z7 / this))\n            :mod (z8 / anyway)))"], "71": ["The best thing you can do is to know your stuff.", "My recommendation is not to say anything, and do the best you can.", "# ::snt The best thing you can do is to know your stuff.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :domain (z5 / know-01\n                        :ARG0 z3\n                        :ARG1 (z6 / stuff\n                              :poss z3))\n                  :ARG1-of (z7 / have-degree-91\n                        :ARG2 (z8 / good-02\n                              :ARG1 z4)\n                        :ARG3 (z9 / most)))))", "# ::snt My recommendation is not to say anything, and do the best you can.\n(z1 / recommend-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / and\n            :op1 (z4 / say-01\n                  :polarity -\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / anything))\n            :op2 (z7 / do-02\n                  :ARG0 z5\n                  :ARG1 (z8 / thing\n                        :ARG1-of (z9 / have-degree-91\n                              :ARG2 (z10 / good-03\n                                    :ARG1 z8)\n                              :ARG3 (z11 / most))\n                        :ARG1-of (z12 / possible-01)))))"], "72": ["I'd say it primarily depends on two things:", "I'd say it depends what conditions you have.", "# ::snt I'd say it primarily depends on two things:\n(z1 / say-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / thing\n                  :quant 2)\n            :mod (z6 / primary)))", "# ::snt I'd say it depends what conditions you have.\n(z1 / say-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / have-03\n                  :ARG0 (z6 / you)\n                  :ARG1 (z7 / condition))))"], "73": ["You don't have to know.", "You don't have to do anything to season it.", "# ::snt You don't have to know.\n(z1 / obligate-01\n      :polarity -\n      :ARG2 (z2 / know-01\n            :ARG0 (z3 / you)))", "# ::snt You don't have to do anything to season it.\n(z1 / obligate-01\n      :polarity -\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / do-02\n            :ARG0 z2\n            :ARG1 (z4 / anything)\n            :purpose (z5 / season-01\n                  :ARG0 z2\n                  :ARG1 (z6 / it))))"], "74": ["I have the same thing.", "I have the same situation and have traveled extensively.", "# ::snt I have the same thing.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / same-01)))", "# ::snt I have the same situation and have traveled extensively.\n(z1 / and\n      :op1 (z2 / have-03\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / situation\n                  :ARG1-of (z5 / same-01)))\n      :op2 (z6 / travel-01\n            :ARG0 z3\n            :ARG1-of (z7 / extensive-03)))"], "75": ["It's not a good idea.", "I do not think it's a good idea.", "# ::snt It's not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / it))", "# ::snt I do not think it's a good idea.\n(z1 / think-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / idea\n            :ARG1-of (z4 / good-02)\n            :domain (z5 / it)))"], "76": ["You are on the right path.", "You are right on the mark.", "# ::snt You are on the right path.\n(z1 / be-located-at-91\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / path\n            :ARG1-of (z4 / right-02)))", "# ::snt You are right on the mark.\n(z1 / be-located-at-91\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / mark\n            :mod (z4 / right)))"], "77": ["This doesn't answer your question, but:", "This is a part answer to your question", "# ::snt This doesn't answer your question, but:\n(z1 / answer-01\n      :polarity -\n      :ARG0 (z2 / this)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / question-01\n                  :ARG0 (z5 / you)))\n      :ARG1-of (z6 / contrast-01))", "# ::snt This is a part answer to your question\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / this)\n      :mod (z5 / part))"], "78": ["How should I proceed about this?", "So how should I do this?", "# ::snt How should I proceed about this?\n(z1 / recommend-01\n      :ARG1 (z2 / proceed-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / this)\n            :manner (z5 / amr-unknown))\n      :ARG2 z3)", "# ::snt So how should I do this?\n(z1 / cause-01\n      :ARG1 (z2 / recommend-01\n            :ARG1 (z3 / do-02\n                  :ARG0 (z4 / i)\n                  :ARG1 (z5 / this)\n                  :manner (z6 / amr-unknown))\n            :ARG2 z4))"], "79": ["Does this page answer your question?", "Does this answer your questions?", "# ::snt Does this page answer your question?\n(z1 / answer-01\n      :ARG0 (z2 / page\n            :mod (z3 / this))\n      :ARG1 (z4 / question-01\n            :ARG0 (z5 / you))\n      :polarity (z6 / amr-unknown))", "# ::snt Does this answer your questions?\n(z1 / answer-01\n      :ARG0 (z2 / this)\n      :ARG1 (z3 / question-01\n            :ARG0 (z4 / you))\n      :polarity (z5 / amr-unknown))"], "80": ["You can use it, too.", "You can still use it for practice.", "# ::snt You can use it, too.\n(z1 / possible-01\n      :ARG1 (z2 / use-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :mod (z5 / too)))", "# ::snt You can still use it for practice.\n(z1 / possible-01\n      :ARG1 (z2 / use-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :ARG2 (z5 / practice-01\n                  :ARG0 z3))\n      :mod (z6 / still))"], "81": ["It really depends on how the employer documents it.", "It depends how you're stating it.", "# ::snt It really depends on how the employer documents it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / document-01\n            :ARG0 (z4 / company\n                  :ARG0-of (z5 / employ-01))\n            :ARG1 z2\n            :manner (z6 / amr-unknown))\n      :ARG1-of (z7 / real-04))", "# ::snt It depends how you're stating it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / have-manner-91\n            :ARG1 (z4 / state-01\n                  :ARG0 (z5 / you)\n                  :ARG1 z2)))"], "82": ["I've had this same problem.", "I've had this problem while working in a pubs.", "# ::snt I've had this same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01)\n            :mod (z5 / this)))", "# ::snt I've had this problem while working in a pubs.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :mod (z4 / this))\n      :time (z5 / work-01\n            :ARG0 z2\n            :ARG2 (z6 / pub)))"], "83": ["You need to read a lot to know what you like and what you don't.", "You should tell a good story and sometimes you have to tweak reality/history to do so.", "# ::snt You need to read a lot to know what you like and what you don't.\n(z1 / need-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / read-01\n            :ARG0 z2\n            :quant (z4 / lot)\n            :purpose (z5 / know-01\n                  :ARG0 z2\n                  :ARG1 (z6 / and\n                        :op1 (z7 / thing\n                              :ARG1-of (z8 / like-01\n                                    :ARG0 z2))\n                        :op2 (z9 / thing\n                              :ARG1-of (z10 / dislike-01\n                                    :ARG0 z2))))))", "# ::snt You should tell a good story and sometimes you have to tweak reality/history to do so.\n(z1 / and\n      :op1 (z2 / recommend-01\n            :ARG1 (z3 / tell-01\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / story\n                        :ARG1-of (z6 / good-02))))\n      :op2 (z7 / obligate-01\n            :ARG1 z4\n            :ARG2 (z8 / tweak-01\n                  :ARG0 z4\n                  :ARG1 (z9 / and\n                        :op1 (z10 / reality)\n                        :op2 (z11 / history))\n                  :purpose z3)\n            :frequency (z12 / sometimes)))"], "84": ["It depends on what you want to do next, and where you want to do it.", "It depends on what you want to be able to do.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt It depends on what you want to be able to do.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / do-02\n                  :ARG0 (z5 / you)\n                  :ARG1-of (z6 / want-01\n                        :ARG0 z5)\n                  :ARG1-of (z7 / possible-01))))"], "85": ["Yes, you have to file a tax return in Canada.", "You are not required to file a tax return in Canada if you have no taxable income.", "# ::snt Yes, you have to file a tax return in Canada.\n(z1 / obligate-01\n      :ARG2 (z2 / file-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / return\n                  :mod (z5 / tax-01))\n            :location (z6 / country\n                  :name (z7 / name\n                        :op1 \"Canada\"))))", "# ::snt You are not required to file a tax return in Canada if you have no taxable income.\n(z1 / require-01\n      :polarity -\n      :ARG1 (z2 / file-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / return\n                  :mod (z5 / tax-01))\n            :location (z6 / country\n                  :name (z7 / name\n                        :op1 \"Canada\")))\n      :ARG2 z3\n      :condition (z8 / have-03\n            :polarity -\n            :ARG0 z3\n            :ARG1 (z9 / income\n                  :ARG1-of (z10 / tax-01))))"], "86": ["I don't see why there should be any problem with this whatsoever.", "I don't see why that should be a problem.", "# ::snt I don't see why there should be any problem with this whatsoever.\n(z1 / see-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG0-of (z4 / cause-01\n                  :ARG1 (z5 / recommend-01\n                        :ARG1 (z6 / problem\n                              :mod (z7 / any)\n                              :topic (z8 / this)\n                              :mod (z9 / whatsoever))))))", "# ::snt I don't see why that should be a problem.\n(z1 / see-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG0-of (z4 / cause-01\n                  :ARG1 (z5 / recommend-01\n                        :ARG1 (z6 / problem\n                              :domain (z7 / that))))))"], "87": ["Hope this is what you are looking for.", "If what you are looking for is much higher, they get the picture.", "# ::snt Hope this is what you are looking for.\n(z1 / hope-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / look-01\n            :ARG0 (z4 / you)\n            :ARG1 (z5 / this)))", "# ::snt If what you are looking for is much higher, they get the picture.\n(z1 / get-01\n      :ARG0 (z2 / they)\n      :ARG1 (z3 / picture)\n      :condition (z4 / look-01\n            :ARG0 (z5 / you)\n            :ARG1 (z6 / thing\n                  :ARG1-of (z7 / have-degree-91\n                        :ARG2 (z8 / high-02\n                              :ARG1 z6)\n                        :ARG3 (z9 / more\n                              :quant (z10 / much))))))"], "88": ["The best thing you can do is to know your stuff.", "The best thing to do is to overcome the fussiness.", "# ::snt The best thing you can do is to know your stuff.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :domain (z5 / know-01\n                        :ARG0 z3\n                        :ARG1 (z6 / stuff\n                              :poss z3))\n                  :ARG1-of (z7 / have-degree-91\n                        :ARG2 (z8 / good-02\n                              :ARG1 z4)\n                        :ARG3 (z9 / most)))))", "# ::snt The best thing to do is to overcome the fussiness.\n(z1 / overcome-01\n      :ARG1 (z2 / fuss-01))"], "89": ["It depends on the dish and how amenable it is at the stage you make the mistake.", "It depends on the sauce and the result you want.", "# ::snt It depends on the dish and how amenable it is at the stage you make the mistake.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / dish)\n            :op2 (z5 / degree\n                  :degree-of (z6 / amenable\n                        :domain z4\n                        :time (z7 / stage\n                              :time-of (z8 / mistake-02\n                                    :ARG0 (z9 / you)))))))", "# ::snt It depends on the sauce and the result you want.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / sauce)\n            :op2 (z5 / result\n                  :ARG1-of (z6 / want-01\n                        :ARG0 (z7 / you)))))"], "90": ["You just have to base your answer on what you do know, which is what you want.", "You have to do what is right for you.", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt You have to do what is right for you.\n(z1 / obligate-01\n      :ARG2 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / right-02\n                        :ARG2 z3))))"], "91": ["You PROBABLY don't have any chance at the moment.", "Saying \"thanks, I don't have any questions at the moment\".", "# ::snt You PROBABLY don't have any chance at the moment.\n(z1 / chance-02\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / any)\n      :time (z4 / moment)\n      :ARG1-of (z5 / probable-02))", "# ::snt Saying \"thanks, I don't have any questions at the moment\".\n(z1 / say-01\n      :ARG1 (z2 / and\n            :op1 (z3 / thank-01\n                  :ARG0 (z4 / i)\n                  :ARG1 (z5 / you))\n            :op2 (z6 / have-03\n                  :polarity -\n                  :ARG0 z4\n                  :ARG1 (z7 / thing\n                        :ARG1-of (z8 / question-01\n                              :ARG0 z4))\n                  :time (z9 / moment))))"], "92": ["It really doesn't matter.", "It doesn't matter unless it is really far off.", "# ::snt It really doesn't matter.\n(z1 / matter-01\n      :polarity -\n      :ARG1 (z2 / it)\n      :ARG1-of (z3 / real-04))", "# ::snt It doesn't matter unless it is really far off.\n(z1 / have-condition-91\n      :ARG1 (z2 / matter-01\n            :polarity -\n            :ARG1 (z3 / it))\n      :ARG2 (z4 / far-off\n            :domain z3\n            :ARG1-of (z5 / real-04)))"], "93": ["You don't need to know everything.", "You don't have to know.", "# ::snt You don't need to know everything.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / know-01\n            :ARG0 z2\n            :ARG1 (z4 / everything)))", "# ::snt You don't have to know.\n(z1 / obligate-01\n      :polarity -\n      :ARG2 (z2 / know-01\n            :ARG0 (z3 / you)))"], "94": ["I think you're looking for Mikey (1992).", "I think you're looking for the movie", "# ::snt I think you're looking for Mikey (1992).\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / look-01\n            :ARG0 (z4 / you)\n            :ARG1 (z5 / person\n                  :name (z6 / name\n                        :op1 \"Mikey\")\n                  :time (z7 / date-entity\n                        :year 1992))))", "# ::snt I think you're looking for the movie\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / look-01\n            :ARG0 (z4 / you)\n            :ARG1 (z5 / movie)))"], "95": ["It makes absolutely NO difference.", "No, it makes no difference.", "# ::snt It makes absolutely NO difference.\n(z1 / differ-02\n      :polarity -\n      :degree (z2 / absolute))", "# ::snt No, it makes no difference.\n(z1 / make-02\n      :polarity -\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / differ-02))"], "96": ["I think it's fine to ask this question.", "I think it is okay to ask the question.", "# ::snt I think it's fine to ask this question.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / fine-04\n            :ARG1 (z4 / ask-01\n                  :ARG1 (z5 / thing\n                        :ARG1-of (z6 / question-01)\n                        :mod (z7 / this)))))", "# ::snt I think it is okay to ask the question.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / okay-04\n            :ARG1 (z4 / ask-01\n                  :ARG1 (z5 / thing\n                        :ARG1-of (z6 / question-01)))))"], "97": ["I'm going to be very direct here.", "I'm going to be blunt, here: You don't.", "# ::snt I'm going to be very direct here.\n(z1 / direct-02\n      :ARG0 (z2 / i)\n      :degree (z3 / very)\n      :location (z4 / here))", "# ::snt I'm going to be blunt, here: You don't.\n(z1 / blunt-02\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / do-02\n            :polarity -\n            :ARG0 (z4 / you))\n      :location (z5 / here))"], "98": ["You just have to base your answer on what you do know, which is what you want.", "Yes, you can do exactly what you want to do.", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt Yes, you can do exactly what you want to do.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / want-01\n                        :ARG0 z3)\n                  :mod (z6 / exact))))"], "99": ["You should do it.", "You should prime it first.", "# ::snt You should do it.\n(z1 / recommend-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)))", "# ::snt You should prime it first.\n(z1 / prime-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it)\n      :ord (z4 / ordinal-entity\n            :value 1)\n      :ARG1-of (z5 / recommend-01))"], "100": ["There's not a lot you can do about that.", "I'm afraid there's not really a lot you can do.", "# ::snt There's not a lot you can do about that.\n(z1 / possible-01\n      :polarity -\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / lot)\n            :ARG2 (z5 / that)))", "# ::snt I'm afraid there's not really a lot you can do.\n(z1 / fear-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / possible-01\n            :polarity -\n            :ARG1 (z4 / do-02\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / lot)\n                  :ARG1-of (z7 / real-04))))"], "101": ["What kind of insulation is it?", "What kind of floors are above?", "# ::snt What kind of insulation is it?\n(z1 / insulation\n      :mod (z2 / kind\n            :mod (z3 / amr-unknown)))", "# ::snt What kind of floors are above?\n(z1 / floor\n      :mod (z2 / kind\n            :mod (z3 / amr-unknown))\n      :location (z4 / above))"], "102": ["It depends entirely on your company and your contract.", "I guess it depends on the nature of your contract.", "# ::snt It depends entirely on your company and your contract.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / company\n                  :poss (z5 / you))\n            :op2 (z6 / contract\n                  :poss z5))\n      :degree (z7 / entire))", "# ::snt I guess it depends on the nature of your contract.\n(z1 / guess-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / nature\n                  :poss (z6 / contract\n                        :poss (z7 / you)))))"], "103": ["You answered your own question.", "You've answered your own question already.", "# ::snt You answered your own question.\n(z1 / answer-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / question-01\n                  :ARG0 z2)))", "# ::snt You've answered your own question already.\n(z1 / answer-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / question-01\n                  :ARG0 z2))\n      :time (z5 / already))"], "104": ["I don't think that there's any.", "I don't think there is any universal term.", "# ::snt I don't think that there's any.\n(z1 / think-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / any))", "# ::snt I don't think there is any universal term.\n(z1 / think-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / term\n            :mod (z4 / universal)\n            :mod (z5 / any)))"], "105": ["There are a few things you can do: ", "There are a few minimally-effective things you can do at the personal level.", "# ::snt There are a few things you can do: \n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / possible-01)))", "# ::snt There are a few minimally-effective things you can do at the personal level.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :quant (z5 / few)\n                  :ARG1-of (z6 / effective-04\n                        :ARG1-of (z7 / minimal-02)))\n            :manner (z8 / level\n                  :ARG1-of (z9 / personal-02))))"], "106": ["This is the tip I find most useful:", "Something like this is useful:  ", "# ::snt This is the tip I find most useful:\n(z1 / find-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / useful-05\n            :ARG0 z2\n            :ARG1 (z4 / tip\n                  :mod (z5 / this))\n            :ARG2-of (z6 / have-degree-91\n                  :ARG1 z4\n                  :ARG3 (z7 / most))))", "# ::snt Something like this is useful:  \n(z1 / useful-05\n      :ARG1 (z2 / something\n            :ARG1-of (z3 / resemble-01\n                  :ARG2 (z4 / this))))"], "107": ["That's what I believe.", "Yes, I believe it's a good idea.", "# ::snt That's what I believe.\n(z1 / believe-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / that))", "# ::snt Yes, I believe it's a good idea.\n(z1 / believe-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / idea\n            :ARG1-of (z4 / good-02)\n            :domain (z5 / it)))"], "108": ["If you are not sure how to do it, don't do it at all.", "If not, don't do that and spend that time with something you like to do.", "# ::snt If you are not sure how to do it, don't do it at all.\n(z1 / do-02\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it)\n      :mod (z4 / at-all)\n      :condition (z5 / sure-02\n            :polarity -\n            :ARG0 z2\n            :ARG1 (z6 / thing\n                  :manner-of (z7 / do-02\n                        :ARG0 z2\n                        :ARG1 z3))))", "# ::snt If not, don't do that and spend that time with something you like to do.\n(z1 / and\n      :op1 (z2 / do-02\n            :polarity -\n            :mode imperative\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / that))\n      :op2 (z5 / spend-02\n            :mode imperative\n            :ARG0 z3\n            :ARG1 (z6 / time\n                  :mod (z7 / that))\n            :ARG2 (z8 / something\n                  :ARG1-of (z9 / do-02\n                        :ARG0 z3\n                        :ARG1-of (z10 / like-01\n                              :ARG0 z3))))\n      :condition (z11 / have-polarity-91\n            :ARG2 -))"], "109": ["It's all in her head.", "It's all about adhesion.", "# ::snt It's all in her head.\n(z1 / it\n      :location (z2 / head\n            :part-of (z3 / she))\n      :mod (z4 / all))", "# ::snt It's all about adhesion.\n(z1 / concern-02\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / adhesion)\n      :mod (z4 / all))"], "110": ["If you are not sure how to do it, don't do it at all.", "If you do not have a very strong scientific reason to do it, don't.", "# ::snt If you are not sure how to do it, don't do it at all.\n(z1 / do-02\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it)\n      :mod (z4 / at-all)\n      :condition (z5 / sure-02\n            :polarity -\n            :ARG0 z2\n            :ARG1 (z6 / thing\n                  :manner-of (z7 / do-02\n                        :ARG0 z2\n                        :ARG1 z3))))", "# ::snt If you do not have a very strong scientific reason to do it, don't.\n(z1 / do-02\n      :polarity -\n      :mode imperative\n      :ARG0 (z2 / you)\n      :condition (z3 / have-03\n            :polarity -\n            :ARG0 z2\n            :ARG1 (z4 / reason\n                  :mod (z5 / science)\n                  :ARG1-of (z6 / strong-02\n                        :degree (z7 / very))\n                  :ARG0-of (z8 / cause-01\n                        :ARG1 (z9 / do-02\n                              :ARG1 (z10 / it))))))"], "111": ["You need to read a lot to know what you like and what you don't.", "You have to know what you want to do.", "# ::snt You need to read a lot to know what you like and what you don't.\n(z1 / need-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / read-01\n            :ARG0 z2\n            :quant (z4 / lot)\n            :purpose (z5 / know-01\n                  :ARG0 z2\n                  :ARG1 (z6 / and\n                        :op1 (z7 / thing\n                              :ARG1-of (z8 / like-01\n                                    :ARG0 z2))\n                        :op2 (z9 / thing\n                              :ARG1-of (z10 / dislike-01\n                                    :ARG0 z2))))))", "# ::snt You have to know what you want to do.\n(z1 / obligate-01\n      :ARG2 (z2 / know-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 z3\n                        :ARG1-of (z6 / want-01\n                              :ARG0 z3)))))"], "112": ["I would say you can do it, but it wouldn't be advised.", "Personally, I would say not unless it suits you.", "# ::snt I would say you can do it, but it wouldn't be advised.\n(z1 / contrast-01\n      :ARG1 (z2 / say-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / possible-01\n                  :ARG1 (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :ARG1 (z7 / it)))))", "# ::snt Personally, I would say not unless it suits you.\n(z1 / say-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :condition (z3 / suit-01\n            :polarity -\n            :ARG1 (z4 / it)\n            :ARG2 (z5 / you))\n      :ARG1-of (z6 / personal-02))"], "113": ["Can you do this?", "Can you do it?", "# ::snt Can you do this?\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / this))\n      :polarity (z5 / amr-unknown))", "# ::snt Can you do it?\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it))\n      :polarity (z5 / amr-unknown))"], "114": ["Sure, I've  done this very trip.", "I've done this many dozens of times.", "# ::snt Sure, I've  done this very trip.\n(z1 / trip-03\n      :ARG0 (z2 / i)\n      :mod (z3 / this)\n      :mod (z4 / very)\n      :ARG1-of (z5 / sure-02))", "# ::snt I've done this many dozens of times.\n(z1 / do-02\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / this)\n      :frequency (z4 / multiple\n            :op1 12))"], "115": ["You can use it, too.", "You can do it, too.", "# ::snt You can use it, too.\n(z1 / possible-01\n      :ARG1 (z2 / use-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :mod (z5 / too)))", "# ::snt You can do it, too.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :mod (z5 / too)))"], "116": ["How do you do that?", "How to do that?", "# ::snt How do you do that?\n(z1 / do-02\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / that)\n      :manner (z4 / amr-unknown))", "# ::snt How to do that?\n(z1 / do-02\n      :ARG1 (z2 / that)\n      :manner (z3 / amr-unknown))"], "117": ["I've located an article that might be of some help", "I found some link that might be of help to you:", "# ::snt I've located an article that might be of some help\n(z1 / locate-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / article\n            :ARG0-of (z4 / help-01\n                  :mod (z5 / some)\n                  :ARG1-of (z6 / possible-01))))", "# ::snt I found some link that might be of help to you:\n(z1 / find-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / link\n            :mod (z4 / some)\n            :ARG0-of (z5 / help-01\n                  :ARG2 (z6 / you)\n                  :ARG1-of (z7 / possible-01))))"], "118": ["I would say you can do it, but it wouldn't be advised.", "I would say it is impossible to know, so don't risk it.", "# ::snt I would say you can do it, but it wouldn't be advised.\n(z1 / contrast-01\n      :ARG1 (z2 / say-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / possible-01\n                  :ARG1 (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :ARG1 (z7 / it)))))", "# ::snt I would say it is impossible to know, so don't risk it.\n(z1 / say-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / possible-01\n            :polarity -\n            :ARG1 (z4 / know-01)\n            :ARG0-of (z5 / cause-01\n                  :ARG1 (z6 / risk-01\n                        :polarity -\n                        :mode imperative\n                        :ARG0 (z7 / you)\n                        :ARG2 z4))))"], "119": ["Unfortunately the answer to your question is we simply do not know.", "The answer to your question is not really.", "# ::snt Unfortunately the answer to your question is we simply do not know.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / know-01\n            :polarity -\n            :ARG0 (z5 / we)\n            :ARG1-of (z6 / simple-02))\n      :ARG2-of (z7 / fortunate-01\n            :polarity -))", "# ::snt The answer to your question is not really.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / real-04\n            :polarity -))"], "120": ["If you are not sure how to do it, don't do it at all.", "You don't, it will not work.", "# ::snt If you are not sure how to do it, don't do it at all.\n(z1 / do-02\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it)\n      :mod (z4 / at-all)\n      :condition (z5 / sure-02\n            :polarity -\n            :ARG0 z2\n            :ARG1 (z6 / thing\n                  :manner-of (z7 / do-02\n                        :ARG0 z2\n                        :ARG1 z3))))", "# ::snt You don't, it will not work.\n(z1 / and\n      :op1 (z2 / do-02\n            :polarity -\n            :ARG0 (z3 / you))\n      :op2 (z4 / work-09\n            :polarity -\n            :ARG1 (z5 / it)))"], "121": ["It's also a matter of taste.", "It's definitely just a matter of preference.", "# ::snt It's also a matter of taste.\n(z1 / matter\n      :topic (z2 / taste)\n      :domain (z3 / it)\n      :mod (z4 / also))", "# ::snt It's definitely just a matter of preference.\n(z1 / matter-01\n      :ARG1 (z2 / prefer-01)\n      :mod (z3 / just)\n      :mod (z4 / definite))"], "122": ["It's not a good idea.", "It's a good idea to do both.", "# ::snt It's not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / it))", "# ::snt It's a good idea to do both.\n(z1 / idea\n      :ARG1-of (z2 / good-02)\n      :domain (z3 / do-02\n            :ARG1 (z4 / both)))"], "123": ["This answer is based on my experience teaching undergraduate math in the US.", "This answer is based on experience I did not researched for references.", "# ::snt This answer is based on my experience teaching undergraduate math in the US.\n(z1 / base-02\n      :ARG1 (z2 / thing\n            :ARG2-of (z3 / answer-01)\n            :mod (z4 / this))\n      :ARG2 (z5 / experience-01\n            :ARG0 (z6 / i)\n            :ARG1 (z7 / teach-01\n                  :ARG0 z6\n                  :ARG1 (z8 / mathematics\n                        :mod (z9 / undergraduate))\n                  :location (z10 / country\n                        :name (z11 / name\n                              :op1 \"US\")))))", "# ::snt This answer is based on experience I did not researched for references.\n(z1 / base-02\n      :ARG1 (z2 / thing\n            :ARG2-of (z3 / answer-01)\n            :mod (z4 / this))\n      :ARG2 (z5 / experience-01\n            :ARG1-of (z6 / research-01\n                  :polarity -\n                  :ARG0 (z7 / i)\n                  :purpose (z8 / reference-04))))"], "124": ["There are a few things I think you should do.", "There are quite a few things you would need to do.", "# ::snt There are a few things I think you should do.\n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / recommend-01\n                  :ARG1-of (z6 / think-01\n                        :ARG0 (z7 / i)))))", "# ::snt There are quite a few things you would need to do.\n(z1 / thing\n      :quant (z2 / many\n            :degree (z3 / quite))\n      :ARG1-of (z4 / do-02\n            :ARG0 (z5 / you)\n            :ARG2-of (z6 / obligate-01)))"], "125": ["You will want to clean the area first.", "You will also want to remove the seeds.", "# ::snt You will want to clean the area first.\n(z1 / want-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / clean-01\n            :ARG0 z2\n            :ARG1 (z4 / area)\n            :ord (z5 / ordinal-entity\n                  :value 1)))", "# ::snt You will also want to remove the seeds.\n(z1 / want-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / remove-01\n            :ARG0 z2\n            :ARG1 (z4 / seed))\n      :mod (z5 / also))"], "126": ["It depends on what you want to have in your tank.", "It depends on what you want to achieve.", "# ::snt It depends on what you want to have in your tank.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / have-03\n                  :ARG0 (z5 / you)\n                  :ARG1-of (z6 / want-01\n                        :ARG0 z5)\n                  :location (z7 / tank\n                        :poss z5))))", "# ::snt It depends on what you want to achieve.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / achieve-01\n                  :ARG0 (z5 / you)\n                  :ARG1-of (z6 / want-01\n                        :ARG0 z5))))"], "127": ["There are a couple of options that you could consider:", "There are a lot of ways that could go poorly for you.", "# ::snt There are a couple of options that you could consider:\n(z1 / option\n      :quant (z2 / couple)\n      :ARG1-of (z3 / consider-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / possible-01)))", "# ::snt There are a lot of ways that could go poorly for you.\n(z1 / way\n      :quant (z2 / lot)\n      :ARG1-of (z3 / go-09\n            :ARG2 (z4 / you)\n            :manner (z5 / poor)\n            :ARG1-of (z6 / possible-01)))"], "128": ["You don't have to worry.", "Since you have one ticket, you don't have to worry.", "# ::snt You don't have to worry.\n(z1 / obligate-01\n      :polarity -\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / worry-02\n            :ARG0 z2))", "# ::snt Since you have one ticket, you don't have to worry.\n(z1 / cause-01\n      :ARG0 (z2 / ticket-02\n            :quant 1\n            :ARG1 (z3 / you))\n      :ARG1 (z4 / obligate-01\n            :polarity -\n            :ARG1 z3\n            :ARG2 (z5 / worry-02\n                  :ARG0 z3)))"], "129": ["Vietnamese citizens need a visa to visit the USA.", "Nepalese citizens require a visa to visit the UK.", "# ::snt Vietnamese citizens need a visa to visit the USA.\n(z1 / need-01\n      :ARG0 (z2 / citizen\n            :mod (z3 / country\n                  :name (z4 / name\n                        :op1 \"Vietnam\")))\n      :ARG1 (z5 / visa\n            :purpose (z6 / visit-01\n                  :ARG0 z2\n                  :ARG1 (z7 / country\n                        :name (z8 / name\n                              :op1 \"USA\")))))", "# ::snt Nepalese citizens require a visa to visit the UK.\n(z1 / require-01\n      :ARG0 (z2 / visit-01\n            :ARG0 (z3 / citizen\n                  :mod (z4 / country\n                        :name (z5 / name\n                              :op1 \"Nepal\")))\n            :ARG1 (z6 / country\n                  :name (z7 / name\n                        :op1 \"UK\")))\n      :ARG1 (z8 / visa))"], "130": ["It depends on how it's used.", "It depends on how long it's been out.", "# ::snt It depends on how it's used.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :manner-of (z4 / use-01\n                  :ARG1 z2)))", "# ::snt It depends on how long it's been out.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / temporal-quantity\n            :quant-of (z4 / out-06\n                  :ARG1 (z5 / it))))"], "131": ["I don't see why there should be any problem with this whatsoever.", "I don't see why this could be a problem.", "# ::snt I don't see why there should be any problem with this whatsoever.\n(z1 / see-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG0-of (z4 / cause-01\n                  :ARG1 (z5 / recommend-01\n                        :ARG1 (z6 / problem\n                              :mod (z7 / any)\n                              :topic (z8 / this)\n                              :mod (z9 / whatsoever))))))", "# ::snt I don't see why this could be a problem.\n(z1 / see-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG0-of (z4 / cause-01\n                  :ARG1 (z5 / possible-01\n                        :ARG1 (z6 / problem\n                              :domain (z7 / this))))))"], "132": ["There's not a lot you can do about that.", "I really do not think there is much you can do about that.", "# ::snt There's not a lot you can do about that.\n(z1 / possible-01\n      :polarity -\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / lot)\n            :ARG2 (z5 / that)))", "# ::snt I really do not think there is much you can do about that.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / possible-01\n            :polarity -\n            :ARG1 (z4 / do-02\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / much)\n                  :ARG2 (z7 / that)))\n      :ARG1-of (z8 / real-04))"], "133": ["You got it right.", "Yes you got it.", "# ::snt You got it right.\n(z1 / right-06\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / it))", "# ::snt Yes you got it.\n(z1 / get-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it))"], "134": ["You just have to base your answer on what you do know, which is what you want.", "Remember this is your degree we are talking about, its up to you what you want to do.", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt Remember this is your degree we are talking about, its up to you what you want to do.\n(z1 / remember-01\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / talk-01\n            :ARG0 (z4 / we)\n            :ARG1 (z5 / degree\n                  :mod (z6 / this)\n                  :poss z2)))"], "135": ["How do you do that?", "How should you do that?", "# ::snt How do you do that?\n(z1 / do-02\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / that)\n      :manner (z4 / amr-unknown))", "# ::snt How should you do that?\n(z1 / recommend-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / that)\n            :manner (z5 / amr-unknown))\n      :ARG2 z3)"], "136": ["I was in a similar situation.", "I am in a similar situation.", "# ::snt I was in a similar situation.\n(z1 / be-located-at-91\n      :ARG1 (z2 / i)\n      :ARG2 (z3 / situation\n            :ARG1-of (z4 / resemble-01)))", "# ::snt I am in a similar situation.\n(z1 / be-located-at-91\n      :ARG1 (z2 / i)\n      :ARG2 (z3 / situation\n            :ARG1-of (z4 / resemble-01)))"], "137": ["What is your lid made of?", "What is your paper for?", "# ::snt What is your lid made of?\n(z1 / make-01\n      :ARG1 (z2 / lid\n            :poss (z3 / you))\n      :ARG2 (z4 / amr-unknown))", "# ::snt What is your paper for?\n(z1 / paper\n      :poss (z2 / you)\n      :purpose (z3 / amr-unknown))"], "138": ["You don't need any visa.", "You don't need sauce at all.", "# ::snt You don't need any visa.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / visa\n            :mod (z4 / any)))", "# ::snt You don't need sauce at all.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / sauce)\n      :mod (z4 / at-all))"], "139": ["That is your problem, not your supervisor's.", "Work with your supervisor and your team to solve the problem.", "# ::snt That is your problem, not your supervisor's.\n(z1 / and\n      :op1 (z2 / problem\n            :poss (z3 / you)\n            :domain (z4 / that))\n      :op2 (z5 / problem\n            :polarity -\n            :poss (z6 / person\n                  :ARG0-of (z7 / supervise-01\n                        :ARG1 z3))\n            :domain z4))", "# ::snt Work with your supervisor and your team to solve the problem.\n(z1 / work-01\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / solve-01\n            :ARG0 z2\n            :ARG1 (z4 / problem))\n      :ARG3 (z5 / and\n            :op1 (z6 / person\n                  :ARG0-of (z7 / supervise-01\n                        :ARG1 z2))\n            :op2 (z8 / team\n                  :poss z2)))"], "140": ["It depends on what you want to do next, and where you want to do it.", "It's up to you what you want to do next.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt It's up to you what you want to do next.\n(z1 / depend-01\n      :ARG0 (z2 / thing\n            :ARG1-of (z3 / want-01\n                  :ARG0 (z4 / you))\n            :time (z5 / next))\n      :ARG1 z4)"], "141": ["There are two things to consider:", "A couple things to consider:", "# ::snt There are two things to consider:\n(z1 / thing\n      :quant 2\n      :ARG1-of (z2 / consider-02))", "# ::snt A couple things to consider:\n(z1 / thing\n      :quant (z2 / couple)\n      :ARG1-of (z3 / consider-02))"], "142": ["It depends entirely on your company and your contract.", "It depends on your company.", "# ::snt It depends entirely on your company and your contract.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / company\n                  :poss (z5 / you))\n            :op2 (z6 / contract\n                  :poss z5))\n      :degree (z7 / entire))", "# ::snt It depends on your company.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / company\n            :poss (z4 / you)))"], "143": ["The wood probably isn't rotten, it's just worn out.", "It's just worn out and not safe.", "# ::snt The wood probably isn't rotten, it's just worn out.\n(z1 / contrast-01\n      :ARG1 (z2 / rot-01\n            :polarity -\n            :ARG1 (z3 / wood)\n            :mod (z4 / probable))\n      :ARG2 (z5 / wear-out-03\n            :ARG1 z3\n            :mod (z6 / just)))", "# ::snt It's just worn out and not safe.\n(z1 / and\n      :op1 (z2 / wear-out-03\n            :ARG1 (z3 / it)\n            :mod (z4 / just))\n      :op2 (z5 / safe-01\n            :polarity -\n            :ARG0 z3))"], "144": ["Well, I wouldn't put it on my cv.", "I wouldn't put this job on my resume.", "# ::snt Well, I wouldn't put it on my cv.\n(z1 / put-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / it)\n      :ARG2 (z4 / computer\n            :mod (z5 / circuit\n                  :ARG1-of (z6 / close-01))\n            :poss z2))", "# ::snt I wouldn't put this job on my resume.\n(z1 / put-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / job\n            :mod (z4 / this))\n      :ARG2 (z5 / resume\n            :poss z2))"], "145": ["This is a great one.", "This is a difficult one.", "# ::snt This is a great one.\n(z1 / one\n      :mod (z2 / great)\n      :domain (z3 / this))", "# ::snt This is a difficult one.\n(z1 / difficult\n      :domain (z2 / this))"], "146": ["The answer to both questions is: Yes.", "To directly answer the two questions in your title.", "# ::snt The answer to both questions is: Yes.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :mod (z3 / both))\n      :ARG2 (z4 / yes))", "# ::snt To directly answer the two questions in your title.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :quant 2\n            :location (z3 / title\n                  :poss (z4 / you)))\n      :ARG1-of (z5 / direct-02))"], "147": ["Yes, there is a reason to not do what you propose.", "Valid reasons to feel the way you do, but not a reason to resign.", "# ::snt Yes, there is a reason to not do what you propose.\n(z1 / reason\n      :ARG0-of (z2 / cause-01\n            :ARG1 (z3 / do-02\n                  :polarity -\n                  :ARG1 (z4 / thing\n                        :ARG1-of (z5 / propose-01\n                              :ARG0 (z6 / you))))))", "# ::snt Valid reasons to feel the way you do, but not a reason to resign.\n(z1 / contrast-01\n      :ARG1 (z2 / reason\n            :ARG1-of (z3 / valid-02)\n            :purpose (z4 / feel-01\n                  :ARG0 (z5 / you)\n                  :manner (z6 / way\n                        :manner-of z4))))"], "148": ["I think it is depends on the program.", "It depends on how the term is used I think.", "# ::snt I think it is depends on the program.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / program)))", "# ::snt It depends on how the term is used I think.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / depend-01\n            :ARG0 (z4 / it)\n            :ARG1 (z5 / thing\n                  :manner-of (z6 / use-01\n                        :ARG1 (z7 / term)))))"], "149": ["Can you do this?", "So, CAN you do this?", "# ::snt Can you do this?\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / this))\n      :polarity (z5 / amr-unknown))", "# ::snt So, CAN you do this?\n(z1 / cause-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / do-02\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / this))\n            :polarity (z6 / amr-unknown)))"], "150": ["I think there isn't a general answer.", "I don't think there is an answer for this.", "# ::snt I think there isn't a general answer.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / answer-01\n            :ARG1-of (z4 / general-02\n                  :polarity -)))", "# ::snt I don't think there is an answer for this.\n(z1 / think-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / answer-01\n            :ARG1 (z4 / this)\n            :ARG2 (z5 / thing)))"], "151": ["There are a few things you can do: ", "There are a couple things you can try.", "# ::snt There are a few things you can do: \n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / possible-01)))", "# ::snt There are a couple things you can try.\n(z1 / possible-01\n      :ARG1 (z2 / try-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :quant (z5 / couple))))"], "152": ["The key is you have to find something that works for you, and your goals.", "You may want it, but the process given to you is what you have to work within.", "# ::snt The key is you have to find something that works for you, and your goals.\n(z1 / key-02\n      :ARG1 (z2 / obligate-01\n            :ARG1 (z3 / you)\n            :ARG2 (z4 / find-01\n                  :ARG0 z3\n                  :ARG1 (z5 / something\n                        :ARG1-of (z6 / work-09\n                              :ARG2 (z7 / and\n                                    :op1 z3\n                                    :op2 (z8 / goal\n                                          :poss z3)))))))", "# ::snt You may want it, but the process given to you is what you have to work within.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / want-01\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / it))))"], "153": ["You don't have to know.", "You don't have equipments/facilities to do research in B.", "# ::snt You don't have to know.\n(z1 / obligate-01\n      :polarity -\n      :ARG2 (z2 / know-01\n            :ARG0 (z3 / you)))", "# ::snt You don't have equipments/facilities to do research in B.\n(z1 / have-03\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / or\n            :op1 (z4 / equipment)\n            :op2 (z5 / facility))\n      :purpose (z6 / research-01\n            :ARG0 z2\n            :ARG1 (z7 / thing\n                  :mod (z8 / string-entity\n                        :value \"B\"))))"], "154": ["I think you've pretty much done your review.", "You've pretty much answered your own question.", "# ::snt I think you've pretty much done your review.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / review-01\n            :ARG0 (z4 / you)\n            :degree (z5 / pretty-much)))", "# ::snt You've pretty much answered your own question.\n(z1 / answer-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / question-01\n                  :ARG0 z2))\n      :degree (z5 / pretty-much))"], "155": ["There are a few things I think you should do.", "There are a few things I don't understand:", "# ::snt There are a few things I think you should do.\n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / recommend-01\n                  :ARG1-of (z6 / think-01\n                        :ARG0 (z7 / i)))))", "# ::snt There are a few things I don't understand:\n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / understand-01\n            :polarity -\n            :ARG0 (z4 / i)))"], "156": ["You burn more Calories digesting protein than you do carbohydrates and fat.", "The more you sweat, the faster you will burn calories and fat.", "# ::snt You burn more Calories digesting protein than you do carbohydrates and fat.\n(z1 / have-quant-91\n      :ARG1 (z2 / calorie\n            :ARG1-of (z3 / digest-01\n                  :ARG0 (z4 / you)\n                  :ARG2 (z5 / protein))))", "# ::snt The more you sweat, the faster you will burn calories and fat.\n(z1 / correlate-91\n      :ARG1 (z2 / more\n            :ARG3-of (z3 / have-quant-91\n                  :ARG1 (z4 / sweat-02\n                        :ARG0 (z5 / you))))\n      :ARG2 (z6 / more\n            :ARG3-of (z7 / have-degree-91\n                  :ARG1 (z8 / burn-01\n                        :ARG0 z5\n                        :ARG1 (z9 / and\n                              :op1 (z10 / calorie)\n                              :op2 (z11 / fat)))\n                  :ARG2 (z12 / fast-02\n                        :ARG1 z8))))"], "157": ["It depends on what you want to do next, and where you want to do it.", "It depends on what you want to say/imply.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt It depends on what you want to say/imply.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / slash\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / say-01\n                        :ARG0 (z6 / you)))\n            :op2 (z7 / thing\n                  :ARG1-of (z8 / imply-01\n                        :ARG0 z6))\n            :ARG1-of (z9 / want-01\n                  :ARG0 z6)))"], "158": ["You got it right.", "You've got it right.", "# ::snt You got it right.\n(z1 / right-06\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / it))", "# ::snt You've got it right.\n(z1 / right-06\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / it))"], "159": ["You answered your own question.", "You pretty much answered your own question.", "# ::snt You answered your own question.\n(z1 / answer-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / question-01\n                  :ARG0 z2)))", "# ::snt You pretty much answered your own question.\n(z1 / answer-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / question-01\n                  :ARG0 z2))\n      :degree (z5 / pretty-much))"], "160": ["I have the same thing.", "I had the same problem as you.", "# ::snt I have the same thing.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / same-01)))", "# ::snt I had the same problem as you.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01\n                  :ARG2 (z5 / you))))"], "161": ["Yes, there is a chemical difference.", "Yes, there is a reason for it.", "# ::snt Yes, there is a chemical difference.\n(z1 / differ-02\n      :mod (z2 / chemical))", "# ::snt Yes, there is a reason for it.\n(z1 / reason\n      :ARG0-of (z2 / cause-01\n            :ARG1 (z3 / it)))"], "162": ["They can be out of level by a bit, but flat is important.", "Yes, although they can be a bit sour.", "# ::snt They can be out of level by a bit, but flat is important.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / out-06\n                  :ARG1 (z4 / they)\n                  :ARG2 (z5 / level)\n                  :degree (z6 / bit))))", "# ::snt Yes, although they can be a bit sour.\n(z1 / have-concession-91\n      :ARG2 (z2 / possible-01\n            :ARG1 (z3 / sour-02\n                  :ARG1 (z4 / they)\n                  :degree (z5 / bit))))"], "163": ["I would look at this: US.", "I would look at this way: ", "# ::snt I would look at this: US.\n(z1 / look-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / country\n            :name (z4 / name\n                  :op1 \"US.\")))", "# ::snt I would look at this way: \n(z1 / look-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / way\n            :mod (z4 / this)))"], "164": ["You are on the right path.", "You're on the right path.", "# ::snt You are on the right path.\n(z1 / be-located-at-91\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / path\n            :ARG1-of (z4 / right-02)))", "# ::snt You're on the right path.\n(z1 / be-located-at-91\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / path\n            :ARG1-of (z4 / right-02)))"], "165": ["If you haven't, you should.", "You should, but you don't have to.", "# ::snt If you haven't, you should.\n(z1 / recommend-01\n      :ARG2 (z2 / you)\n      :condition (z3 / event\n            :polarity -\n            :mod z2))", "# ::snt You should, but you don't have to.\n(z1 / contrast-01\n      :ARG1 (z2 / recommend-01\n            :ARG2 (z3 / you))\n      :ARG2 (z4 / obligate-01\n            :polarity -\n            :ARG1 z3))"], "166": ["Yes it is common!", "The simple answer is yes!", "# ::snt Yes it is common!\n(z1 / common\n      :domain (z2 / it))", "# ::snt The simple answer is yes!\n(z1 / yes\n      :ARG2-of (z2 / answer-01\n            :ARG1-of (z3 / simple-02)))"], "167": ["I don't think that there's any.", "I don't think there are any benefits.", "# ::snt I don't think that there's any.\n(z1 / think-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / any))", "# ::snt I don't think there are any benefits.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / benefit-01\n            :polarity -))"], "168": ["It looks to me that this is set up for what you want:", "It is up to you whether you want to do that.", "# ::snt It looks to me that this is set up for what you want:\n(z1 / look-02\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / set-up-03\n            :ARG1 (z4 / this)\n            :ARG3 (z5 / thing\n                  :ARG1-of (z6 / want-01\n                        :ARG0 (z7 / you)))))", "# ::snt It is up to you whether you want to do that.\n(z1 / depend-01\n      :ARG0 (z2 / truth-value\n            :polarity-of (z3 / want-01\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / do-02\n                        :ARG0 z4\n                        :ARG1 (z6 / that)))))"], "169": ["Problem is, the system doesn't account for people who could care less about money, or title.", "The Joker doesn't care about money.", "# ::snt Problem is, the system doesn't account for people who could care less about money, or title.\n(z1 / problem\n      :domain (z2 / account-01\n            :polarity -\n            :ARG0 (z3 / system)\n            :ARG1 (z4 / person\n                  :ARG0-of (z5 / care-01\n                        :ARG1 (z6 / or\n                              :op1 (z7 / money)\n                              :op2 (z8 / title))\n                        :ARG1-of (z9 / have-quant-91\n                              :ARG3 (z10 / less)\n                              :ARG4 (z11 / possible-01\n                                    :ARG1 (z12 / care-01\n                                          :ARG0 z4\n                                          :ARG1 z6)))))))", "# ::snt The Joker doesn't care about money.\n(z1 / care-01\n      :polarity -\n      :ARG0 (z2 / person\n            :name (z3 / name\n                  :op1 \"The\"\n                  :op2 \"Joker\"))\n      :ARG1 (z4 / money))"], "170": ["In the first case, I think you don't need it.", "So I don't think you need to put it on the cover.", "# ::snt In the first case, I think you don't need it.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / need-01\n            :polarity -\n            :ARG0 (z4 / you)\n            :ARG1 (z5 / it)\n            :condition (z6 / case-04\n                  :ord (z7 / ordinal-entity\n                        :value 1))))", "# ::snt So I don't think you need to put it on the cover.\n(z1 / cause-01\n      :ARG1 (z2 / think-01\n            :polarity -\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / need-01\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / put-01\n                        :ARG0 z5\n                        :ARG1 (z7 / it)\n                        :ARG2 (z8 / cover)))))"], "171": ["It is impossible to answer this question without a form check.", "It is difficult, if not impossible, to give a complete answer to this question.", "# ::snt It is impossible to answer this question without a form check.\n(z1 / possible-01\n      :polarity -\n      :ARG1 (z2 / answer-01\n            :ARG1 (z3 / thing\n                  :ARG1-of (z4 / question-01)\n                  :mod (z5 / this))\n            :manner (z6 / check-01\n                  :polarity -\n                  :ARG1 (z7 / form))))", "# ::snt It is difficult, if not impossible, to give a complete answer to this question.\n(z1 / or\n      :op1 (z2 / difficult\n            :domain (z3 / answer-01\n                  :ARG1 (z4 / thing\n                        :ARG1-of (z5 / question-01)\n                        :mod (z6 / this))\n                  :ARG1-of (z7 / complete-02))))"], "172": ["You need to add this to your resume because it is the only position you have had.", "This gives you the opportunity to make your case that you really do have expertise in XXX.", "# ::snt You need to add this to your resume because it is the only position you have had.\n(z1 / need-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / add-02\n            :ARG0 z2\n            :ARG1 (z4 / this)\n            :ARG2 (z5 / resume\n                  :poss z2))\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / position\n                  :mod (z8 / only)\n                  :ARG1-of (z9 / have-03\n                        :ARG0 z2)\n                  :domain z4)))", "# ::snt This gives you the opportunity to make your case that you really do have expertise in XXX.\n(z1 / give-01\n      :ARG0 (z2 / this)\n      :ARG1 (z3 / opportunity\n            :purpose (z4 / case-03\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / expert-01\n                        :ARG1 z5\n                        :ARG2 (z7 / thing\n                              :mod (z8 / variable\n                                    :name (z9 / name\n                                          :op1 \"XXX\")))\n                        :ARG1-of (z10 / real-04)))))"], "173": ["Work into it slowly.", "You work on it slowly.", "# ::snt Work into it slowly.\n(z1 / work-01\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it)\n      :ARG1-of (z4 / slow-05))", "# ::snt You work on it slowly.\n(z1 / work-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it)\n      :ARG1-of (z4 / slow-05))"], "174": ["No, you do not NEED a bread machine.", "You do not need to worry.", "# ::snt No, you do not NEED a bread machine.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / machine\n            :mod (z4 / bread)))", "# ::snt You do not need to worry.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / worry-02\n            :ARG0 z2))"], "175": ["Yes, it is possible to publish a paper on model analysis.", "Yes, it is hard to publish in a peer reviewed journal.", "# ::snt Yes, it is possible to publish a paper on model analysis.\n(z1 / possible-01\n      :ARG1 (z2 / publish-01\n            :ARG1 (z3 / paper\n                  :topic (z4 / analyze-01\n                        :ARG1 (z5 / model)))))", "# ::snt Yes, it is hard to publish in a peer reviewed journal.\n(z1 / hard-02\n      :ARG1 (z2 / publish-01\n            :medium (z3 / journal\n                  :ARG1-of (z4 / review-01\n                        :ARG0 (z5 / peer)))))"], "176": ["You just have to base your answer on what you do know, which is what you want.", "So if that's what you need, you really do have to be explicit about it.", "# ::snt You just have to base your answer on what you do know, which is what you want.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / base-02\n            :ARG0 z2\n            :ARG1 (z4 / answer-01\n                  :ARG0 z2)\n            :ARG2 (z5 / thing\n                  :ARG1-of (z6 / know-01\n                        :ARG0 z2))\n            :ARG1-of (z7 / want-01\n                  :ARG0 z2))\n      :mod (z8 / just))", "# ::snt So if that's what you need, you really do have to be explicit about it.\n(z1 / have-condition-91\n      :ARG1 (z2 / obligate-01\n            :ARG1 (z3 / you)\n            :ARG2 (z4 / explicit-03\n                  :ARG0 z3\n                  :ARG1 (z5 / it))\n            :ARG1-of (z6 / real-04))\n      :ARG2 (z7 / need-01\n            :ARG0 z3\n            :ARG1 z5))"], "177": ["Yes, you should mention your experience.", "Yes, you should make a r\u00e9sum\u00e9.", "# ::snt Yes, you should mention your experience.\n(z1 / recommend-01\n      :ARG1 (z2 / mention-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / experience-01\n                  :ARG0 z3)))", "# ::snt Yes, you should make a r\u00e9sum\u00e9.\n(z1 / recommend-01\n      :ARG1 (z2 / make-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / r\u00e9sum\u00e9)))"], "178": ["I think it is great that you had a test conducted.", "I think that's a great plan.", "# ::snt I think it is great that you had a test conducted.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / great\n            :domain (z4 / test-01\n                  :ARG1 (z5 / you))))", "# ::snt I think that's a great plan.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / plan\n            :mod (z4 / great)\n            :domain (z5 / that)))"], "179": ["You don't have to know.", "Other than that you don't have a tax issue.", "# ::snt You don't have to know.\n(z1 / obligate-01\n      :polarity -\n      :ARG2 (z2 / know-01\n            :ARG0 (z3 / you)))", "# ::snt Other than that you don't have a tax issue.\n(z1 / issue-02\n      :polarity -\n      :ARG0 (z2 / tax-01)\n      :ARG1 (z3 / you)\n      :ARG2-of (z4 / except-01\n            :ARG1 (z5 / that)))"], "180": ["Yes, there is a rule against this.", "There's no rule against it.", "# ::snt Yes, there is a rule against this.\n(z1 / rule-01\n      :ARG3 (z2 / against\n            :op1 (z3 / this)))", "# ::snt There's no rule against it.\n(z1 / rule-01\n      :polarity -\n      :prep-against (z2 / it))"], "181": ["What are your goals?", "What are you goals?", "# ::snt What are your goals?\n(z1 / goal\n      :mod (z2 / amr-unknown)\n      :poss (z3 / you))", "# ::snt What are you goals?\n(z1 / goal\n      :mod (z2 / amr-unknown)\n      :poss (z3 / you))"], "182": ["I'm going to go out on a limb here.", "I'm going to be very direct here.", "# ::snt I'm going to go out on a limb here.\n(z1 / go-out-17\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / limb)\n      :location (z4 / here))", "# ::snt I'm going to be very direct here.\n(z1 / direct-02\n      :ARG0 (z2 / i)\n      :degree (z3 / very)\n      :location (z4 / here))"], "183": ["If your long stay visa for Switzerland is valid, then you will not need a transit visa.", "You do not need a transit visa, but to enter Zurich you will need a visa.", "# ::snt If your long stay visa for Switzerland is valid, then you will not need a transit visa.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / visa\n            :mod (z4 / transit-01))\n      :condition (z5 / valid-02\n            :ARG1 (z6 / visa\n                  :mod (z7 / stay-01\n                        :ARG1-of (z8 / long-03))\n                  :beneficiary (z9 / country\n                        :name (z10 / name\n                              :op1 \"Switzerland\"))\n                  :poss z2)))", "# ::snt You do not need a transit visa, but to enter Zurich you will need a visa.\n(z1 / contrast-01\n      :ARG1 (z2 / need-01\n            :polarity -\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / visa\n                  :mod (z5 / transit-01)))\n      :ARG2 (z6 / need-01\n            :ARG0 z3\n            :ARG1 (z7 / visa\n                  :purpose (z8 / enter-01\n                        :ARG0 z3\n                        :ARG1 (z9 / city\n                              :name (z10 / name\n                                    :op1 \"Zurich\"))))))"], "184": ["A few more point to think about:", "A few things to think about:", "# ::snt A few more point to think about:\n(z1 / point-04\n      :mod (z2 / more\n            :quant (z3 / few))\n      :ARG1-of (z4 / think-01))", "# ::snt A few things to think about:\n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / think-01))"], "185": ["Now you don't have to be perfect on every answer.", "You don't have to know.", "# ::snt Now you don't have to be perfect on every answer.\n(z1 / obligate-01\n      :polarity -\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / perfect-02\n            :ARG1 z2\n            :ARG2 (z4 / answer\n                  :mod (z5 / every)))\n      :time (z6 / now))", "# ::snt You don't have to know.\n(z1 / obligate-01\n      :polarity -\n      :ARG2 (z2 / know-01\n            :ARG0 (z3 / you)))"], "186": ["I'm afraid we are out of luck in this one.", "I think this is one of those things where you are just out of luck.", "# ::snt I'm afraid we are out of luck in this one.\n(z1 / fear-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / out-05\n            :ARG1 (z4 / we)\n            :ARG2 (z5 / luck\n                  :topic (z6 / one\n                        :mod (z7 / this)))))", "# ::snt I think this is one of those things where you are just out of luck.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / include-91\n            :ARG1 (z4 / this)\n            :ARG2 (z5 / thing\n                  :location-of (z6 / out-05\n                        :ARG1 (z7 / you)\n                        :ARG2 (z8 / luck)\n                        :mod (z9 / just)))))"], "187": ["It is more deciding what you should do and what you should get others to do.", "Point is: know what you want and don't be afraid to ask for it.", "# ::snt It is more deciding what you should do and what you should get others to do.\n(z1 / decide-01\n      :ARG1 (z2 / and\n            :op1 (z3 / recommend-01\n                  :ARG1 (z4 / do-02\n                        :ARG0 (z5 / you)))\n            :op2 (z6 / recommend-01\n                  :ARG1 (z7 / get-04\n                        :ARG0 z5\n                        :ARG1 (z8 / do-02\n                              :ARG0 (z9 / person\n                                    :mod (z10 / other)))))))", "# ::snt Point is: know what you want and don't be afraid to ask for it.\n(z1 / point-04\n      :ARG1 (z2 / and\n            :op1 (z3 / know-01\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / thing\n                        :ARG1-of (z6 / want-01\n                              :ARG0 z4)))\n            :op2 (z7 / fear-01\n                  :polarity -\n                  :ARG0 z4\n                  :ARG1 (z8 / ask-02\n                        :ARG0 z4\n                        :ARG1 z5))))"], "188": ["It varies by the situation.", "This varies by institution.", "# ::snt It varies by the situation.\n(z1 / vary-01\n      :ARG0 (z2 / situation)\n      :ARG1 (z3 / it))", "# ::snt This varies by institution.\n(z1 / vary-01\n      :ARG1 (z2 / this)\n      :ARG3 (z3 / institution))"], "189": ["I have the same thing.", "I have the same problem.", "# ::snt I have the same thing.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / same-01)))", "# ::snt I have the same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01)))"], "190": ["I have the same thing.", "I have the exact same problem.", "# ::snt I have the same thing.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / same-01)))", "# ::snt I have the exact same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01\n                  :ARG2 (z5 / problem)\n                  :degree (z6 / exact))))"], "191": ["You are on the right path.", "You're right on about the sample definition.", "# ::snt You are on the right path.\n(z1 / be-located-at-91\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / path\n            :ARG1-of (z4 / right-02)))", "# ::snt You're right on about the sample definition.\n(z1 / right-06\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / thing\n            :ARG2-of (z4 / define-01)\n            :mod (z5 / sample)))"], "192": ["Primer/paint will not work.", "Nope that will not work.", "# ::snt Primer/paint will not work.\n(z1 / work-09\n      :polarity -\n      :ARG1 (z2 / slash\n            :op1 (z3 / primer)\n            :op2 (z4 / paint)))", "# ::snt Nope that will not work.\n(z1 / work-09\n      :polarity -\n      :ARG1 (z2 / that))"], "193": ["The best thing you can do is to know your stuff.", "The best thing you can do is find something else interesting to do while you wait on hold.", "# ::snt The best thing you can do is to know your stuff.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :domain (z5 / know-01\n                        :ARG0 z3\n                        :ARG1 (z6 / stuff\n                              :poss z3))\n                  :ARG1-of (z7 / have-degree-91\n                        :ARG2 (z8 / good-02\n                              :ARG1 z4)\n                        :ARG3 (z9 / most)))))", "# ::snt The best thing you can do is find something else interesting to do while you wait on hold.\n(z1 / find-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / something\n            :mod (z4 / else)\n            :ARG2-of (z5 / interest-01))\n      :time (z6 / wait-01\n            :ARG1 z2\n            :ARG2 (z7 / hold-01\n                  :ARG1 z2)))"], "194": ["It's also a matter of taste.", "It's mostly a matter of taste.", "# ::snt It's also a matter of taste.\n(z1 / matter\n      :topic (z2 / taste)\n      :domain (z3 / it)\n      :mod (z4 / also))", "# ::snt It's mostly a matter of taste.\n(z1 / matter\n      :topic (z2 / taste)\n      :mod (z3 / most)\n      :domain (z4 / it))"], "195": ["I was in a similar situation.", "Personally when I was in a similar situation I sent the couple a card and a gift.", "# ::snt I was in a similar situation.\n(z1 / be-located-at-91\n      :ARG1 (z2 / i)\n      :ARG2 (z3 / situation\n            :ARG1-of (z4 / resemble-01)))", "# ::snt Personally when I was in a similar situation I sent the couple a card and a gift.\n(z1 / send-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / and\n            :op1 (z4 / card)\n            :op2 (z5 / gift))\n      :ARG2 (z6 / couple)\n      :time (z7 / be-located-at-91\n            :ARG1 z2\n            :ARG2 (z8 / situation\n                  :ARG1-of (z9 / resemble-01)))\n      :ARG1-of (z10 / personal-02))"], "196": ["You can use it, too.", "Yes, you can do it.", "# ::snt You can use it, too.\n(z1 / possible-01\n      :ARG1 (z2 / use-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :mod (z5 / too)))", "# ::snt Yes, you can do it.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)))"], "197": ["You have to decide what you want to get out of this.", "You have to find out what works for you.", "# ::snt You have to decide what you want to get out of this.\n(z1 / obligate-01\n      :ARG2 (z2 / decide-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / get-out-07\n                        :ARG0 z3\n                        :ARG2 (z6 / this))\n                  :ARG1-of (z7 / want-01\n                        :ARG0 z3))))", "# ::snt You have to find out what works for you.\n(z1 / obligate-01\n      :ARG2 (z2 / find-out-03\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / work-09\n                        :ARG2 z3))))"], "198": ["It depends on what they are.", "It depends on how it's used.", "# ::snt It depends on what they are.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :domain (z4 / they)))", "# ::snt It depends on how it's used.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / thing\n            :manner-of (z4 / use-01\n                  :ARG1 z2)))"], "199": ["I had the same problem as you.", "I have just had the same problem.", "# ::snt I had the same problem as you.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01\n                  :ARG2 (z5 / you))))", "# ::snt I have just had the same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01))\n      :mod (z5 / just))"], "200": ["Sometime if you really want it you might need to pay an agency to get the place for you.", "You could probably get a tour agency to do it for you but it would cost you.", "# ::snt Sometime if you really want it you might need to pay an agency to get the place for you.\n(z1 / possible-01\n      :ARG1 (z2 / need-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / pay-01\n                  :ARG0 z3\n                  :ARG2 (z5 / agency)\n                  :ARG3 (z6 / get-01\n                        :ARG0 z5\n                        :ARG1 (z7 / place\n                              :beneficiary z3))))\n      :frequency (z8 / sometime)\n      :condition (z9 / want-01\n            :ARG0 z3\n            :ARG1 (z10 / it)\n            :ARG1-of (z11 / real-04)))", "# ::snt You could probably get a tour agency to do it for you but it would cost you.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / get-01\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / do-02\n                        :ARG0 (z6 / agency\n                              :mod (z7 / tour-01))\n                        :ARG1 (z8 / it)\n                        :ARG2 z4)\n                  :mod (z9 / probable))))"], "201": ["You don't need to know everything.", "They just don't want you to know it.", "# ::snt You don't need to know everything.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / know-01\n            :ARG0 z2\n            :ARG1 (z4 / everything)))", "# ::snt They just don't want you to know it.\n(z1 / want-01\n      :polarity -\n      :ARG0 (z2 / they)\n      :ARG1 (z3 / know-01\n            :ARG0 (z4 / you)\n            :ARG1 (z5 / it))\n      :mod (z6 / just))"], "202": ["Also it is useful to keep the consistency in your story.", "It is important to keep the story in the scope of your limit.", "# ::snt Also it is useful to keep the consistency in your story.\n(z1 / useful-05\n      :ARG1 (z2 / keep-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / consistent-02\n                  :ARG1 (z5 / story\n                        :poss z3)))\n      :mod (z6 / also))", "# ::snt It is important to keep the story in the scope of your limit.\n(z1 / important-01\n      :ARG1 (z2 / keep-04\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / story)\n            :ARG2 (z5 / scope\n                  :poss (z6 / limit-01\n                        :ARG0 z3))))"], "203": ["I think it's just a habit.", "I think it's a bad idea.", "# ::snt I think it's just a habit.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / habit\n            :domain (z4 / it)\n            :mod (z5 / just)))", "# ::snt I think it's a bad idea.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / idea\n            :ARG1-of (z4 / bad-07)\n            :domain (z5 / it)))"], "204": ["It's not a good idea.", "No, it's not a good thing.", "# ::snt It's not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / it))", "# ::snt No, it's not a good thing.\n(z1 / good-02\n      :polarity -\n      :ARG1 (z2 / thing))"], "205": ["I'm thinking it's a bad idea.", "I think it's a bad idea.", "# ::snt I'm thinking it's a bad idea.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / idea\n            :ARG1-of (z4 / bad-07)\n            :domain (z5 / it)))", "# ::snt I think it's a bad idea.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / idea\n            :ARG1-of (z4 / bad-07)\n            :domain (z5 / it)))"], "206": ["It depends on what you want to do next, and where you want to do it.", "You need to pick how and where you want to place your foot and do it.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt You need to pick how and where you want to place your foot and do it.\n(z1 / need-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / and\n            :op1 (z4 / pick-01\n                  :ARG0 z2\n                  :ARG1 (z5 / and\n                        :op1 (z6 / thing\n                              :manner-of (z7 / place-01\n                                    :ARG0 z2\n                                    :ARG1 (z8 / foot\n                                          :part-of z2)\n                                    :ARG1-of (z9 / want-01\n                                          :ARG0 z2)))\n                        :op2 (z10 / thing\n                              :location-of z7))))\n      :op2 (z11 / do-02\n            :ARG0 z2\n            :ARG1 z7))"], "207": ["You have a problem.", "This is a big problem.", "# ::snt You have a problem.\n(z1 / have-03\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / problem))", "# ::snt This is a big problem.\n(z1 / problem\n      :mod (z2 / big)\n      :domain (z3 / this))"], "208": ["Unfortunately the answer to your question is we simply do not know.", "If the conversation is not about work, you know what the answer is to your own question.", "# ::snt Unfortunately the answer to your question is we simply do not know.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / know-01\n            :polarity -\n            :ARG0 (z5 / we)\n            :ARG1-of (z6 / simple-02))\n      :ARG2-of (z7 / fortunate-01\n            :polarity -))", "# ::snt If the conversation is not about work, you know what the answer is to your own question.\n(z1 / know-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / thing\n            :ARG2-of (z4 / answer-01\n                  :ARG1 (z5 / thing\n                        :ARG1-of (z6 / question-01\n                              :ARG0 z2))))\n      :condition (z7 / concern-02\n            :polarity -\n            :ARG0 (z8 / converse-01)\n            :ARG1 (z9 / work-01)))"], "209": ["Unfortunately, this question cannot be answered in its full generality.", "This cannot be answered in general.", "# ::snt Unfortunately, this question cannot be answered in its full generality.\n(z1 / possible-01\n      :polarity -\n      :ARG1 (z2 / answer-01\n            :ARG1 (z3 / question\n                  :mod (z4 / this))\n            :manner (z5 / generality\n                  :mod (z6 / full)\n                  :poss z3))\n      :ARG2-of (z7 / fortunate-01\n            :polarity -))", "# ::snt This cannot be answered in general.\n(z1 / possible-01\n      :polarity -\n      :ARG1 (z2 / answer-01\n            :ARG1 (z3 / this)\n            :ARG1-of (z4 / general-02)))"], "210": ["I would personally beware of the Motley Fool.", "I would recommend looking at The Motley Fool.", "# ::snt I would personally beware of the Motley Fool.\n(z1 / beware-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / company\n            :name (z4 / name\n                  :op1 \"Motley\"\n                  :op2 \"Fool\"))\n      :ARG1-of (z5 / personal-02))", "# ::snt I would recommend looking at The Motley Fool.\n(z1 / recommend-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / look-01\n            :ARG1 (z4 / publication\n                  :name (z5 / name\n                        :op1 \"The\"\n                        :op2 \"Motley\"\n                        :op3 \"Fool\"))))"], "211": ["I think there isn't a general answer.", "I don't think there is a single definition.", "# ::snt I think there isn't a general answer.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / answer-01\n            :ARG1-of (z4 / general-02\n                  :polarity -)))", "# ::snt I don't think there is a single definition.\n(z1 / think-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / define-01\n            :ARG1-of (z4 / single-02)))"], "212": ["It's not a good idea.", "Not a good idea.", "# ::snt It's not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / it))", "# ::snt Not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -))"], "213": ["You don't need any visa.", "You don't have to worry.", "# ::snt You don't need any visa.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / visa\n            :mod (z4 / any)))", "# ::snt You don't have to worry.\n(z1 / obligate-01\n      :polarity -\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / worry-02\n            :ARG0 z2))"], "214": ["You have to decide what you want to get out of this.", "You're probably going to have to read various blogs to get all the information you want.", "# ::snt You have to decide what you want to get out of this.\n(z1 / obligate-01\n      :ARG2 (z2 / decide-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / get-out-07\n                        :ARG0 z3\n                        :ARG2 (z6 / this))\n                  :ARG1-of (z7 / want-01\n                        :ARG0 z3))))", "# ::snt You're probably going to have to read various blogs to get all the information you want.\n(z1 / probable\n      :domain (z2 / obligate-01\n            :ARG1 (z3 / you)\n            :ARG2 (z4 / read-01\n                  :ARG0 z3\n                  :ARG1 (z5 / blog\n                        :mod (z6 / various))\n                  :purpose (z7 / get-01\n                        :ARG0 z3\n                        :ARG1 (z8 / information\n                              :mod (z9 / all)\n                              :ARG1-of (z10 / want-01\n                                    :ARG0 z3))))))"], "215": ["I had the same problem as you.", "I have exactly the same problem.", "# ::snt I had the same problem as you.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01\n                  :ARG2 (z5 / you))))", "# ::snt I have exactly the same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01\n                  :ARG2 (z5 / problem)\n                  :mod (z6 / exact))))"], "216": ["My answer to your question is \"Probably Not\".", "The answer to your question is not really.", "# ::snt My answer to your question is \"Probably Not\".\n(z1 / answer-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / question-01\n            :ARG0 (z4 / you))\n      :ARG2 (z5 / probable\n            :op1 (z6 / have-polarity-91\n                  :ARG2 -)))", "# ::snt The answer to your question is not really.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / real-04\n            :polarity -))"], "217": ["You should do it.", "You should never do it.", "# ::snt You should do it.\n(z1 / recommend-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)))", "# ::snt You should never do it.\n(z1 / recommend-01\n      :ARG1 (z2 / do-02\n            :polarity -\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :time (z5 / ever)))"], "218": ["I had the same problem as you.", "I had the same issue.", "# ::snt I had the same problem as you.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01\n                  :ARG2 (z5 / you))))", "# ::snt I had the same issue.\n(z1 / issue-02\n      :ARG1 (z2 / i)\n      :ARG1-of (z3 / same-01))"], "219": ["Hope this is what you are looking for.", "Is this the kind of thing you're looking for ?", "# ::snt Hope this is what you are looking for.\n(z1 / hope-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / look-01\n            :ARG0 (z4 / you)\n            :ARG1 (z5 / this)))", "# ::snt Is this the kind of thing you're looking for ?\n(z1 / look-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / thing\n            :mod (z4 / kind\n                  :mod (z5 / this)))\n      :polarity (z6 / amr-unknown))"], "220": ["There are two things to consider:", "I think there are two important things to consider:", "# ::snt There are two things to consider:\n(z1 / thing\n      :quant 2\n      :ARG1-of (z2 / consider-02))", "# ::snt I think there are two important things to consider:\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :quant 2\n            :ARG1-of (z4 / important-01)\n            :ARG1-of (z5 / consider-02)))"], "221": ["It's pretty much up to you.", "It is up to you.", "# ::snt It's pretty much up to you.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / you)\n      :degree (z4 / pretty-much))", "# ::snt It is up to you.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / you))"], "222": ["There are a few things you can do: ", "There are a few things you need to consider:", "# ::snt There are a few things you can do: \n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / possible-01)))", "# ::snt There are a few things you need to consider:\n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / consider-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / need-01\n                  :ARG0 z4)))"], "223": ["The answer to this and all such similar questions is in two stages:", "The answer to both questions is: Yes.", "# ::snt The answer to this and all such similar questions is in two stages:\n(z1 / stage\n      :quant 2\n      :domain (z2 / answer-01\n            :ARG1 (z3 / and\n                  :op1 (z4 / this)\n                  :op2 (z5 / thing\n                        :ARG1-of (z6 / question-01)\n                        :mod (z7 / all)\n                        :ARG1-of (z8 / resemble-01)\n                        :mod (z9 / such)))))", "# ::snt The answer to both questions is: Yes.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :mod (z3 / both))\n      :ARG2 (z4 / yes))"], "224": ["It is impossible to answer this question without a form check.", "This is a part answer to your question", "# ::snt It is impossible to answer this question without a form check.\n(z1 / possible-01\n      :polarity -\n      :ARG1 (z2 / answer-01\n            :ARG1 (z3 / thing\n                  :ARG1-of (z4 / question-01)\n                  :mod (z5 / this))\n            :manner (z6 / check-01\n                  :polarity -\n                  :ARG1 (z7 / form))))", "# ::snt This is a part answer to your question\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / this)\n      :mod (z5 / part))"], "225": ["There are a few things you can do: ", "There are a few things I think you should do.", "# ::snt There are a few things you can do: \n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / possible-01)))", "# ::snt There are a few things I think you should do.\n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / recommend-01\n                  :ARG1-of (z6 / think-01\n                        :ARG0 (z7 / i)))))"], "226": ["It depends on what you want to do next, and where you want to do it.", "It depends on what and where you are going to do.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt It depends on what and where you are going to do.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)))\n            :op2 (z7 / location\n                  :location-of z5)))"], "227": ["There are a few possible reasons.", "There are a few reasons that paint wrinkles.", "# ::snt There are a few possible reasons.\n(z1 / possible-01\n      :ARG1 (z2 / reason\n            :quant (z3 / few)))", "# ::snt There are a few reasons that paint wrinkles.\n(z1 / reason\n      :quant (z2 / few)\n      :ARG0-of (z3 / cause-01\n            :ARG1 (z4 / paint-03\n                  :ARG1 (z5 / wrinkle))))"], "228": ["There are three options:", "There are only three options:", "# ::snt There are three options:\n(z1 / option\n      :quant 3)", "# ::snt There are only three options:\n(z1 / option\n      :quant 3\n      :mod (z2 / only))"], "229": ["So think it in this way.", "Think of it this way.", "# ::snt So think it in this way.\n(z1 / cause-01\n      :ARG1 (z2 / think-01\n            :mode imperative\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / it)\n            :manner (z5 / way\n                  :mod (z6 / this))))", "# ::snt Think of it this way.\n(z1 / think-01\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / it)\n      :ARG2 (z4 / way\n            :mod (z5 / this)))"], "230": ["Maybe this could work for you.", "Maybe this can work for you.", "# ::snt Maybe this could work for you.\n(z1 / possible-01\n      :ARG1 (z2 / work-09\n            :ARG1 (z3 / this)\n            :ARG2 (z4 / you)))", "# ::snt Maybe this can work for you.\n(z1 / possible-01\n      :ARG1 (z2 / work-09\n            :ARG1 (z3 / this)\n            :ARG2 (z4 / you)))"], "231": ["It depends on what you want to do next, and where you want to do it.", "They can, but the way to do it depends on what you have available.", "# ::snt It depends on what you want to do next, and where you want to do it.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / and\n            :op1 (z4 / thing\n                  :ARG1-of (z5 / do-02\n                        :ARG0 (z6 / you)\n                        :time (z7 / next)\n                        :ARG1-of (z8 / want-01\n                              :ARG0 z6)))\n            :op2 (z9 / thing\n                  :location-of (z10 / do-02\n                        :ARG0 z6\n                        :ARG1 z4))))", "# ::snt They can, but the way to do it depends on what you have available.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / do-02\n                  :ARG0 (z4 / they)))\n      :ARG2 (z5 / depend-01\n            :ARG0 (z6 / way\n                  :manner-of (z7 / do-02\n                        :ARG1 (z8 / it)))\n            :ARG1 (z9 / have-03\n                  :ARG0 (z10 / you)\n                  :ARG1 (z11 / thing\n                        :ARG2-of (z12 / available-02)))))"], "232": ["Microwave would be your best bet.", "Your best bet is research.", "# ::snt Microwave would be your best bet.\n(z1 / bet-01\n      :ARG0 (z2 / you)\n      :ARG2 (z3 / microwave)\n      :ARG1-of (z4 / have-degree-91\n            :ARG2 (z5 / good-02\n                  :ARG1 z1)\n            :ARG3 (z6 / most)))", "# ::snt Your best bet is research.\n(z1 / bet-01\n      :ARG0 (z2 / you)\n      :ARG2 (z3 / research-01\n            :ARG0 z2)\n      :ARG1-of (z4 / have-degree-91\n            :ARG2 (z5 / good-02\n                  :ARG1 z1)\n            :ARG3 (z6 / most)))"], "233": ["In the US, it will depend on the school.", "This will depend on the university.", "# ::snt In the US, it will depend on the school.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / school)\n      :location (z4 / country\n            :name (z5 / name\n                  :op1 \"US\")))", "# ::snt This will depend on the university.\n(z1 / depend-01\n      :ARG0 (z2 / this)\n      :ARG1 (z3 / university))"], "234": ["It's not a good idea.", "It's not just a good idea, it's an excellent idea.", "# ::snt It's not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / it))", "# ::snt It's not just a good idea, it's an excellent idea.\n(z1 / and\n      :op1 (z2 / idea\n            :ARG1-of (z3 / good-02)\n            :mod (z4 / just\n                  :polarity -)\n            :domain (z5 / it))\n      :op2 (z6 / idea\n            :ARG1-of (z7 / excellent-02)\n            :domain z5))"], "235": ["There are a few things I think you should do.", "There are a few minimally-effective things you can do at the personal level.", "# ::snt There are a few things I think you should do.\n(z1 / thing\n      :quant (z2 / few)\n      :ARG1-of (z3 / do-02\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / recommend-01\n                  :ARG1-of (z6 / think-01\n                        :ARG0 (z7 / i)))))", "# ::snt There are a few minimally-effective things you can do at the personal level.\n(z1 / possible-01\n      :ARG1 (z2 / do-02\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :quant (z5 / few)\n                  :ARG1-of (z6 / effective-04\n                        :ARG1-of (z7 / minimal-02)))\n            :manner (z8 / level\n                  :ARG1-of (z9 / personal-02))))"], "236": ["I've had this same problem.", "I had this same situation.", "# ::snt I've had this same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01)\n            :mod (z5 / this)))", "# ::snt I had this same situation.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / situation\n            :ARG1-of (z4 / same-01)\n            :mod (z5 / this)))"], "237": ["This is not a good idea.", "Not a good idea.", "# ::snt This is not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -)\n      :domain (z3 / this))", "# ::snt Not a good idea.\n(z1 / idea\n      :ARG1-of (z2 / good-02\n            :polarity -))"], "238": ["I realized there is already an accepted answer but I figure I would add my 2 cents.", "I know this is an old question but I feel I should add my 2 cents.", "# ::snt I realized there is already an accepted answer but I figure I would add my 2 cents.\n(z1 / contrast-01\n      :ARG1 (z2 / realize-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / accept-01\n                  :ARG1 (z5 / thing\n                        :ARG2-of (z6 / answer-01))\n                  :time (z7 / already))))", "# ::snt I know this is an old question but I feel I should add my 2 cents.\n(z1 / have-concession-91\n      :ARG1 (z2 / feel-02\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / recommend-01\n                  :ARG1 (z5 / add-02\n                        :ARG0 z3\n                        :ARG1 (z6 / monetary-quantity\n                              :quant 2\n                              :unit (z7 / cent)\n                              :poss z3)))))"], "239": ["Yes, there is a reason to not do what you propose.", "Yes, there is a chemical difference.", "# ::snt Yes, there is a reason to not do what you propose.\n(z1 / reason\n      :ARG0-of (z2 / cause-01\n            :ARG1 (z3 / do-02\n                  :polarity -\n                  :ARG1 (z4 / thing\n                        :ARG1-of (z5 / propose-01\n                              :ARG0 (z6 / you))))))", "# ::snt Yes, there is a chemical difference.\n(z1 / differ-02\n      :mod (z2 / chemical))"], "240": ["Yes, there is at least one to my knowledge.", "To my knowledge, there's no time requirement.", "# ::snt Yes, there is at least one to my knowledge.\n(z1 / at-least\n      :op1 1\n      :ARG1-of (z2 / know-01\n            :ARG0 (z3 / i)))", "# ::snt To my knowledge, there's no time requirement.\n(z1 / know-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / require-01\n            :polarity -\n            :ARG1 (z4 / time)))"], "241": ["You don't have to worry.", "You don't have to do anything to season it.", "# ::snt You don't have to worry.\n(z1 / obligate-01\n      :polarity -\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / worry-02\n            :ARG0 z2))", "# ::snt You don't have to do anything to season it.\n(z1 / obligate-01\n      :polarity -\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / do-02\n            :ARG0 z2\n            :ARG1 (z4 / anything)\n            :purpose (z5 / season-01\n                  :ARG0 z2\n                  :ARG1 (z6 / it))))"], "242": ["There is no test that can tell you if it is sealed or not.", "There is no code telling you that you cannot do this.", "# ::snt There is no test that can tell you if it is sealed or not.\n(z1 / test-01\n      :polarity -\n      :ARG0-of (z2 / tell-01\n            :ARG1 (z3 / or\n                  :op1 (z4 / seal-01\n                        :ARG1 (z5 / it))\n                  :op2 (z6 / seal-01\n                        :polarity -\n                        :ARG1 z5))\n            :ARG2 (z7 / you)\n            :ARG1-of (z8 / possible-01)))", "# ::snt There is no code telling you that you cannot do this.\n(z1 / code\n      :polarity -\n      :ARG0-of (z2 / tell-01\n            :ARG1 (z3 / possible-01\n                  :polarity -\n                  :ARG1 (z4 / do-02\n                        :ARG0 (z5 / you)\n                        :ARG1 (z6 / this)))\n            :ARG2 z5))"], "243": ["Yes, you should make a r\u00e9sum\u00e9.", "Yes, you should talk to your professor.", "# ::snt Yes, you should make a r\u00e9sum\u00e9.\n(z1 / recommend-01\n      :ARG1 (z2 / make-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / r\u00e9sum\u00e9)))", "# ::snt Yes, you should talk to your professor.\n(z1 / recommend-01\n      :ARG1 (z2 / talk-01\n            :ARG0 (z3 / you)\n            :ARG2 (z4 / professor\n                  :poss z3)))"], "244": ["You shouldn't feel any obligation at all.", "You don't need sauce at all.", "# ::snt You shouldn't feel any obligation at all.\n(z1 / recommend-01\n      :ARG1 (z2 / feel-01\n            :polarity -\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG2-of (z5 / oblige-02\n                        :ARG1 z3))\n            :mod (z6 / at-all)))", "# ::snt You don't need sauce at all.\n(z1 / need-01\n      :polarity -\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / sauce)\n      :mod (z4 / at-all))"], "245": ["I've had this same problem.", "I had this problem before.", "# ::snt I've had this same problem.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :ARG1-of (z4 / same-01)\n            :mod (z5 / this)))", "# ::snt I had this problem before.\n(z1 / have-03\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / problem\n            :mod (z4 / this))\n      :time (z5 / before))"], "246": ["You may have to experiment and find what you like.", "You have to find out what works for you.", "# ::snt You may have to experiment and find what you like.\n(z1 / possible-01\n      :ARG1 (z2 / obligate-01\n            :ARG1 (z3 / you)\n            :ARG2 (z4 / and\n                  :op1 (z5 / experiment-01\n                        :ARG0 z3)\n                  :op2 (z6 / find-01\n                        :ARG0 z3\n                        :ARG1 (z7 / thing\n                              :ARG1-of (z8 / like-02\n                                    :ARG0 z3))))))", "# ::snt You have to find out what works for you.\n(z1 / obligate-01\n      :ARG2 (z2 / find-out-03\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / work-09\n                        :ARG2 z3))))"], "247": ["My answer to your question is \"Probably Not\".", "This is a part answer to your question", "# ::snt My answer to your question is \"Probably Not\".\n(z1 / answer-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / question-01\n            :ARG0 (z4 / you))\n      :ARG2 (z5 / probable\n            :op1 (z6 / have-polarity-91\n                  :ARG2 -)))", "# ::snt This is a part answer to your question\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :ARG0 (z3 / you))\n      :ARG2 (z4 / this)\n      :mod (z5 / part))"], "248": ["The key thing to realize here is that it's not your job to make people do their work.", "It really isn't your problem how they are going to find a qualified person to do the job.", "# ::snt The key thing to realize here is that it's not your job to make people do their work.\n(z1 / thing\n      :ARG1-of (z2 / key-02)\n      :ARG1-of (z3 / realize-01\n            :location (z4 / here))\n      :domain (z5 / job\n            :polarity -\n            :poss (z6 / you)\n            :domain (z7 / make-02\n                  :ARG0 z6\n                  :ARG1 (z8 / work-01\n                        :ARG0 (z9 / person)))))", "# ::snt It really isn't your problem how they are going to find a qualified person to do the job.\n(z1 / problem\n      :polarity -\n      :poss (z2 / you)\n      :domain (z3 / find-01\n            :ARG0 (z4 / they)\n            :ARG1 (z5 / person\n                  :ARG1-of (z6 / qualify-02\n                        :ARG2 (z7 / do-02\n                              :ARG0 z5\n                              :ARG1 (z8 / job))))\n            :manner (z9 / amr-unknown))\n      :ARG1-of (z10 / real-04))"], "249": ["Not a direct answer to the question, but something to consider.", "Not a real answer to your question, but maybe it helps.", "# ::snt Not a direct answer to the question, but something to consider.\n(z1 / contrast-01\n      :ARG1 (z2 / answer-01\n            :polarity -\n            :ARG1 (z3 / thing\n                  :ARG1-of (z4 / question-01))\n            :ARG1-of (z5 / direct-02))\n      :ARG2 (z6 / something\n            :ARG1-of (z7 / consider-02)))", "# ::snt Not a real answer to your question, but maybe it helps.\n(z1 / have-concession-91\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / help-01\n                  :ARG0 (z4 / it))))"], "250": ["There are two possible causes for this:", "There are two options for you - ", "# ::snt There are two possible causes for this:\n(z1 / possible-01\n      :ARG1 (z2 / cause-01\n            :quant 2\n            :ARG1 (z3 / this)))", "# ::snt There are two options for you - \n(z1 / option\n      :quant 2\n      :beneficiary (z2 / you))"], "251": ["I agree with the other comments.", "I agree with the previous comments.", "# ::snt I agree with the other comments.\n(z1 / agree-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :mod (z4 / other)\n            :ARG1-of (z5 / comment-01)))", "# ::snt I agree with the previous comments.\n(z1 / agree-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / comment-01\n                  :time (z5 / previous))))"], "252": ["The answer to both questions is: Yes.", "If the answer to any of these questions is yes, a PhD may be worthwhile for you.", "# ::snt The answer to both questions is: Yes.\n(z1 / answer-01\n      :ARG1 (z2 / question-01\n            :mod (z3 / both))\n      :ARG2 (z4 / yes))", "# ::snt If the answer to any of these questions is yes, a PhD may be worthwhile for you.\n(z1 / possible-01\n      :ARG1 (z2 / worthwhile\n            :domain (z3 / doctor\n                  :mod (z4 / philosophy))\n            :beneficiary (z5 / you)))"], "253": ["It rather depends on which country you're in.", "That depends on which country you are in.", "# ::snt It rather depends on which country you're in.\n(z1 / depend-01\n      :ARG0 (z2 / it)\n      :ARG1 (z3 / country\n            :location-of (z4 / you))\n      :degree (z5 / rather))", "# ::snt That depends on which country you are in.\n(z1 / depend-01\n      :ARG0 (z2 / that)\n      :ARG1 (z3 / country\n            :location-of (z4 / you)))"], "254": ["This is a terrible idea.", "This is a bad idea.", "# ::snt This is a terrible idea.\n(z1 / idea\n      :ARG1-of (z2 / terrible-01)\n      :domain (z3 / this))", "# ::snt This is a bad idea.\n(z1 / idea\n      :ARG1-of (z2 / bad-07)\n      :domain (z3 / this))"]}