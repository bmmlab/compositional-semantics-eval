{"1": ["Cord is strong, thick string.", "A smile is the expression that you have on your face when you are pleased or amused, or when you are being friendly.", "# ::snt Cord is strong, thick string.\n(z1 / string\n      :ARG1-of (z2 / strong-02)\n      :ARG1-of (z3 / thick-03)\n      :domain (z4 / cord))", "# ::snt A smile is the expression that you have on your face when you are pleased or amused, or when you are being friendly.\n(z1 / smile-01\n      :domain (z2 / expression\n            :ARG1-of (z3 / have-03\n                  :ARG0 (z4 / you)\n                  :location (z5 / face\n                        :part-of z4)\n                  :time (z6 / or\n                        :op1 (z7 / please-01\n                              :ARG1 z4)\n                        :op2 (z8 / amuse-01\n                              :ARG1 z4)\n                        :op3 (z9 / friendly-01\n                              :ARG1 z4)))))"], "2": ["A rooster is an adult male chicken.", "A voyage is a long journey on a ship or in a spacecraft.", "# ::snt A rooster is an adult male chicken.\n(z1 / chicken\n      :mod (z2 / male)\n      :mod (z3 / adult)\n      :domain (z4 / rooster))", "# ::snt A voyage is a long journey on a ship or in a spacecraft.\n(z1 / journey-01\n      :ARG1-of (z2 / long-03)\n      :domain (z3 / voyage)\n      :location (z4 / or\n            :op1 (z5 / ship)\n            :op2 (z6 / spacecraft)))"], "3": ["Noon is twelve o'clock in the middle of the day.", "String is thin rope made of twisted threads, used for tying things together or tying up parcels.", "# ::snt Noon is twelve o'clock in the middle of the day.\n(z1 / equal-01\n      :ARG1 (z2 / date-entity\n            :time \"Noon\")\n      :ARG2 (z3 / date-entity\n            :time \"12:00\"\n            :mod (z4 / middle\n                  :part-of (z5 / day))))", "# ::snt String is thin rope made of twisted threads, used for tying things together or tying up parcels.\n(z1 / rope\n      :domain (z2 / string)\n      :ARG1-of (z3 / thin-03)\n      :ARG1-of (z4 / make-01\n            :ARG2 (z5 / thread\n                  :ARG1-of (z6 / twist-01)))\n      :ARG1-of (z7 / use-01\n            :ARG2 (z8 / or\n                  :op1 (z9 / tie-01\n                        :ARG1 (z10 / thing)\n                        :ARG3 (z11 / together))\n                  :op2 (z12 / tie-up-04\n                        :ARG1 (z13 / parcel)))))"], "4": ["Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.", "A furnace is a container or enclosed space in which a very hot fire is made, for example to melt metal, burn rubbish or produce steam.", "# ::snt Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.\n(z1 / something\n      :domain (z2 / or\n            :op1 (z3 / fruit\n                  :op2-of z2))\n      :ARG1-of (z4 / grow-03\n            :location (z5 / or\n                  :op1 (z6 / tree)\n                  :op2 (z7 / bush)))\n      :ARG0-of (z8 / contain-01\n            :ARG1 (z9 / or\n                  :op1 (z10 / seed)\n                  :op2 (z11 / stone\n                        :ARG1-of (z12 / cover-02\n                              :ARG2 (z13 / substance\n                                    :ARG1-of (z14 / eat-01\n                                          :ARG0 (z15 / you)\n                                          :ARG1-of (z16 / possible-01))))))))", "# ::snt A furnace is a container or enclosed space in which a very hot fire is made, for example to melt metal, burn rubbish or produce steam.\n(z1 / or\n      :op1 (z2 / container)\n      :op2 (z3 / space\n            :ARG1-of (z4 / enclose-01))\n      :domain (z5 / furnace)\n      :location-of (z6 / make-01\n            :ARG1 (z7 / fire\n                  :ARG1-of (z8 / hot-05\n                        :degree (z9 / very)))\n            :example (z10 / or\n                  :op1 (z11 / melt-01\n                        :ARG1 (z12 / metal))\n                  :op2 (z13 / burn-01\n                        :ARG1 (z14 / rubbish))\n                  :op3 (z15 / produce-01\n                        :ARG1 (z16 / steam)))))"], "5": ["An autograph is the signature of someone famous which is specially written for a fan to keep.", "The shores or shore of a sea, lake or wide river is the land along the edge of it.", "# ::snt An autograph is the signature of someone famous which is specially written for a fan to keep.\n(z1 / autograph\n      :domain (z2 / sign-01\n            :ARG0 (z3 / someone\n                  :ARG1-of (z4 / fame-01))\n            :ARG1-of (z5 / write-01\n                  :ARG1-of (z6 / special-02)\n                  :purpose (z7 / keep-01\n                        :ARG0 (z8 / fan)\n                        :ARG1 z2))))", "# ::snt The shores or shore of a sea, lake or wide river is the land along the edge of it.\n(z1 / land\n      :location (z2 / along\n            :op1 (z3 / edge\n                  :part-of (z4 / or\n                        :op1 (z5 / sea)\n                        :op2 (z6 / lake)\n                        :op3 (z7 / river\n                              :ARG1-of (z8 / wide-02)))))\n      :domain (z9 / or\n            :op1 (z10 / shore\n                  :part-of z4)\n            :op2 (z11 / shore\n                  :part-of z5)))"], "6": ["An automobile is a car.", "In legends and fairy stories, a wizard is a man who has magic powers.", "# ::snt An automobile is a car.\n(z1 / car\n      :domain (z2 / automobile))", "# ::snt In legends and fairy stories, a wizard is a man who has magic powers.\n(z1 / man\n      :domain (z2 / wizard)\n      :ARG0-of (z3 / have-03\n            :ARG1 (z4 / power\n                  :mod (z5 / magic)))\n      :location (z6 / and\n            :op1 (z7 / legend)\n            :op2 (z8 / story\n                  :mod (z9 / fairy))))"], "7": ["A mound of something is a large rounded pile of it.", "A stove is a piece of equipment which provides heat, either for cooking or for heating a room.", "# ::snt A mound of something is a large rounded pile of it.\n(z1 / pile\n      :ARG1-of (z2 / round-04)\n      :mod (z3 / large)\n      :domain (z4 / mound\n            :consist-of (z5 / something)))", "# ::snt A stove is a piece of equipment which provides heat, either for cooking or for heating a room.\n(z1 / piece\n      :domain (z2 / stove)\n      :consist-of (z3 / equipment\n            :ARG0-of (z4 / provide-01\n                  :ARG1 (z5 / heat)\n                  :purpose (z6 / or\n                        :op1 (z7 / cook-01)\n                        :op2 (z8 / heat-01\n                              :ARG1 (z9 / room))))))"], "8": ["A grin is a broad smile.", "An implement is a tool or other piece of equipment.", "# ::snt A grin is a broad smile.\n(z1 / grin-01\n      :ARG1-of (z2 / mean-01\n            :ARG2 (z3 / smile-01\n                  :ARG1-of (z4 / broad-02))))", "# ::snt An implement is a tool or other piece of equipment.\n(z1 / or\n      :op1 (z2 / tool)\n      :op2 (z3 / piece\n            :mod (z4 / equipment)\n            :mod (z5 / other))\n      :domain (z6 / implement))"], "9": ["An Asylum is a psychiatric hospital.", "Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.", "# ::snt An Asylum is a psychiatric hospital.\n(z1 / hospital\n      :mod (z2 / psychiatry)\n      :domain (z3 / asylum))", "# ::snt Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.\n(z1 / something\n      :domain (z2 / or\n            :op1 (z3 / fruit\n                  :op2-of z2))\n      :ARG1-of (z4 / grow-03\n            :location (z5 / or\n                  :op1 (z6 / tree)\n                  :op2 (z7 / bush)))\n      :ARG0-of (z8 / contain-01\n            :ARG1 (z9 / or\n                  :op1 (z10 / seed)\n                  :op2 (z11 / stone\n                        :ARG1-of (z12 / cover-02\n                              :ARG2 (z13 / substance\n                                    :ARG1-of (z14 / eat-01\n                                          :ARG0 (z15 / you)\n                                          :ARG1-of (z16 / possible-01))))))))"], "10": ["An Asylum is a psychiatric hospital.", "A monk is a member of a male religious community that is usually separated from the outside world.", "# ::snt An Asylum is a psychiatric hospital.\n(z1 / hospital\n      :mod (z2 / psychiatry)\n      :domain (z3 / asylum))", "# ::snt A monk is a member of a male religious community that is usually separated from the outside world.\n(z1 / monk\n      :ARG0-of (z2 / have-org-role-91\n            :ARG1 (z3 / community\n                  :mod (z4 / male)\n                  :mod (z5 / religion)\n                  :ARG1-of (z6 / separate-01\n                        :ARG2 (z7 / world\n                              :mod (z8 / outside))\n                        :mod (z9 / usual)))\n            :ARG2 (z10 / member)))"], "11": ["A graveyard is an area of land, sometimes near a church, where dead people are buried.", "If you describe a place or situation as a madhouse you mean that it is full of confusion and noise.", "# ::snt A graveyard is an area of land, sometimes near a church, where dead people are buried.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / graveyard)\n      :ARG1-of (z4 / near-02\n            :ARG2 (z5 / church)\n            :frequency (z6 / sometimes))\n      :location-of (z7 / bury-01\n            :ARG1 (z8 / person\n                  :ARG1-of (z9 / die-01))))", "# ::snt If you describe a place or situation as a madhouse you mean that it is full of confusion and noise.\n(z1 / mean-01\n      :ARG0 (z2 / you)\n      :ARG2 (z3 / full-09\n            :ARG1 (z4 / or\n                  :op1 (z5 / place)\n                  :op2 (z6 / situation))\n            :ARG2 (z7 / and\n                  :op1 (z8 / confuse-01)\n                  :op2 (z9 / noise)))\n      :condition (z10 / describe-01\n            :ARG0 z2\n            :ARG1 z4\n            :ARG2 (z11 / madhouse)))"], "12": ["Glass is a hard transparent substance that is used to make things such as windows and bottles.", "A magician is a person who entertains people by doing magic tricks.", "# ::snt Glass is a hard transparent substance that is used to make things such as windows and bottles.\n(z1 / substance\n      :domain (z2 / glass)\n      :mod (z3 / transparent\n            :ARG1-of (z4 / hard-04))\n      :ARG1-of (z5 / use-01\n            :ARG2 (z6 / make-01\n                  :ARG1 (z7 / thing\n                        :example (z8 / and\n                              :op1 (z9 / window)\n                              :op2 (z10 / bottle)))\n                  :ARG2 z2)))", "# ::snt A magician is a person who entertains people by doing magic tricks.\n(z1 / magician\n      :domain (z2 / person\n            :ARG0-of (z3 / entertain-01\n                  :ARG1 (z4 / person)\n                  :manner (z5 / trick-01\n                        :mod (z6 / magic)))))"], "13": ["A boy is a child who will grow up to be a man.", "A rooster is an adult male chicken.", "# ::snt A boy is a child who will grow up to be a man.\n(z1 / child\n      :domain (z2 / boy)\n      :ARG1-of (z3 / grow-up-04\n            :ARG4 (z4 / man\n                  :domain z2)))", "# ::snt A rooster is an adult male chicken.\n(z1 / chicken\n      :mod (z2 / male)\n      :mod (z3 / adult)\n      :domain (z4 / rooster))"], "14": ["A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.", "A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.", "# ::snt A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.\n(z1 / cushion\n      :domain (z2 / case\n            :consist-of (z3 / fabric)\n            :ARG1-of (z4 / fill-01\n                  :ARG2 (z5 / material\n                        :ARG1-of (z6 / soft-02)))\n            :ARG1-of (z7 / put-01\n                  :ARG0 (z8 / you)\n                  :ARG2 (z9 / seat)\n                  :purpose (z10 / make-02\n                        :ARG0 z8\n                        :ARG1 (z11 / comfortable-02\n                              :ARG0 z2\n                              :ARG2-of (z12 / have-degree-91\n                                    :ARG1 z2\n                                    :ARG3 (z13 / more)))))))", "# ::snt A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.\n(z1 / stone\n      :mod (z2 / precious)\n      :domain (z3 / jewel)\n      :ARG1-of (z4 / use-01\n            :ARG2 (z5 / decorate-01\n                  :ARG0 z3\n                  :ARG1 (z6 / thing\n                        :ARG1-of (z7 / value-02)\n                        :ARG1-of (z8 / wear-01\n                              :ARG0 (z9 / you))\n                        :example (z10 / or\n                              :op1 (z11 / ring)\n                              :op2 (z12 / necklace))))))"], "15": ["A monk is a member of a male religious community that is usually separated from the outside world.", "A slave is someone who is the property of another person and has to work for that person.", "# ::snt A monk is a member of a male religious community that is usually separated from the outside world.\n(z1 / monk\n      :ARG0-of (z2 / have-org-role-91\n            :ARG1 (z3 / community\n                  :mod (z4 / male)\n                  :mod (z5 / religion)\n                  :ARG1-of (z6 / separate-01\n                        :ARG2 (z7 / world\n                              :mod (z8 / outside))\n                        :mod (z9 / usual)))\n            :ARG2 (z10 / member)))", "# ::snt A slave is someone who is the property of another person and has to work for that person.\n(z1 / someone\n      :domain (z2 / slave)\n      :ARG2-of (z3 / property\n            :poss (z4 / person\n                  :mod (z5 / another)))\n      :ARG2-of (z6 / obligate-01\n            :ARG1 (z7 / work-01\n                  :ARG0 z1\n                  :ARG2 z4)))"], "16": ["An Asylum is a psychiatric hospital.", "A cemetery is a place where dead people's bodies or their ashes are buried.", "# ::snt An Asylum is a psychiatric hospital.\n(z1 / hospital\n      :mod (z2 / psychiatry)\n      :domain (z3 / asylum))", "# ::snt A cemetery is a place where dead people's bodies or their ashes are buried.\n(z1 / place\n      :location-of (z2 / bury-01\n            :ARG1 (z3 / or\n                  :op1 (z4 / body\n                        :part-of (z5 / person\n                              :ARG1-of (z6 / die-01)))\n                  :op2 (z7 / ash\n                        :part-of z5)))\n      :location (z8 / cemetery))"], "17": ["The coast is an area of land that is next to the sea.", "A forest is a large area where trees grow close together.", "# ::snt The coast is an area of land that is next to the sea.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / coast)\n      :location (z4 / next-to\n            :op1 (z5 / sea)))", "# ::snt A forest is a large area where trees grow close together.\n(z1 / area\n      :mod (z2 / large)\n      :location-of (z3 / grow-03\n            :ARG1 (z4 / tree)\n            :ARG1-of (z5 / close-10\n                  :ARG2 z4))\n      :domain (z6 / forest))"], "18": ["A grin is a broad smile.", "A lad is a young man or boy.", "# ::snt A grin is a broad smile.\n(z1 / grin-01\n      :ARG1-of (z2 / mean-01\n            :ARG2 (z3 / smile-01\n                  :ARG1-of (z4 / broad-02))))", "# ::snt A lad is a young man or boy.\n(z1 / or\n      :op1 (z2 / man\n            :mod (z3 / young))\n      :op2 (z4 / boy\n            :mod z3)\n      :domain (z5 / lad))"], "19": ["The shores or shore of a sea, lake or wide river is the land along the edge of it.", "Woodland is land with a lot of trees.", "# ::snt The shores or shore of a sea, lake or wide river is the land along the edge of it.\n(z1 / land\n      :location (z2 / along\n            :op1 (z3 / edge\n                  :part-of (z4 / or\n                        :op1 (z5 / sea)\n                        :op2 (z6 / lake)\n                        :op3 (z7 / river\n                              :ARG1-of (z8 / wide-02)))))\n      :domain (z9 / or\n            :op1 (z10 / shore\n                  :part-of z4)\n            :op2 (z11 / shore\n                  :part-of z5)))", "# ::snt Woodland is land with a lot of trees.\n(z1 / land\n      :consist-of (z2 / tree\n            :quant (z3 / lot))\n      :domain (z4 / forest\n            :name (z5 / name\n                  :op1 \"Woodland\")))"], "20": ["A monk is a member of a male religious community that is usually separated from the outside world.", "In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.", "# ::snt A monk is a member of a male religious community that is usually separated from the outside world.\n(z1 / monk\n      :ARG0-of (z2 / have-org-role-91\n            :ARG1 (z3 / community\n                  :mod (z4 / male)\n                  :mod (z5 / religion)\n                  :ARG1-of (z6 / separate-01\n                        :ARG2 (z7 / world\n                              :mod (z8 / outside))\n                        :mod (z9 / usual)))\n            :ARG2 (z10 / member)))", "# ::snt In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.\n(z1 / or\n      :op1 (z2 / priest)\n      :op2 (z3 / priestess)\n      :domain (z4 / oracle)\n      :ARG0-of (z5 / state-01\n            :ARG3 (z6 / or\n                  :op1 (z7 / event\n                        :time (z8 / future))\n                  :op2 (z9 / thing\n                        :ARG1-of (z10 / true-01)))))"], "21": ["A boy is a child who will grow up to be a man.", "A sage is a person who is regarded as being very wise.", "# ::snt A boy is a child who will grow up to be a man.\n(z1 / child\n      :domain (z2 / boy)\n      :ARG1-of (z3 / grow-up-04\n            :ARG4 (z4 / man\n                  :domain z2)))", "# ::snt A sage is a person who is regarded as being very wise.\n(z1 / sage\n      :domain (z2 / person\n            :ARG1-of (z3 / regard-01\n                  :ARG2 (z4 / wise\n                        :degree (z5 / very)))))"], "22": ["An automobile is a car.", "A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.", "# ::snt An automobile is a car.\n(z1 / car\n      :domain (z2 / automobile))", "# ::snt A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.\n(z1 / cushion\n      :domain (z2 / case\n            :consist-of (z3 / fabric)\n            :ARG1-of (z4 / fill-01\n                  :ARG2 (z5 / material\n                        :ARG1-of (z6 / soft-02)))\n            :ARG1-of (z7 / put-01\n                  :ARG0 (z8 / you)\n                  :ARG2 (z9 / seat)\n                  :purpose (z10 / make-02\n                        :ARG0 z8\n                        :ARG1 (z11 / comfortable-02\n                              :ARG0 z2\n                              :ARG2-of (z12 / have-degree-91\n                                    :ARG1 z2\n                                    :ARG3 (z13 / more)))))))"], "23": ["A mound of something is a large rounded pile of it.", "The shores or shore of a sea, lake or wide river is the land along the edge of it.", "# ::snt A mound of something is a large rounded pile of it.\n(z1 / pile\n      :ARG1-of (z2 / round-04)\n      :mod (z3 / large)\n      :domain (z4 / mound\n            :consist-of (z5 / something)))", "# ::snt The shores or shore of a sea, lake or wide river is the land along the edge of it.\n(z1 / land\n      :location (z2 / along\n            :op1 (z3 / edge\n                  :part-of (z4 / or\n                        :op1 (z5 / sea)\n                        :op2 (z6 / lake)\n                        :op3 (z7 / river\n                              :ARG1-of (z8 / wide-02)))))\n      :domain (z9 / or\n            :op1 (z10 / shore\n                  :part-of z4)\n            :op2 (z11 / shore\n                  :part-of z5)))"], "24": ["A lad is a young man or boy.", "In legends and fairy stories, a wizard is a man who has magic powers.", "# ::snt A lad is a young man or boy.\n(z1 / or\n      :op1 (z2 / man\n            :mod (z3 / young))\n      :op2 (z4 / boy\n            :mod z3)\n      :domain (z5 / lad))", "# ::snt In legends and fairy stories, a wizard is a man who has magic powers.\n(z1 / man\n      :domain (z2 / wizard)\n      :ARG0-of (z3 / have-03\n            :ARG1 (z4 / power\n                  :mod (z5 / magic)))\n      :location (z6 / and\n            :op1 (z7 / legend)\n            :op2 (z8 / story\n                  :mod (z9 / fairy))))"], "25": ["A forest is a large area where trees grow close together.", "A graveyard is an area of land, sometimes near a church, where dead people are buried.", "# ::snt A forest is a large area where trees grow close together.\n(z1 / area\n      :mod (z2 / large)\n      :location-of (z3 / grow-03\n            :ARG1 (z4 / tree)\n            :ARG1-of (z5 / close-10\n                  :ARG2 z4))\n      :domain (z6 / forest))", "# ::snt A graveyard is an area of land, sometimes near a church, where dead people are buried.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / graveyard)\n      :ARG1-of (z4 / near-02\n            :ARG2 (z5 / church)\n            :frequency (z6 / sometimes))\n      :location-of (z7 / bury-01\n            :ARG1 (z8 / person\n                  :ARG1-of (z9 / die-01))))"], "26": ["Food is what people and animals eat.", "A rooster is an adult male chicken.", "# ::snt Food is what people and animals eat.\n(z1 / eat-01\n      :ARG0 (z2 / and\n            :op1 (z3 / person)\n            :op2 (z4 / animal))\n      :ARG1 (z5 / food))", "# ::snt A rooster is an adult male chicken.\n(z1 / chicken\n      :mod (z2 / male)\n      :mod (z3 / adult)\n      :domain (z4 / rooster))"], "27": ["A cemetery is a place where dead people's bodies or their ashes are buried.", "Woodland is land with a lot of trees.", "# ::snt A cemetery is a place where dead people's bodies or their ashes are buried.\n(z1 / place\n      :location-of (z2 / bury-01\n            :ARG1 (z3 / or\n                  :op1 (z4 / body\n                        :part-of (z5 / person\n                              :ARG1-of (z6 / die-01)))\n                  :op2 (z7 / ash\n                        :part-of z5)))\n      :location (z8 / cemetery))", "# ::snt Woodland is land with a lot of trees.\n(z1 / land\n      :consist-of (z2 / tree\n            :quant (z3 / lot))\n      :domain (z4 / forest\n            :name (z5 / name\n                  :op1 \"Woodland\")))"], "28": ["The shores or shore of a sea, lake or wide river is the land along the edge of it.", "A voyage is a long journey on a ship or in a spacecraft.", "# ::snt The shores or shore of a sea, lake or wide river is the land along the edge of it.\n(z1 / land\n      :location (z2 / along\n            :op1 (z3 / edge\n                  :part-of (z4 / or\n                        :op1 (z5 / sea)\n                        :op2 (z6 / lake)\n                        :op3 (z7 / river\n                              :ARG1-of (z8 / wide-02)))))\n      :domain (z9 / or\n            :op1 (z10 / shore\n                  :part-of z4)\n            :op2 (z11 / shore\n                  :part-of z5)))", "# ::snt A voyage is a long journey on a ship or in a spacecraft.\n(z1 / journey-01\n      :ARG1-of (z2 / long-03)\n      :domain (z3 / voyage)\n      :location (z4 / or\n            :op1 (z5 / ship)\n            :op2 (z6 / spacecraft)))"], "29": ["A bird is a creature with feathers and wings, females lay eggs and most birds can fly.", "Woodland is land with a lot of trees.", "# ::snt A bird is a creature with feathers and wings, females lay eggs and most birds can fly.\n(z1 / creature\n      :domain (z2 / bird)\n      :ARG0-of (z3 / have-03\n            :ARG1 (z4 / and\n                  :op1 (z5 / feather)\n                  :op2 (z6 / wing)))\n      :ARG0-of (z7 / lay-01\n            :ARG1 (z8 / egg)\n            :mod (z9 / female))\n      :ARG0-of (z10 / fly-01\n            :ARG1-of (z11 / possible-01)))", "# ::snt Woodland is land with a lot of trees.\n(z1 / land\n      :consist-of (z2 / tree\n            :quant (z3 / lot))\n      :domain (z4 / forest\n            :name (z5 / name\n                  :op1 \"Woodland\")))"], "30": ["The coast is an area of land that is next to the sea.", "A hill is an area of land that is higher than the land that surrounds it.", "# ::snt The coast is an area of land that is next to the sea.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / coast)\n      :location (z4 / next-to\n            :op1 (z5 / sea)))", "# ::snt A hill is an area of land that is higher than the land that surrounds it.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / hill)\n      :ARG1-of (z4 / have-degree-91\n            :ARG2 (z5 / high-02)\n            :ARG3 (z6 / more)\n            :ARG4 (z7 / land\n                  :ARG2-of (z8 / surround-01\n                        :ARG1 z3))))"], "31": ["A furnace is a container or enclosed space in which a very hot fire is made, for example to melt metal, burn rubbish or produce steam.", "An implement is a tool or other piece of equipment.", "# ::snt A furnace is a container or enclosed space in which a very hot fire is made, for example to melt metal, burn rubbish or produce steam.\n(z1 / or\n      :op1 (z2 / container)\n      :op2 (z3 / space\n            :ARG1-of (z4 / enclose-01))\n      :domain (z5 / furnace)\n      :location-of (z6 / make-01\n            :ARG1 (z7 / fire\n                  :ARG1-of (z8 / hot-05\n                        :degree (z9 / very)))\n            :example (z10 / or\n                  :op1 (z11 / melt-01\n                        :ARG1 (z12 / metal))\n                  :op2 (z13 / burn-01\n                        :ARG1 (z14 / rubbish))\n                  :op3 (z15 / produce-01\n                        :ARG1 (z16 / steam)))))", "# ::snt An implement is a tool or other piece of equipment.\n(z1 / or\n      :op1 (z2 / tool)\n      :op2 (z3 / piece\n            :mod (z4 / equipment)\n            :mod (z5 / other))\n      :domain (z6 / implement))"], "32": ["A crane is a large machine that moves heavy things by lifting them in the air.", "A rooster is an adult male chicken.", "# ::snt A crane is a large machine that moves heavy things by lifting them in the air.\n(z1 / machine\n      :mod (z2 / large)\n      :domain (z3 / crane)\n      :ARG0-of (z4 / move-01\n            :ARG1 (z5 / thing\n                  :mod (z6 / heavy))\n            :manner (z7 / lift-01\n                  :ARG1 z5\n                  :ARG3 (z8 / air))))", "# ::snt A rooster is an adult male chicken.\n(z1 / chicken\n      :mod (z2 / male)\n      :mod (z3 / adult)\n      :domain (z4 / rooster))"], "33": ["A hill is an area of land that is higher than the land that surrounds it.", "Woodland is land with a lot of trees.", "# ::snt A hill is an area of land that is higher than the land that surrounds it.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / hill)\n      :ARG1-of (z4 / have-degree-91\n            :ARG2 (z5 / high-02)\n            :ARG3 (z6 / more)\n            :ARG4 (z7 / land\n                  :ARG2-of (z8 / surround-01\n                        :ARG1 z3))))", "# ::snt Woodland is land with a lot of trees.\n(z1 / land\n      :consist-of (z2 / tree\n            :quant (z3 / lot))\n      :domain (z4 / forest\n            :name (z5 / name\n                  :op1 \"Woodland\")))"], "34": ["A car is a motor vehicle with room for a small number of passengers.", "When you make a journey, you travel from one place to another.", "# ::snt A car is a motor vehicle with room for a small number of passengers.\n(z1 / vehicle\n      :mod (z2 / motor)\n      :domain (z3 / car)\n      :ARG0-of (z4 / have-03\n            :ARG1 (z5 / room\n                  :location-of (z6 / passenger\n                        :quant (z7 / number\n                              :mod (z8 / small))))))", "# ::snt When you make a journey, you travel from one place to another.\n(z1 / travel-01\n      :ARG0 (z2 / you)\n      :source (z3 / place)\n      :destination (z4 / place\n            :mod (z5 / another))\n      :time (z6 / journey-01\n            :ARG0 z2))"], "35": ["A cemetery is a place where dead people's bodies or their ashes are buried.", "A mound of something is a large rounded pile of it.", "# ::snt A cemetery is a place where dead people's bodies or their ashes are buried.\n(z1 / place\n      :location-of (z2 / bury-01\n            :ARG1 (z3 / or\n                  :op1 (z4 / body\n                        :part-of (z5 / person\n                              :ARG1-of (z6 / die-01)))\n                  :op2 (z7 / ash\n                        :part-of z5)))\n      :location (z8 / cemetery))", "# ::snt A mound of something is a large rounded pile of it.\n(z1 / pile\n      :ARG1-of (z2 / round-04)\n      :mod (z3 / large)\n      :domain (z4 / mound\n            :consist-of (z5 / something)))"], "36": ["Glass is a hard transparent substance that is used to make things such as windows and bottles.", "A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.", "# ::snt Glass is a hard transparent substance that is used to make things such as windows and bottles.\n(z1 / substance\n      :domain (z2 / glass)\n      :mod (z3 / transparent\n            :ARG1-of (z4 / hard-04))\n      :ARG1-of (z5 / use-01\n            :ARG2 (z6 / make-01\n                  :ARG1 (z7 / thing\n                        :example (z8 / and\n                              :op1 (z9 / window)\n                              :op2 (z10 / bottle)))\n                  :ARG2 z2)))", "# ::snt A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.\n(z1 / stone\n      :mod (z2 / precious)\n      :domain (z3 / jewel)\n      :ARG1-of (z4 / use-01\n            :ARG2 (z5 / decorate-01\n                  :ARG0 z3\n                  :ARG1 (z6 / thing\n                        :ARG1-of (z7 / value-02)\n                        :ARG1-of (z8 / wear-01\n                              :ARG0 (z9 / you))\n                        :example (z10 / or\n                              :op1 (z11 / ring)\n                              :op2 (z12 / necklace))))))"], "37": ["A magician is a person who entertains people by doing magic tricks.", "In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.", "# ::snt A magician is a person who entertains people by doing magic tricks.\n(z1 / magician\n      :domain (z2 / person\n            :ARG0-of (z3 / entertain-01\n                  :ARG1 (z4 / person)\n                  :manner (z5 / trick-01\n                        :mod (z6 / magic)))))", "# ::snt In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.\n(z1 / or\n      :op1 (z2 / priest)\n      :op2 (z3 / priestess)\n      :domain (z4 / oracle)\n      :ARG0-of (z5 / state-01\n            :ARG3 (z6 / or\n                  :op1 (z7 / event\n                        :time (z8 / future))\n                  :op2 (z9 / thing\n                        :ARG1-of (z10 / true-01)))))"], "38": ["A crane is a large machine that moves heavy things by lifting them in the air.", "An implement is a tool or other piece of equipment.", "# ::snt A crane is a large machine that moves heavy things by lifting them in the air.\n(z1 / machine\n      :mod (z2 / large)\n      :domain (z3 / crane)\n      :ARG0-of (z4 / move-01\n            :ARG1 (z5 / thing\n                  :mod (z6 / heavy))\n            :manner (z7 / lift-01\n                  :ARG1 z5\n                  :ARG3 (z8 / air))))", "# ::snt An implement is a tool or other piece of equipment.\n(z1 / or\n      :op1 (z2 / tool)\n      :op2 (z3 / piece\n            :mod (z4 / equipment)\n            :mod (z5 / other))\n      :domain (z6 / implement))"], "39": ["Your brother is a boy or a man who has the same parents as you.", "A lad is a young man or boy.", "# ::snt Your brother is a boy or a man who has the same parents as you.\n(z1 / or\n      :op1 (z2 / boy)\n      :op2 (z3 / man)\n      :domain (z4 / person\n            :ARG0-of (z5 / have-rel-role-91\n                  :ARG1 (z6 / you)\n                  :ARG2 (z7 / brother))\n            :ARG0-of (z8 / have-03\n                  :ARG1 (z9 / parent\n                        :ARG1-of (z10 / same-01\n                              :ARG2 z6)))))", "# ::snt A lad is a young man or boy.\n(z1 / or\n      :op1 (z2 / man\n            :mod (z3 / young))\n      :op2 (z4 / boy\n            :mod z3)\n      :domain (z5 / lad))"], "40": ["A sage is a person who is regarded as being very wise.", "In legends and fairy stories, a wizard is a man who has magic powers.", "# ::snt A sage is a person who is regarded as being very wise.\n(z1 / sage\n      :domain (z2 / person\n            :ARG1-of (z3 / regard-01\n                  :ARG2 (z4 / wise\n                        :degree (z5 / very)))))", "# ::snt In legends and fairy stories, a wizard is a man who has magic powers.\n(z1 / man\n      :domain (z2 / wizard)\n      :ARG0-of (z3 / have-03\n            :ARG1 (z4 / power\n                  :mod (z5 / magic)))\n      :location (z6 / and\n            :op1 (z7 / legend)\n            :op2 (z8 / story\n                  :mod (z9 / fairy))))"], "41": ["In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.", "A sage is a person who is regarded as being very wise.", "# ::snt In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.\n(z1 / or\n      :op1 (z2 / priest)\n      :op2 (z3 / priestess)\n      :domain (z4 / oracle)\n      :ARG0-of (z5 / state-01\n            :ARG3 (z6 / or\n                  :op1 (z7 / event\n                        :time (z8 / future))\n                  :op2 (z9 / thing\n                        :ARG1-of (z10 / true-01)))))", "# ::snt A sage is a person who is regarded as being very wise.\n(z1 / sage\n      :domain (z2 / person\n            :ARG1-of (z3 / regard-01\n                  :ARG2 (z4 / wise\n                        :degree (z5 / very)))))"], "42": ["A bird is a creature with feathers and wings, females lay eggs and most birds can fly.", "A crane is a large machine that moves heavy things by lifting them in the air.", "# ::snt A bird is a creature with feathers and wings, females lay eggs and most birds can fly.\n(z1 / creature\n      :domain (z2 / bird)\n      :ARG0-of (z3 / have-03\n            :ARG1 (z4 / and\n                  :op1 (z5 / feather)\n                  :op2 (z6 / wing)))\n      :ARG0-of (z7 / lay-01\n            :ARG1 (z8 / egg)\n            :mod (z9 / female))\n      :ARG0-of (z10 / fly-01\n            :ARG1-of (z11 / possible-01)))", "# ::snt A crane is a large machine that moves heavy things by lifting them in the air.\n(z1 / machine\n      :mod (z2 / large)\n      :domain (z3 / crane)\n      :ARG0-of (z4 / move-01\n            :ARG1 (z5 / thing\n                  :mod (z6 / heavy))\n            :manner (z7 / lift-01\n                  :ARG1 z5\n                  :ARG3 (z8 / air))))"], "43": ["A bird is a creature with feathers and wings, females lay eggs and most birds can fly.", "A cock is an adult male chicken.", "# ::snt A bird is a creature with feathers and wings, females lay eggs and most birds can fly.\n(z1 / creature\n      :domain (z2 / bird)\n      :ARG0-of (z3 / have-03\n            :ARG1 (z4 / and\n                  :op1 (z5 / feather)\n                  :op2 (z6 / wing)))\n      :ARG0-of (z7 / lay-01\n            :ARG1 (z8 / egg)\n            :mod (z9 / female))\n      :ARG0-of (z10 / fly-01\n            :ARG1-of (z11 / possible-01)))", "# ::snt A cock is an adult male chicken.\n(z1 / chicken\n      :mod (z2 / male)\n      :mod (z3 / adult)\n      :domain (z4 / cock))"], "44": ["Food is what people and animals eat.", "Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.", "# ::snt Food is what people and animals eat.\n(z1 / eat-01\n      :ARG0 (z2 / and\n            :op1 (z3 / person)\n            :op2 (z4 / animal))\n      :ARG1 (z5 / food))", "# ::snt Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.\n(z1 / something\n      :domain (z2 / or\n            :op1 (z3 / fruit\n                  :op2-of z2))\n      :ARG1-of (z4 / grow-03\n            :location (z5 / or\n                  :op1 (z6 / tree)\n                  :op2 (z7 / bush)))\n      :ARG0-of (z8 / contain-01\n            :ARG1 (z9 / or\n                  :op1 (z10 / seed)\n                  :op2 (z11 / stone\n                        :ARG1-of (z12 / cover-02\n                              :ARG2 (z13 / substance\n                                    :ARG1-of (z14 / eat-01\n                                          :ARG0 (z15 / you)\n                                          :ARG1-of (z16 / possible-01))))))))"], "45": ["Your brother is a boy or a man who has the same parents as you.", "A monk is a member of a male religious community that is usually separated from the outside world.", "# ::snt Your brother is a boy or a man who has the same parents as you.\n(z1 / or\n      :op1 (z2 / boy)\n      :op2 (z3 / man)\n      :domain (z4 / person\n            :ARG0-of (z5 / have-rel-role-91\n                  :ARG1 (z6 / you)\n                  :ARG2 (z7 / brother))\n            :ARG0-of (z8 / have-03\n                  :ARG1 (z9 / parent\n                        :ARG1-of (z10 / same-01\n                              :ARG2 z6)))))", "# ::snt A monk is a member of a male religious community that is usually separated from the outside world.\n(z1 / monk\n      :ARG0-of (z2 / have-org-role-91\n            :ARG1 (z3 / community\n                  :mod (z4 / male)\n                  :mod (z5 / religion)\n                  :ARG1-of (z6 / separate-01\n                        :ARG2 (z7 / world\n                              :mod (z8 / outside))\n                        :mod (z9 / usual)))\n            :ARG2 (z10 / member)))"], "46": ["An Asylum is a psychiatric hospital.", "If you describe a place or situation as a madhouse you mean that it is full of confusion and noise.", "# ::snt An Asylum is a psychiatric hospital.\n(z1 / hospital\n      :mod (z2 / psychiatry)\n      :domain (z3 / asylum))", "# ::snt If you describe a place or situation as a madhouse you mean that it is full of confusion and noise.\n(z1 / mean-01\n      :ARG0 (z2 / you)\n      :ARG2 (z3 / full-09\n            :ARG1 (z4 / or\n                  :op1 (z5 / place)\n                  :op2 (z6 / situation))\n            :ARG2 (z7 / and\n                  :op1 (z8 / confuse-01)\n                  :op2 (z9 / noise)))\n      :condition (z10 / describe-01\n            :ARG0 z2\n            :ARG1 z4\n            :ARG2 (z11 / madhouse)))"], "47": ["A furnace is a container or enclosed space in which a very hot fire is made, for example to melt metal, burn rubbish or produce steam.", "A stove is a piece of equipment which provides heat, either for cooking or for heating a room.", "# ::snt A furnace is a container or enclosed space in which a very hot fire is made, for example to melt metal, burn rubbish or produce steam.\n(z1 / or\n      :op1 (z2 / container)\n      :op2 (z3 / space\n            :ARG1-of (z4 / enclose-01))\n      :domain (z5 / furnace)\n      :location-of (z6 / make-01\n            :ARG1 (z7 / fire\n                  :ARG1-of (z8 / hot-05\n                        :degree (z9 / very)))\n            :example (z10 / or\n                  :op1 (z11 / melt-01\n                        :ARG1 (z12 / metal))\n                  :op2 (z13 / burn-01\n                        :ARG1 (z14 / rubbish))\n                  :op3 (z15 / produce-01\n                        :ARG1 (z16 / steam)))))", "# ::snt A stove is a piece of equipment which provides heat, either for cooking or for heating a room.\n(z1 / piece\n      :domain (z2 / stove)\n      :consist-of (z3 / equipment\n            :ARG0-of (z4 / provide-01\n                  :ARG1 (z5 / heat)\n                  :purpose (z6 / or\n                        :op1 (z7 / cook-01)\n                        :op2 (z8 / heat-01\n                              :ARG1 (z9 / room))))))"], "48": ["A magician is a person who entertains people by doing magic tricks.", "In legends and fairy stories, a wizard is a man who has magic powers.", "# ::snt A magician is a person who entertains people by doing magic tricks.\n(z1 / magician\n      :domain (z2 / person\n            :ARG0-of (z3 / entertain-01\n                  :ARG1 (z4 / person)\n                  :manner (z5 / trick-01\n                        :mod (z6 / magic)))))", "# ::snt In legends and fairy stories, a wizard is a man who has magic powers.\n(z1 / man\n      :domain (z2 / wizard)\n      :ARG0-of (z3 / have-03\n            :ARG1 (z4 / power\n                  :mod (z5 / magic)))\n      :location (z6 / and\n            :op1 (z7 / legend)\n            :op2 (z8 / story\n                  :mod (z9 / fairy))))"], "49": ["A hill is an area of land that is higher than the land that surrounds it.", "A mound of something is a large rounded pile of it.", "# ::snt A hill is an area of land that is higher than the land that surrounds it.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / hill)\n      :ARG1-of (z4 / have-degree-91\n            :ARG2 (z5 / high-02)\n            :ARG3 (z6 / more)\n            :ARG4 (z7 / land\n                  :ARG2-of (z8 / surround-01\n                        :ARG1 z3))))", "# ::snt A mound of something is a large rounded pile of it.\n(z1 / pile\n      :ARG1-of (z2 / round-04)\n      :mod (z3 / large)\n      :domain (z4 / mound\n            :consist-of (z5 / something)))"], "50": ["Cord is strong, thick string.", "String is thin rope made of twisted threads, used for tying things together or tying up parcels.", "# ::snt Cord is strong, thick string.\n(z1 / string\n      :ARG1-of (z2 / strong-02)\n      :ARG1-of (z3 / thick-03)\n      :domain (z4 / cord))", "# ::snt String is thin rope made of twisted threads, used for tying things together or tying up parcels.\n(z1 / rope\n      :domain (z2 / string)\n      :ARG1-of (z3 / thin-03)\n      :ARG1-of (z4 / make-01\n            :ARG2 (z5 / thread\n                  :ARG1-of (z6 / twist-01)))\n      :ARG1-of (z7 / use-01\n            :ARG2 (z8 / or\n                  :op1 (z9 / tie-01\n                        :ARG1 (z10 / thing)\n                        :ARG3 (z11 / together))\n                  :op2 (z12 / tie-up-04\n                        :ARG1 (z13 / parcel)))))"], "51": ["Glass is a hard transparent substance that is used to make things such as windows and bottles.", "A tumbler is a drinking glass with straight sides.", "# ::snt Glass is a hard transparent substance that is used to make things such as windows and bottles.\n(z1 / substance\n      :domain (z2 / glass)\n      :mod (z3 / transparent\n            :ARG1-of (z4 / hard-04))\n      :ARG1-of (z5 / use-01\n            :ARG2 (z6 / make-01\n                  :ARG1 (z7 / thing\n                        :example (z8 / and\n                              :op1 (z9 / window)\n                              :op2 (z10 / bottle)))\n                  :ARG2 z2)))", "# ::snt A tumbler is a drinking glass with straight sides.\n(z1 / glass\n      :purpose (z2 / drink-01)\n      :ARG0-of (z3 / have-03\n            :ARG1 (z4 / side\n                  :ARG1-of (z5 / straight-04)))\n      :domain (z6 / tumbler))"], "52": ["A grin is a broad smile.", "A smile is the expression that you have on your face when you are pleased or amused, or when you are being friendly.", "# ::snt A grin is a broad smile.\n(z1 / grin-01\n      :ARG1-of (z2 / mean-01\n            :ARG2 (z3 / smile-01\n                  :ARG1-of (z4 / broad-02))))", "# ::snt A smile is the expression that you have on your face when you are pleased or amused, or when you are being friendly.\n(z1 / smile-01\n      :domain (z2 / expression\n            :ARG1-of (z3 / have-03\n                  :ARG0 (z4 / you)\n                  :location (z5 / face\n                        :part-of z4)\n                  :time (z6 / or\n                        :op1 (z7 / please-01\n                              :ARG1 z4)\n                        :op2 (z8 / amuse-01\n                              :ARG1 z4)\n                        :op3 (z9 / friendly-01\n                              :ARG1 z4)))))"], "53": ["In former times, serfs were a class of people who had to work on a particular person's land and could not leave without that person's permission.", "A slave is someone who is the property of another person and has to work for that person.", "# ::snt In former times, serfs were a class of people who had to work on a particular person's land and could not leave without that person's permission.\n(z1 / class\n      :consist-of (z2 / person\n            :ARG1-of (z3 / obligate-01\n                  :ARG2 (z4 / work-01\n                        :ARG0 z2\n                        :location (z5 / land\n                              :poss (z6 / person\n                                    :mod (z7 / particular))))))\n      :ARG1-of (z8 / permit-01\n            :polarity -\n            :ARG0 z6\n            :ARG1-of (z9 / possible-01\n                  :polarity -))\n      :domain (z10 / serf)\n      :time (z11 / former))", "# ::snt A slave is someone who is the property of another person and has to work for that person.\n(z1 / someone\n      :domain (z2 / slave)\n      :ARG2-of (z3 / property\n            :poss (z4 / person\n                  :mod (z5 / another)))\n      :ARG2-of (z6 / obligate-01\n            :ARG1 (z7 / work-01\n                  :ARG0 z1\n                  :ARG2 z4)))"], "54": ["When you make a journey, you travel from one place to another.", "A voyage is a long journey on a ship or in a spacecraft.", "# ::snt When you make a journey, you travel from one place to another.\n(z1 / travel-01\n      :ARG0 (z2 / you)\n      :source (z3 / place)\n      :destination (z4 / place\n            :mod (z5 / another))\n      :time (z6 / journey-01\n            :ARG0 z2))", "# ::snt A voyage is a long journey on a ship or in a spacecraft.\n(z1 / journey-01\n      :ARG1-of (z2 / long-03)\n      :domain (z3 / voyage)\n      :location (z4 / or\n            :op1 (z5 / ship)\n            :op2 (z6 / spacecraft)))"], "55": ["An autograph is the signature of someone famous which is specially written for a fan to keep.", "Your signature is your name, written in your own characteristic way, often at the end of a document to indicate that you wrote the document or that you agree with what it says.", "# ::snt An autograph is the signature of someone famous which is specially written for a fan to keep.\n(z1 / autograph\n      :domain (z2 / sign-01\n            :ARG0 (z3 / someone\n                  :ARG1-of (z4 / fame-01))\n            :ARG1-of (z5 / write-01\n                  :ARG1-of (z6 / special-02)\n                  :purpose (z7 / keep-01\n                        :ARG0 (z8 / fan)\n                        :ARG1 z2))))", "# ::snt Your signature is your name, written in your own characteristic way, often at the end of a document to indicate that you wrote the document or that you agree with what it says.\n(z1 / signature\n      :poss (z2 / you)\n      :domain (z3 / name\n            :poss z2)\n      :ARG1-of (z4 / write-01\n            :manner (z5 / way\n                  :ARG1-of (z6 / characteristic-02\n                        :ARG2 z2))\n            :frequency (z7 / often)\n            :location (z8 / end-01\n                  :ARG1 (z9 / document))\n            :purpose (z10 / indicate-01\n                  :ARG0 z1\n                  :ARG1 (z11 / or\n                        :op1 (z12 / write-01\n                              :ARG0 z2\n                              :ARG1 z9)\n                        :op2 (z13 / agree-01\n                              :ARG0 z2\n                              :ARG1 (z14 / thing\n                                    :ARG1-of (z15 / say-01\n                                          :ARG0 z9)))))))"], "56": ["The coast is an area of land that is next to the sea.", "The shores or shore of a sea, lake or wide river is the land along the edge of it.", "# ::snt The coast is an area of land that is next to the sea.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / coast)\n      :location (z4 / next-to\n            :op1 (z5 / sea)))", "# ::snt The shores or shore of a sea, lake or wide river is the land along the edge of it.\n(z1 / land\n      :location (z2 / along\n            :op1 (z3 / edge\n                  :part-of (z4 / or\n                        :op1 (z5 / sea)\n                        :op2 (z6 / lake)\n                        :op3 (z7 / river\n                              :ARG1-of (z8 / wide-02)))))\n      :domain (z9 / or\n            :op1 (z10 / shore\n                  :part-of z4)\n            :op2 (z11 / shore\n                  :part-of z5)))"], "57": ["A forest is a large area where trees grow close together.", "Woodland is land with a lot of trees.", "# ::snt A forest is a large area where trees grow close together.\n(z1 / area\n      :mod (z2 / large)\n      :location-of (z3 / grow-03\n            :ARG1 (z4 / tree)\n            :ARG1-of (z5 / close-10\n                  :ARG2 z4))\n      :domain (z6 / forest))", "# ::snt Woodland is land with a lot of trees.\n(z1 / land\n      :consist-of (z2 / tree\n            :quant (z3 / lot))\n      :domain (z4 / forest\n            :name (z5 / name\n                  :op1 \"Woodland\")))"], "58": ["An implement is a tool or other piece of equipment.", "A tool is any instrument or simple piece of equipment that you hold in your hands and use to do a particular kind of work.", "# ::snt An implement is a tool or other piece of equipment.\n(z1 / or\n      :op1 (z2 / tool)\n      :op2 (z3 / piece\n            :mod (z4 / equipment)\n            :mod (z5 / other))\n      :domain (z6 / implement))", "# ::snt A tool is any instrument or simple piece of equipment that you hold in your hands and use to do a particular kind of work.\n(z1 / or\n      :op1 (z2 / instrument\n            :mod (z3 / any))\n      :op2 (z4 / piece\n            :mod (z5 / equipment)\n            :ARG1-of (z6 / simple-02))\n      :ARG1-of (z7 / hold-01\n            :ARG0 (z8 / you)\n            :ARG2 (z9 / in-ones-hands-04\n                  :ARG0 z8\n                  :ARG1 z1))\n      :ARG1-of (z10 / use-01\n            :ARG0 z8\n            :ARG2 (z11 / work-01\n                  :ARG0 z8\n                  :mod (z12 / kind\n                        :mod (z13 / particular))))\n      :domain (z14 / tool))"], "59": ["A cock is an adult male chicken.", "A rooster is an adult male chicken.", "# ::snt A cock is an adult male chicken.\n(z1 / chicken\n      :mod (z2 / male)\n      :mod (z3 / adult)\n      :domain (z4 / cock))", "# ::snt A rooster is an adult male chicken.\n(z1 / chicken\n      :mod (z2 / male)\n      :mod (z3 / adult)\n      :domain (z4 / rooster))"], "60": ["A boy is a child who will grow up to be a man.", "A lad is a young man or boy.", "# ::snt A boy is a child who will grow up to be a man.\n(z1 / child\n      :domain (z2 / boy)\n      :ARG1-of (z3 / grow-up-04\n            :ARG4 (z4 / man\n                  :domain z2)))", "# ::snt A lad is a young man or boy.\n(z1 / or\n      :op1 (z2 / man\n            :mod (z3 / young))\n      :op2 (z4 / boy\n            :mod z3)\n      :domain (z5 / lad))"], "61": ["A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.", "A pillow is a rectangular cushion which you rest your head on when you are in bed.", "# ::snt A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.\n(z1 / cushion\n      :domain (z2 / case\n            :consist-of (z3 / fabric)\n            :ARG1-of (z4 / fill-01\n                  :ARG2 (z5 / material\n                        :ARG1-of (z6 / soft-02)))\n            :ARG1-of (z7 / put-01\n                  :ARG0 (z8 / you)\n                  :ARG2 (z9 / seat)\n                  :purpose (z10 / make-02\n                        :ARG0 z8\n                        :ARG1 (z11 / comfortable-02\n                              :ARG0 z2\n                              :ARG2-of (z12 / have-degree-91\n                                    :ARG1 z2\n                                    :ARG3 (z13 / more)))))))", "# ::snt A pillow is a rectangular cushion which you rest your head on when you are in bed.\n(z1 / cushion\n      :mod (z2 / rectangular)\n      :ARG2-of (z3 / rest-01\n            :ARG1 (z4 / head\n                  :part-of (z5 / you))\n            :time (z6 / be-located-at-91\n                  :ARG1 z5\n                  :ARG2 (z7 / bed)))\n      :domain (z8 / pillow))"], "62": ["A cemetery is a place where dead people's bodies or their ashes are buried.", "A graveyard is an area of land, sometimes near a church, where dead people are buried.", "# ::snt A cemetery is a place where dead people's bodies or their ashes are buried.\n(z1 / place\n      :location-of (z2 / bury-01\n            :ARG1 (z3 / or\n                  :op1 (z4 / body\n                        :part-of (z5 / person\n                              :ARG1-of (z6 / die-01)))\n                  :op2 (z7 / ash\n                        :part-of z5)))\n      :location (z8 / cemetery))", "# ::snt A graveyard is an area of land, sometimes near a church, where dead people are buried.\n(z1 / area\n      :consist-of (z2 / land)\n      :domain (z3 / graveyard)\n      :ARG1-of (z4 / near-02\n            :ARG2 (z5 / church)\n            :frequency (z6 / sometimes))\n      :location-of (z7 / bury-01\n            :ARG1 (z8 / person\n                  :ARG1-of (z9 / die-01))))"], "63": ["An automobile is a car.", "A car is a motor vehicle with room for a small number of passengers.", "# ::snt An automobile is a car.\n(z1 / car\n      :domain (z2 / automobile))", "# ::snt A car is a motor vehicle with room for a small number of passengers.\n(z1 / vehicle\n      :mod (z2 / motor)\n      :domain (z3 / car)\n      :ARG0-of (z4 / have-03\n            :ARG1 (z5 / room\n                  :location-of (z6 / passenger\n                        :quant (z7 / number\n                              :mod (z8 / small))))))"], "64": ["Midday is twelve o'clock in the middle of the day.", "Noon is twelve o'clock in the middle of the day.", "# ::snt Midday is twelve o'clock in the middle of the day.\n(z1 / middle\n      :part-of (z2 / day)\n      :domain (z3 / date-entity\n            :time \"12:00\"))", "# ::snt Noon is twelve o'clock in the middle of the day.\n(z1 / equal-01\n      :ARG1 (z2 / date-entity\n            :time \"Noon\")\n      :ARG2 (z3 / date-entity\n            :time \"12:00\"\n            :mod (z4 / middle\n                  :part-of (z5 / day))))"], "65": ["A gem is a jewel or stone that is used in jewellery.", "A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.", "# ::snt A gem is a jewel or stone that is used in jewellery.\n(z1 / or\n      :op1 (z2 / jewel)\n      :op2 (z3 / stone)\n      :domain (z4 / gem)\n      :ARG1-of (z5 / use-01\n            :ARG2 (z6 / jewellery)))", "# ::snt A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.\n(z1 / stone\n      :mod (z2 / precious)\n      :domain (z3 / jewel)\n      :ARG1-of (z4 / use-01\n            :ARG2 (z5 / decorate-01\n                  :ARG0 z3\n                  :ARG1 (z6 / thing\n                        :ARG1-of (z7 / value-02)\n                        :ARG1-of (z8 / wear-01\n                              :ARG0 (z9 / you))\n                        :example (z10 / or\n                              :op1 (z11 / ring)\n                              :op2 (z12 / necklace))))))"], "66": ["Would you like to go out to drink with me tonight.", "I really don't know what to eat tonight so I might go out somewhere.", "# ::snt Would you like to go out to drink with me tonight.\n(z1 / like-02\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / go-out-17\n            :ARG0 z2\n            :purpose (z4 / drink-01\n                  :ARG0 z2\n                  :accompanier (z5 / i)\n                  :time (z6 / date-entity\n                        :dayperiod (z7 / night)\n                        :mod (z8 / today)))))", "# ::snt I really don't know what to eat tonight so I might go out somewhere.\n(z1 / know-01\n      :polarity -\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / thing\n            :ARG1-of (z4 / eat-01\n                  :ARG0 z2\n                  :time (z5 / date-entity\n                        :dayperiod (z6 / night)\n                        :mod (z7 / today))))\n      :ARG1-of (z8 / real-04)\n      :ARG0-of (z9 / cause-01\n            :ARG1 (z10 / possible-01\n                  :ARG1 (z11 / go-02\n                        :ARG0 z2\n                        :ARG4 (z12 / somewhere)))))"], "67": ["I advise you to treat this matter very seriously as it is vital.", "You must take this most seriously, it will affect you.", "# ::snt I advise you to treat this matter very seriously as it is vital.\n(z1 / advise-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / you)\n      :ARG2 (z4 / treat-01\n            :ARG0 z3\n            :ARG1 (z5 / matter\n                  :mod (z6 / this))\n            :ARG2 (z7 / serious-01\n                  :degree (z8 / very))\n            :ARG1-of (z9 / cause-01\n                  :ARG0 (z10 / vital\n                        :domain z5))))", "# ::snt You must take this most seriously, it will affect you.\n(z1 / obligate-01\n      :ARG1 (z2 / you)\n      :ARG2 (z3 / take-04\n            :ARG0 z2\n            :ARG1 (z4 / this)\n            :ARG2 (z5 / serious-01\n                  :ARG2-of (z6 / have-degree-91\n                        :ARG1 z3\n                        :ARG3 (z7 / most))))\n      :ARG1-of (z8 / cause-01\n            :ARG0 (z9 / affect-01\n                  :ARG0 z4\n                  :ARG1 z2)))"], "68": ["When I was going out to meet my friends there was a delay at the train station.", "The train operator announced to the passengers that the train would be delayed.", "# ::snt When I was going out to meet my friends there was a delay at the train station.\n(z1 / delay-01\n      :location (z2 / station\n            :mod (z3 / train))\n      :time (z4 / go-out-17\n            :ARG0 (z5 / i)\n            :purpose (z6 / meet-03\n                  :ARG0 z5\n                  :ARG1 (z7 / person\n                        :ARG0-of (z8 / have-rel-role-91\n                              :ARG1 z5\n                              :ARG2 (z9 / friend))))))", "# ::snt The train operator announced to the passengers that the train would be delayed.\n(z1 / announce-01\n      :ARG0 (z2 / person\n            :ARG0-of (z3 / operate-01\n                  :ARG1 (z4 / train)))\n      :ARG1 (z5 / delay-01\n            :ARG1 z4)\n      :ARG2 (z6 / passenger))"], "69": ["Does music help you to relax, or does it distract you too much.", "Does this sponge look wet or dry to you.", "# ::snt Does music help you to relax, or does it distract you too much.\n(z1 / or\n      :op1 (z2 / help-01\n            :ARG0 (z3 / music)\n            :ARG1 (z4 / relax-01\n                  :ARG1 (z5 / you\n                        :ARG2-of z2)))\n      :op2 (z6 / distract-01\n            :ARG0 z3\n            :ARG1 z5\n            :ARG1-of (z7 / have-quant-91\n                  :ARG2 (z8 / much)\n                  :ARG3 (z9 / too))))", "# ::snt Does this sponge look wet or dry to you.\n(z1 / look-02\n      :ARG0 (z2 / sponge\n            :mod (z3 / this))\n      :ARG1 (z4 / or\n            :op1 (z5 / wet-01\n                  :ARG1 z2)\n            :op2 (z6 / dry-02\n                  :ARG1 z2))\n      :ARG2 (z7 / you)\n      :polarity (z8 / amr-unknown))"], "70": ["You must realise that you will definitely be punished if you play with the alarm.", "He will be harshly punished for setting the fire alarm off.", "# ::snt You must realise that you will definitely be punished if you play with the alarm.\n(z1 / obligate-01\n      :ARG2 (z2 / realize-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / punish-01\n                  :ARG1 z3\n                  :mod (z5 / definite)\n                  :condition (z6 / play-10\n                        :ARG0 z3\n                        :ARG1 (z7 / alarm-01)))))", "# ::snt He will be harshly punished for setting the fire alarm off.\n(z1 / punish-01\n      :ARG1 (z2 / he)\n      :ARG2 (z3 / set-off-05\n            :ARG0 z2\n            :ARG1 (z4 / alarm-01\n                  :topic (z5 / fire)))\n      :ARG1-of (z6 / harsh-02))"], "71": ["I will make you laugh so much that your sides ache.", "When I tell you this you will split your sides laughing.", "# ::snt I will make you laugh so much that your sides ache.\n(z1 / make-02\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / laugh-01\n            :ARG0 (z4 / you)\n            :ARG1-of (z5 / have-quant-91\n                  :ARG2 (z6 / much)\n                  :ARG3 (z7 / so)\n                  :ARG6 (z8 / ache-01\n                        :ARG1 (z9 / side\n                              :part-of z4)))))", "# ::snt When I tell you this you will split your sides laughing.\n(z1 / split-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / side\n            :poss z2)\n      :ARG3 (z4 / laugh-01\n            :ARG0 z2)\n      :time (z5 / tell-01\n            :ARG0 (z6 / i)\n            :ARG1 (z7 / this)\n            :ARG2 z2))"], "72": ["You shouldn't be covering what you really feel.", "There is no point in covering up what you said, we all know.", "# ::snt You shouldn't be covering what you really feel.\n(z1 / recommend-01\n      :polarity -\n      :ARG1 (z2 / cover-01\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / thing\n                  :ARG1-of (z5 / feel-01\n                        :ARG0 z3\n                        :ARG1-of (z6 / real-04)))))", "# ::snt There is no point in covering up what you said, we all know.\n(z1 / point-03\n      :polarity -\n      :ARG1 (z2 / cover-up-04\n            :ARG1 (z3 / thing\n                  :ARG1-of (z4 / say-01\n                        :ARG0 (z5 / you))))\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / know-01\n                  :ARG0 (z8 / we\n                        :mod (z9 / all)))))"], "73": ["Do you want to come with us to the pub behind the hill.", "We are going out for drinks tonight in Salford Quays if you would like to come.", "# ::snt Do you want to come with us to the pub behind the hill.\n(z1 / want-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / come-01\n            :ARG1 z2\n            :ARG4 (z4 / pub\n                  :location (z5 / behind\n                        :op1 (z6 / hill)))\n            :accompanier (z7 / we))\n      :polarity (z8 / amr-unknown))", "# ::snt We are going out for drinks tonight in Salford Quays if you would like to come.\n(z1 / go-out-17\n      :ARG0 (z2 / we)\n      :purpose (z3 / drink-01\n            :ARG0 z2)\n      :time (z4 / date-entity\n            :dayperiod (z5 / night)\n            :mod (z6 / today))\n      :location (z7 / street\n            :name (z8 / name\n                  :op1 \"Salford\"\n                  :op2 \"Quays\"))\n      :condition (z9 / like-02\n            :ARG0 (z10 / you)\n            :ARG1 (z11 / come-01\n                  :ARG1 z10)))"], "74": ["This key doesn't seem to be working, could you give me another.", "I dislike the word quay, it confuses me, I always think of things for locks, there's another one.", "# ::snt This key doesn't seem to be working, could you give me another.\n(z1 / and\n      :op1 (z2 / seem-01\n            :ARG1 (z3 / work-09\n                  :polarity -\n                  :ARG1 (z4 / key\n                        :mod (z5 / this))))\n      :op2 (z6 / give-01\n            :polite +\n            :ARG0 (z7 / you)\n            :ARG1 (z8 / key\n                  :mod (z9 / another))\n            :ARG2 (z10 / i)))", "# ::snt I dislike the word quay, it confuses me, I always think of things for locks, there's another one.\n(z1 / and\n      :op1 (z2 / dislike-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / word\n                  :mod (z5 / bay))\n            :ARG1-of (z6 / cause-01\n                  :ARG0 (z7 / confuse-01\n                        :ARG0 z4\n                        :ARG1 z3))))"], "75": ["The ghost appeared from nowhere and frightened the old man.", "The ghost of Queen Victoria appears to me every night, I don't know why, I don't even like the royals.", "# ::snt The ghost appeared from nowhere and frightened the old man.\n(z1 / and\n      :op1 (z2 / appear-01\n            :ARG1 (z3 / ghost)\n            :source (z4 / nowhere))\n      :op2 (z5 / frighten-01\n            :ARG0 z3\n            :ARG1 (z6 / man\n                  :mod (z7 / old))))", "# ::snt The ghost of Queen Victoria appears to me every night, I don't know why, I don't even like the royals.\n(z1 / and\n      :op1 (z2 / appear-01\n            :ARG1 (z3 / ghost\n                  :poss (z4 / person\n                        :name (z5 / name\n                              :op1 \"Queen\"\n                              :op2 \"Victoria\")))\n            :ARG2 (z6 / i)\n            :frequency (z7 / rate-entity-91\n                  :ARG4 (z8 / date-entity\n                        :dayperiod (z9 / night))))\n      :op2 (z10 / know-01\n            :polarity -\n            :ARG0 z6\n            :ARG1 (z11 / thing\n                  :ARG0-of (z12 / cause-01\n                        :ARG1 z2)))\n      :op3 (z13 / dislike-01\n            :ARG0 z6\n            :ARG1 (z14 / family\n                  :name (z15 / name\n                        :op1 \"Royals\"))\n            :mod (z16 / even)))"], "76": ["You're not a good friend if you're not prepared to be present when I need you.", "A good friend always seems to be present when you need them.", "# ::snt You're not a good friend if you're not prepared to be present when I need you.\n(z1 / have-condition-91\n      :ARG1 (z2 / have-rel-role-91\n            :polarity -\n            :ARG0 (z3 / you)\n            :ARG2 (z4 / friend\n                  :ARG1-of (z5 / good-02)))\n      :ARG2 (z6 / prepare-02\n            :polarity -\n            :ARG0 z3\n            :ARG1 (z7 / present-02\n                  :ARG1 z3\n                  :time (z8 / need-01\n                        :ARG0 (z9 / i)\n                        :ARG1 z3))))", "# ::snt A good friend always seems to be present when you need them.\n(z1 / seem-01\n      :ARG1 (z2 / present-02\n            :ARG1 (z3 / person\n                  :ARG0-of (z4 / have-rel-role-91\n                        :ARG1 (z5 / you)\n                        :ARG2 (z6 / friend\n                              :ARG1-of (z7 / good-02))))\n            :time (z8 / always)\n            :time (z9 / need-01\n                  :ARG0 z5\n                  :ARG1 z3)))"], "77": ["The children crossed the road very safely thanks to the help of the lollipop lady.", "It was feared that the child might not recover, because he was seriously ill.", "# ::snt The children crossed the road very safely thanks to the help of the lollipop lady.\n(z1 / cross-02\n      :ARG0 (z2 / child)\n      :ARG1 (z3 / road)\n      :ARG0-of (z4 / safe-01\n            :degree (z5 / very))\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / help-01\n                  :ARG0 (z8 / lady\n                        :mod (z9 / lollipop))\n                  :ARG2 z2)))", "# ::snt It was feared that the child might not recover, because he was seriously ill.\n(z1 / fear-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / recover-01\n                  :polarity -\n                  :ARG1 (z4 / child))\n            :ARG1-of (z5 / cause-01\n                  :ARG0 (z6 / ill-01\n                        :ARG1 z4\n                        :ARG2 (z7 / serious-02)))))"], "78": ["I have invited a variety of people to my party so it should be interesting.", "A number of invitations were given out to a variety of people inviting them down the pub.", "# ::snt I have invited a variety of people to my party so it should be interesting.\n(z1 / invite-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / person\n            :mod (z4 / variety))\n      :ARG2 (z5 / party-01\n            :ARG0 z2)\n      :ARG0-of (z6 / cause-01\n            :ARG1 (z7 / likely-01\n                  :ARG1 (z8 / interest-01\n                        :ARG2 z5))))", "# ::snt A number of invitations were given out to a variety of people inviting them down the pub.\n(z1 / invite-01\n      :ARG1 (z2 / person\n            :mod (z3 / variety)\n            :ARG0-of (z4 / invite-01\n                  :ARG1 (z5 / they)\n                  :ARG2 (z6 / down-01\n                        :op1 (z7 / pub))))\n      :quant (z8 / number))"], "79": ["I offer my condolences to the parents of John Smith, who was unfortunately murdered.", "I express my sympathy to John Smith's parents following his murder.", "# ::snt I offer my condolences to the parents of John Smith, who was unfortunately murdered.\n(z1 / offer-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / condolence\n            :poss z2)\n      :ARG3 (z4 / person\n            :ARG0-of (z5 / have-rel-role-91\n                  :ARG1 (z6 / person\n                        :name (z7 / name\n                              :op1 \"John\"\n                              :op2 \"Smith\")\n                        :ARG1-of (z8 / murder-01\n                              :ARG2-of (z9 / fortunate-01\n                                    :polarity -)))\n                  :ARG2 (z10 / parent))))", "# ::snt I express my sympathy to John Smith's parents following his murder.\n(z1 / express-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / sympathy\n            :poss z2)\n      :ARG2 (z4 / person\n            :ARG0-of (z5 / have-rel-role-91\n                  :ARG1 (z6 / person\n                        :name (z7 / name\n                              :op1 \"John\"\n                              :op2 \"Smith\"))\n                  :ARG2 (z8 / parent)))\n      :ARG1-of (z9 / follow-01\n            :ARG2 (z10 / murder-01\n                  :ARG1 z6)))"], "80": ["Boats come in all shapes and sizes but they all do the same thing.", "Chairs can be comfy and not comfy, depending on the chair.", "# ::snt Boats come in all shapes and sizes but they all do the same thing.\n(z1 / contrast-01\n      :ARG1 (z2 / come-01\n            :ARG1 (z3 / boat)\n            :manner (z4 / and\n                  :op1 (z5 / shape\n                        :mod (z6 / all))\n                  :op2 (z7 / size\n                        :mod (z8 / all)))))", "# ::snt Chairs can be comfy and not comfy, depending on the chair.\n(z1 / possible-01\n      :ARG1 (z2 / and\n            :op1 (z3 / comfortable-02\n                  :ARG0 (z4 / chair))\n            :op2 (z5 / comfortable-02\n                  :polarity -\n                  :ARG0 z4))\n      :ARG0-of (z6 / depend-01\n            :ARG1 (z7 / chair)))"], "81": ["If you continuously use these products, I guarantee you will look very young.", "I assure you that, by using these products consistently over a long period of time, you will appear really young.", "# ::snt If you continuously use these products, I guarantee you will look very young.\n(z1 / guarantee-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / look-02\n            :ARG0 (z4 / you)\n            :ARG1 (z5 / young\n                  :degree (z6 / very)))\n      :condition (z7 / use-01\n            :ARG0 z4\n            :ARG1 (z8 / product\n                  :mod (z9 / this))\n            :ARG1-of (z10 / continue-01)))", "# ::snt I assure you that, by using these products consistently over a long period of time, you will appear really young.\n(z1 / assure-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / you)\n      :ARG2 (z4 / appear-02\n            :ARG1 (z5 / young\n                  :degree (z6 / really)\n                  :domain z3)\n            :manner (z7 / use-01\n                  :ARG0 z3\n                  :ARG1 (z8 / product\n                        :mod (z9 / this))\n                  :ARG1-of (z10 / consistent-02)\n                  :duration (z11 / period\n                        :ARG1-of (z12 / long-03)\n                        :mod (z13 / time)))))"], "82": ["We ran farther than the other children that day.", "You ran farther than anyone today.", "# ::snt We ran farther than the other children that day.\n(z1 / run-02\n      :ARG0 (z2 / we)\n      :time (z3 / day\n            :mod (z4 / that))\n      :ARG1-of (z5 / have-degree-91\n            :ARG2 (z6 / far)\n            :ARG3 (z7 / more)\n            :ARG4 (z8 / run-02\n                  :ARG0 (z9 / child\n                        :mod (z10 / other))\n                  :time z3)))", "# ::snt You ran farther than anyone today.\n(z1 / run-02\n      :ARG0 (z2 / you)\n      :time (z3 / today)\n      :ARG1-of (z4 / have-degree-91\n            :ARG2 (z5 / far)\n            :ARG3 (z6 / more)\n            :ARG4 (z7 / anyone)))"], "83": ["I always like to have a slice of lemon in my drink especially if it's Coke.", "I like to put a wedge of lemon in my drinks, especially cola.", "# ::snt I always like to have a slice of lemon in my drink especially if it's Coke.\n(z1 / like-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / have-06\n            :ARG0 z2\n            :ARG1 (z4 / lemon\n                  :ARG1-of (z5 / slice-01))\n            :location (z6 / drink\n                  :poss z2)\n            :condition (z7 / company\n                  :name (z8 / name\n                        :op1 \"Coke\")\n                  :mod (z9 / especially)))\n      :time (z10 / always))", "# ::snt I like to put a wedge of lemon in my drinks, especially cola.\n(z1 / like-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / put-01\n            :ARG0 z2\n            :ARG1 (z4 / lemon\n                  :ARG1-of (z5 / wedge-01))\n            :ARG2 (z6 / drink\n                  :poss z2\n                  :ARG2-of (z7 / include-91\n                        :ARG1 (z8 / soda\n                              :mod (z9 / cola)\n                              :mod (z10 / especially))))))"], "84": ["It seems like I've got eczema on my ear doctor, can you recommend something for me.", "I had to go to a chemist for a special rash cream for my ear.", "# ::snt It seems like I've got eczema on my ear doctor, can you recommend something for me.\n(z1 / and\n      :op1 (z2 / seem-01\n            :ARG1 (z3 / have-03\n                  :ARG0 (z4 / i)\n                  :ARG1 (z5 / eczema)\n                  :location (z6 / doctor\n                        :mod (z7 / ear)\n                        :poss z4)))\n      :op2 (z8 / possible-01\n            :ARG1 (z9 / recommend-01\n                  :ARG0 (z10 / you)\n                  :ARG1 (z11 / something)\n                  :ARG2 z4)))", "# ::snt I had to go to a chemist for a special rash cream for my ear.\n(z1 / obligate-01\n      :ARG2 (z2 / go-02\n            :ARG0 (z3 / i)\n            :ARG4 (z4 / chemist)\n            :purpose (z5 / cream\n                  :mod (z6 / rash)\n                  :ARG1-of (z7 / special-02)\n                  :purpose (z8 / ear\n                        :part-of z3))))"], "85": ["I am proud of our nation, well, most of it.", "I think of myself as being part of a nation.", "# ::snt I am proud of our nation, well, most of it.\n(z1 / pride-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / nation\n            :poss (z4 / we)\n            :ARG1-of (z5 / include-91\n                  :ARG2 z3\n                  :ARG3 (z6 / most))))", "# ::snt I think of myself as being part of a nation.\n(z1 / think-01\n      :ARG0 (z2 / i\n            :ARG1-of z1)\n      :ARG2 (z3 / have-part-91\n            :ARG1 (z4 / nation)\n            :ARG2 z2))"], "86": ["There was a heap of rubble left by the builders outside my house this morning.", "Sometimes in a large crowd accidents may happen, which can cause deadly injuries.", "# ::snt There was a heap of rubble left by the builders outside my house this morning.\n(z1 / heap\n      :consist-of (z2 / rubble)\n      :ARG1-of (z3 / leave-12\n            :ARG0 (z4 / person\n                  :ARG0-of (z5 / build-01))\n            :ARG2 (z6 / outside\n                  :op1 (z7 / house\n                        :poss (z8 / i)))\n            :time (z9 / date-entity\n                  :dayperiod (z10 / morning)\n                  :mod (z11 / today))))", "# ::snt Sometimes in a large crowd accidents may happen, which can cause deadly injuries.\n(z1 / possible-01\n      :ARG1 (z2 / accident\n            :time (z3 / sometimes)\n            :location (z4 / crowd\n                  :mod (z5 / large))\n            :ARG0-of (z6 / cause-01\n                  :ARG1 (z7 / injure-01\n                        :ARG0 z2\n                        :ARG0-of (z8 / kill-01))\n                  :ARG1-of (z9 / possible-01))))"], "87": ["Water freezes at a certain temperature, which is zero degrees Celsius.", "The temperature of boiling water is one hundred C and the temperature of ice is 0 C.", "# ::snt Water freezes at a certain temperature, which is zero degrees Celsius.\n(z1 / freeze-01\n      :ARG1 (z2 / water)\n      :location (z3 / temperature\n            :mod (z4 / certain)\n            :ARG1-of (z5 / mean-01\n                  :ARG2 (z6 / temperature-quantity\n                        :quant 0\n                        :scale (z7 / celsius)))))", "# ::snt The temperature of boiling water is one hundred C and the temperature of ice is 0 C.\n(z1 / and\n      :op1 (z2 / temperature-quantity\n            :quant 100\n            :scale (z3 / celsius)\n            :domain (z4 / temperature\n                  :mod (z5 / water\n                        :ARG1-of (z6 / boil-01))))\n      :op2 (z7 / temperature-quantity\n            :quant 0\n            :scale (z8 / celsius)\n            :domain (z9 / temperature\n                  :mod (z10 / ice))))"], "88": ["We got home safely in the end, although it was a long journey.", "Though it took many hours travel, we finally reached our house safely.", "# ::snt We got home safely in the end, although it was a long journey.\n(z1 / get-05\n      :ARG1 (z2 / we)\n      :ARG2 (z3 / home)\n      :manner (z4 / safe-01\n            :ARG1 z2)\n      :time (z5 / end-01)\n      :concession (z6 / journey\n            :ARG1-of (z7 / long-03)\n            :domain z1))", "# ::snt Though it took many hours travel, we finally reached our house safely.\n(z1 / reach-01\n      :ARG0 (z2 / we)\n      :ARG1 (z3 / house\n            :poss z2)\n      :time (z4 / final)\n      :manner (z5 / safe-01\n            :ARG1 z2)\n      :concession (z6 / travel-01\n            :ARG0 z2\n            :duration (z7 / many\n                  :op1 (z8 / temporal-quantity\n                        :quant 1\n                        :unit (z9 / hour)))))"], "89": ["A man called Dave gave his fiancee a large diamond ring for their engagement.", "The man presented a diamond to the woman and asked her to marry him.", "# ::snt A man called Dave gave his fiancee a large diamond ring for their engagement.\n(z1 / give-01\n      :ARG0 (z2 / man\n            :name (z3 / name\n                  :op1 \"Dave\"))\n      :ARG1 (z4 / ring\n            :mod (z5 / diamond)\n            :mod (z6 / large))\n      :ARG2 (z7 / person\n            :ARG0-of (z8 / have-rel-role-91\n                  :ARG1 z2\n                  :ARG2 (z9 / fiancee)))\n      :purpose (z10 / engagement-02\n            :ARG1 z2\n            :ARG2 z7))", "# ::snt The man presented a diamond to the woman and asked her to marry him.\n(z1 / and\n      :op1 (z2 / present-01\n            :ARG0 (z3 / man)\n            :ARG1 (z4 / diamond)\n            :ARG2 (z5 / woman))\n      :op2 (z6 / ask-02\n            :ARG0 z3\n            :ARG1 (z7 / marry-01\n                  :ARG1 z5\n                  :ARG2 z3)\n            :ARG2 z5))"], "90": ["I used to run quite a lot, in fact once I ran for North Tyneside.", "I used to climb lots at school as we had a new climbing wall put in the gym.", "# ::snt I used to run quite a lot, in fact once I ran for North Tyneside.\n(z1 / run-02\n      :ARG0 (z2 / i)\n      :frequency (z3 / lot\n            :degree (z4 / quite))\n      :time (z5 / use-03)\n      :ARG2-of (z6 / include-91\n            :ARG1 (z7 / run-02\n                  :frequency 1\n                  :ARG0 z2\n                  :ARG1 (z8 / local-region\n                        :name (z9 / name\n                              :op1 \"North\"\n                              :op2 \"Tyneside\"))\n                  :mod (z10 / in-fact))))", "# ::snt I used to climb lots at school as we had a new climbing wall put in the gym.\n(z1 / climb-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / lot)\n      :time (z4 / use-03)\n      :location (z5 / school)\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / have-04\n                  :ARG0 (z8 / we)\n                  :ARG1 (z9 / put-01\n                        :ARG1 (z10 / wall\n                              :mod (z11 / climb-01)\n                              :ARG1-of (z12 / new-01))\n                        :ARG2 (z13 / gym)))))"], "91": ["I love to laugh as it makes me happy as well as those around me.", "I thought we bargained that it would only cost me a pound.", "# ::snt I love to laugh as it makes me happy as well as those around me.\n(z1 / love-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / laugh-01\n            :ARG0 z2)\n      :ARG1-of (z4 / cause-01\n            :ARG0 (z5 / make-02\n                  :ARG0 z3\n                  :ARG1 (z6 / happy-01\n                        :ARG1 (z7 / and\n                              :op1 z2\n                              :op2 (z8 / person\n                                    :location (z9 / around\n                                          :op1 z2)\n                                    :mod (z10 / that)))))))", "# ::snt I thought we bargained that it would only cost me a pound.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / bargain-01\n            :ARG0 (z4 / we)\n            :ARG1 (z5 / cost-01\n                  :ARG1 (z6 / it)\n                  :ARG2 (z7 / monetary-quantity\n                        :quant 1\n                        :unit (z8 / pound)\n                        :mod (z9 / only))\n                  :ARG3 z2)))"], "92": ["Because I am the eldest one I should be more responsible.", "Just because of my age, people shouldn't think I'm a responsible adult, but they do.", "# ::snt Because I am the eldest one I should be more responsible.\n(z1 / cause-01\n      :ARG0 (z2 / have-degree-91\n            :ARG1 (z3 / i)\n            :ARG2 (z4 / old)\n            :ARG3 (z5 / most))\n      :ARG1 (z6 / recommend-01\n            :ARG1 (z7 / have-degree-91\n                  :ARG1 z3\n                  :ARG2 (z8 / responsible-02\n                        :ARG1 z3)\n                  :ARG3 (z9 / more))))", "# ::snt Just because of my age, people shouldn't think I'm a responsible adult, but they do.\n(z1 / cause-01\n      :ARG0 (z2 / age-01\n            :ARG1 (z3 / i))\n      :ARG1 (z4 / contrast-01\n            :ARG1 (z5 / recommend-01\n                  :polarity -\n                  :ARG1 (z6 / think-01\n                        :ARG0 (z7 / person)\n                        :ARG1 (z8 / adult\n                              :ARG0-of (z9 / responsible-01)\n                              :domain z3))))\n      :ARG2 z6)"], "93": ["I need to dash into the kitchen because I think my chip pan is on fire.", "In the event of a chip pan fire follow the instructions on the safety note.", "# ::snt I need to dash into the kitchen because I think my chip pan is on fire.\n(z1 / dash-01\n      :ARG0 (z2 / i)\n      :destination (z3 / kitchen)\n      :ARG1-of (z4 / cause-01\n            :ARG0 (z5 / think-01\n                  :ARG0 z2\n                  :ARG1 (z6 / on-fire-08\n                        :ARG1 (z7 / pan\n                              :mod (z8 / chip)\n                              :poss z2)))))", "# ::snt In the event of a chip pan fire follow the instructions on the safety note.\n(z1 / follow-02\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / instruct-01\n            :location (z4 / note\n                  :topic (z5 / safe-01)))\n      :condition (z6 / fire-04\n            :mod (z7 / pan\n                  :mod (z8 / chip))))"], "94": ["Peter was a very large youth, whose size intimidated most people, much to his delight.", "Now I wouldn't say he was fat, but I'd certainly say he was one of the larger boys.", "# ::snt Peter was a very large youth, whose size intimidated most people, much to his delight.\n(z1 / youth\n      :mod (z2 / youth\n            :mod (z3 / large\n                  :degree (z4 / very)))\n      :domain (z5 / person\n            :name (z6 / name\n                  :op1 \"Peter\"))\n      :poss-of (z7 / size\n            :ARG0-of (z8 / intimidate-01\n                  :ARG1 (z9 / person\n                        :mod (z10 / most))\n                  :ARG0-of (z11 / delight-01\n                        :ARG1 z5\n                        :degree (z12 / much)))))", "# ::snt Now I wouldn't say he was fat, but I'd certainly say he was one of the larger boys.\n(z1 / contrast-01\n      :ARG1 (z2 / say-01\n            :polarity -\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / fat-03\n                  :ARG1 (z5 / he)))\n      :ARG2 (z6 / say-01\n            :ARG0 z3\n            :ARG1 (z7 / include-91\n                  :ARG1 z5\n                  :ARG2 (z8 / boy\n                        :ARG1-of (z9 / have-degree-91\n                              :ARG2 (z10 / large)\n                              :ARG3 (z11 / more))))\n            :mod (z12 / certain)))"], "95": ["I'm going to buy a grey jumper today, in half an hour.", "That's a nice grey top, where did you get it from.", "# ::snt I'm going to buy a grey jumper today, in half an hour.\n(z1 / buy-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / jumper\n            :ARG1-of (z4 / gray-02))\n      :time (z5 / today)\n      :time (z6 / after\n            :op1 (z7 / now)\n            :quant (z8 / temporal-quantity\n                  :quant \"0.5\"\n                  :unit (z9 / hour))))", "# ::snt That's a nice grey top, where did you get it from.\n(z1 / and\n      :op1 (z2 / top\n            :ARG1-of (z3 / gray-02)\n            :ARG1-of (z4 / nice-01)\n            :domain (z5 / that))\n      :op2 (z6 / get-01\n            :ARG0 (z7 / you)\n            :ARG1 z2\n            :ARG2 (z8 / amr-unknown)))"], "96": ["We got soaked in the rain today, but now we are nice and dry.", "I was absolutely soaking wet last night, I drove my bike through the worst weather.", "# ::snt We got soaked in the rain today, but now we are nice and dry.\n(z1 / contrast-01\n      :ARG1 (z2 / soak-01\n            :ARG0 (z3 / rain-01)\n            :ARG1 (z4 / we)\n            :time (z5 / today))\n      :ARG2 (z6 / and\n            :op1 (z7 / nice-01\n                  :ARG1 z4)\n            :op2 (z8 / dry-02\n                  :ARG1 z4)\n            :time (z9 / now)))", "# ::snt I was absolutely soaking wet last night, I drove my bike through the worst weather.\n(z1 / and\n      :op1 (z2 / soak-01\n            :ARG1 (z3 / i)\n            :ARG2 (z4 / wet-01\n                  :ARG1 z3)\n            :degree (z5 / absolute)\n            :time (z6 / date-entity\n                  :dayperiod (z7 / night)\n                  :mod (z8 / yesterday)))\n      :op2 (z9 / drive-01\n            :ARG0 z3\n            :ARG1 (z10 / bike\n                  :poss z3)\n            :path (z11 / weather\n                  :ARG1-of (z12 / have-degree-91\n                        :ARG2 (z13 / bad-07)\n                        :ARG3 (z14 / most)))))"], "97": ["Global warming is what everyone is worrying about today.", "The problem of global warming is a concern to every country in the world at the moment.", "# ::snt Global warming is what everyone is worrying about today.\n(z1 / worry-01\n      :ARG0 (z2 / warm-01\n            :ARG1 (z3 / globe))\n      :ARG1 (z4 / everyone)\n      :time (z5 / today))", "# ::snt The problem of global warming is a concern to every country in the world at the moment.\n(z1 / concern-01\n      :ARG0 (z2 / problem\n            :topic (z3 / warm-01\n                  :ARG1 (z4 / globe)))\n      :ARG1 (z5 / country\n            :mod (z6 / every)\n            :location (z7 / world))\n      :time (z8 / moment))"], "98": ["He was harshly punished for setting the fire alarms off.", "He delayed his response, in order to create a tense atmosphere.", "# ::snt He was harshly punished for setting the fire alarms off.\n(z1 / punish-01\n      :ARG1 (z2 / he)\n      :ARG2 (z3 / set-off-04\n            :ARG0 z2\n            :ARG1 (z4 / alarm-01\n                  :topic (z5 / fire)))\n      :ARG1-of (z6 / harsh-02))", "# ::snt He delayed his response, in order to create a tense atmosphere.\n(z1 / delay-01\n      :ARG0 (z2 / he)\n      :ARG1 (z3 / respond-01\n            :ARG0 z2)\n      :purpose (z4 / create-01\n            :ARG0 z2\n            :ARG1 (z5 / atmosphere\n                  :ARG1-of (z6 / tense-03))))"], "99": ["Midday is twelve o'clock in the middle of the day.", "Noon is twelve o'clock in the middle of the day.", "# ::snt Midday is twelve o'clock in the middle of the day.\n(z1 / middle\n      :part-of (z2 / day)\n      :domain (z3 / date-entity\n            :time \"12:00\"))", "# ::snt Noon is twelve o'clock in the middle of the day.\n(z1 / equal-01\n      :ARG1 (z2 / date-entity\n            :time \"Noon\")\n      :ARG2 (z3 / date-entity\n            :time \"12:00\"\n            :mod (z4 / middle\n                  :part-of (z5 / day))))"], "100": ["That's not a very good car, on the other hand mine is great.", "This is a terrible noise level for a new car.", "# ::snt That's not a very good car, on the other hand mine is great.\n(z1 / contrast-01\n      :ARG1 (z2 / car\n            :ARG1-of (z3 / good-02\n                  :polarity -\n                  :degree (z4 / very))\n            :domain (z5 / car\n                  :mod (z6 / that)))\n      :ARG2 (z7 / great\n            :domain (z8 / car\n                  :poss (z9 / i))))", "# ::snt This is a terrible noise level for a new car.\n(z1 / level\n      :mod (z2 / noise)\n      :ARG1-of (z3 / terrible-01)\n      :domain (z4 / this)\n      :beneficiary (z5 / car\n            :ARG1-of (z6 / new-01)))"], "101": ["There was a terrible accident, a pileup, on the road today.", "It was a terrible accident, no one believed it was possible.", "# ::snt There was a terrible accident, a pileup, on the road today.\n(z1 / accident\n      :ARG1-of (z2 / terrible-01)\n      :ARG1-of (z3 / pile-up-02)\n      :location (z4 / road)\n      :time (z5 / today))", "# ::snt It was a terrible accident, no one believed it was possible.\n(z1 / and\n      :op1 (z2 / accident\n            :ARG1-of (z3 / terrible-01)\n            :domain (z4 / it))\n      :op2 (z5 / believe-01\n            :ARG0 (z6 / no-one)\n            :ARG1 (z7 / possible-01\n                  :ARG1 z2)))"], "102": ["After hours of getting lost we eventually arrived at the hotel.", "After walking against the strong wind for hours he finally returned home safely.", "# ::snt After hours of getting lost we eventually arrived at the hotel.\n(z1 / arrive-01\n      :ARG1 (z2 / we)\n      :ARG4 (z3 / hotel)\n      :time (z4 / after\n            :op1 (z5 / get-03\n                  :ARG1 z2\n                  :ARG2 (z6 / lost)\n                  :duration (z7 / multiple\n                        :op1 (z8 / temporal-quantity\n                              :quant 1\n                              :unit (z9 / hour)))))\n      :time (z10 / eventual))", "# ::snt After walking against the strong wind for hours he finally returned home safely.\n(z1 / return-01\n      :ARG1 (z2 / he)\n      :ARG4 (z3 / home)\n      :purpose (z4 / safe-01\n            :ARG1 z2)\n      :time (z5 / final)\n      :time (z6 / after\n            :op1 (z7 / walk-01\n                  :ARG0 z2\n                  :ARG2 (z8 / against\n                        :op1 (z9 / wind\n                              :ARG1-of (z10 / strong-02)))\n                  :duration (z11 / multiple\n                        :op1 (z12 / temporal-quantity\n                              :quant 1\n                              :unit (z13 / hour))))))"], "103": ["The first thing I do in a morning is make myself a cup of coffee.", "The first thing I do in the morning is have a cup of coffee.", "# ::snt The first thing I do in a morning is make myself a cup of coffee.\n(z1 / make-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / coffee\n            :quant (z4 / volume-quantity\n                  :quant 1\n                  :unit (z5 / cup)))\n      :ord (z6 / ordinal-entity\n            :value 1)\n      :time (z7 / date-entity\n            :dayperiod (z8 / morning)))", "# ::snt The first thing I do in the morning is have a cup of coffee.\n(z1 / coffee\n      :quant (z2 / volume-quantity\n            :quant 1\n            :unit (z3 / cup))\n      :ARG1-of (z4 / do-02\n            :ARG0 (z5 / i)\n            :time (z6 / date-entity\n                  :dayperiod (z7 / morning))\n            :ord (z8 / ordinal-entity\n                  :value 1)))"], "104": ["Someone spilt a drink accidentally on my shirt, so I changed it.", "It appears to have shrunk, it wasn't that size before I washed it.", "# ::snt Someone spilt a drink accidentally on my shirt, so I changed it.\n(z1 / spill-01\n      :ARG0 (z2 / someone)\n      :ARG1 (z3 / drink)\n      :ARG2 (z4 / shirt\n            :poss (z5 / i))\n      :manner (z6 / accidental)\n      :ARG0-of (z7 / cause-01\n            :ARG1 (z8 / change-01\n                  :ARG0 z5\n                  :ARG1 z4)))", "# ::snt It appears to have shrunk, it wasn't that size before I washed it.\n(z1 / and\n      :op1 (z2 / appear-02\n            :ARG1 (z3 / shrink-01\n                  :ARG1 (z4 / it)))\n      :op2 (z5 / size-01\n            :polarity -\n            :ARG1 z4\n            :ARG2 (z6 / that)\n            :time (z7 / before\n                  :op1 (z8 / wash-01\n                        :ARG0 (z9 / i)\n                        :ARG1 z4))))"], "105": ["I'm worried most seriously about the presentation, not the essay.", "It is mostly very difficult to gain full marks in today's exam.", "# ::snt I'm worried most seriously about the presentation, not the essay.\n(z1 / worry-02\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / and\n            :op1 (z4 / presentation)\n            :op2 (z5 / essay\n                  :polarity -))\n      :ARG1-of (z6 / serious-02\n            :ARG2-of (z7 / have-degree-91\n                  :ARG1 z1\n                  :ARG3 (z8 / most))))", "# ::snt It is mostly very difficult to gain full marks in today's exam.\n(z1 / difficult\n      :domain (z2 / gain-02\n            :ARG1 (z3 / mark\n                  :ARG1-of (z4 / full-09))\n            :ARG2 (z5 / exam\n                  :time (z6 / today)))\n      :mod (z7 / most)\n      :degree (z8 / very))"], "106": ["It is mostly very difficult to gain full marks in today's exam.", "The exam was really difficult, I've got no idea if I'm going to pass.", "# ::snt It is mostly very difficult to gain full marks in today's exam.\n(z1 / difficult\n      :domain (z2 / gain-02\n            :ARG1 (z3 / mark\n                  :ARG1-of (z4 / full-09))\n            :ARG2 (z5 / exam\n                  :time (z6 / today)))\n      :mod (z7 / most)\n      :degree (z8 / very))", "# ::snt The exam was really difficult, I've got no idea if I'm going to pass.\n(z1 / and\n      :op1 (z2 / difficult\n            :domain (z3 / exam)\n            :degree (z4 / really))\n      :op2 (z5 / have-03\n            :polarity -\n            :ARG0 (z6 / i)\n            :ARG1 (z7 / idea\n                  :topic (z8 / truth-value\n                        :polarity-of (z9 / pass-07\n                              :ARG1 z6)))))"], "107": ["Meet me on the hill behind the church in half an hour.", "Join me on the hill at the back of the church in thirty minutes time.", "# ::snt Meet me on the hill behind the church in half an hour.\n(z1 / meet-03\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / i)\n      :location (z4 / hill\n            :location (z5 / behind\n                  :op1 (z6 / church)))\n      :time (z7 / after\n            :op1 (z8 / now)\n            :quant (z9 / temporal-quantity\n                  :quant \"0.5\"\n                  :unit (z10 / hour))))", "# ::snt Join me on the hill at the back of the church in thirty minutes time.\n(z1 / join-04\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / i)\n      :location (z4 / hill\n            :location (z5 / back\n                  :part-of (z6 / church)))\n      :time (z7 / after\n            :op1 (z8 / now)\n            :quant (z9 / temporal-quantity\n                  :quant 30\n                  :unit (z10 / minute))))"], "108": ["If you don't console with a friend, there is a chance you may hurt their feelings.", "One of the qualities of a good friend is the ability to console.", "# ::snt If you don't console with a friend, there is a chance you may hurt their feelings.\n(z1 / chance-02\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / hurt-01\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / feel-01\n                        :ARG0 (z6 / person\n                              :ARG0-of (z7 / have-rel-role-91\n                                    :ARG1 z4\n                                    :ARG2 (z8 / friend)))))))", "# ::snt One of the qualities of a good friend is the ability to console.\n(z1 / capable-01\n      :ARG2 (z2 / console-01)\n      :ARG1-of (z3 / include-91\n            :ARG2 (z4 / quality\n                  :poss (z5 / person\n                        :ARG0-of (z6 / have-rel-role-91\n                              :ARG2 (z7 / friend))\n                        :ARG1-of (z8 / good-02)))))"], "109": ["We tried to bargain with him but it made no difference, he still didn't change his mind.", "I tried bargaining with him, but he just wouldn't listen.", "# ::snt We tried to bargain with him but it made no difference, he still didn't change his mind.\n(z1 / contrast-01\n      :ARG1 (z2 / try-01\n            :ARG0 (z3 / we)\n            :ARG1 (z4 / bargain-01\n                  :ARG0 z3\n                  :ARG2 (z5 / he))))", "# ::snt I tried bargaining with him, but he just wouldn't listen.\n(z1 / contrast-01\n      :ARG1 (z2 / try-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / bargain-01\n                  :ARG0 z3\n                  :ARG2 (z5 / he))))"], "110": ["It gives me great pleasure to announce the winner of this year's beauty pageant.", "It's a real pleasure to tell you who has won our annual beauty parade.", "# ::snt It gives me great pleasure to announce the winner of this year's beauty pageant.\n(z1 / pleasure\n      :mod (z2 / great)\n      :poss (z3 / i)\n      :topic (z4 / announce-01\n            :ARG0 z3\n            :ARG1 (z5 / person\n                  :ARG0-of (z6 / win-01\n                        :ARG1 (z7 / pageant\n                              :mod (z8 / beauty)\n                              :time (z9 / year\n                                    :mod (z10 / this)))))))", "# ::snt It's a real pleasure to tell you who has won our annual beauty parade.\n(z1 / pleasure\n      :ARG1-of (z2 / real-04)\n      :domain (z3 / tell-01\n            :ARG1 (z4 / person\n                  :ARG0-of (z5 / win-01\n                        :ARG1 (z6 / parade-02\n                              :ARG1 (z7 / beauty)\n                              :ARG2 (z8 / we)\n                              :frequency (z9 / rate-entity-91\n                                    :ARG3 (z10 / temporal-quantity\n                                          :quant 1\n                                          :unit (z11 / year))))))\n            :ARG2 (z12 / you)))"], "111": ["They said they were hoping to go to America on holiday.", "I like to cover myself up in lots of layers, I don't like the cold.", "# ::snt They said they were hoping to go to America on holiday.\n(z1 / say-01\n      :ARG0 (z2 / they)\n      :ARG1 (z3 / hope-01\n            :ARG0 z2\n            :ARG1 (z4 / go-02\n                  :ARG0 z2\n                  :ARG4 (z5 / country\n                        :name (z6 / name\n                              :op1 \"America\"))\n                  :time (z7 / holiday))))", "# ::snt I like to cover myself up in lots of layers, I don't like the cold.\n(z1 / contrast-01\n      :ARG1 (z2 / like-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / cover-02\n                  :ARG0 z3\n                  :ARG1 z3\n                  :ARG2 (z5 / layer\n                        :quant (z6 / lot)))))"], "112": ["Will I have to drive far to get to the nearest petrol station.", "Is it much farther for me to drive to the next gas station.", "# ::snt Will I have to drive far to get to the nearest petrol station.\n(z1 / obligate-01\n      :polarity (z2 / amr-unknown)\n      :ARG2 (z3 / drive-01\n            :ARG0 (z4 / i)\n            :ARG1 (z5 / far)\n            :purpose (z6 / get-05\n                  :ARG1 z4\n                  :ARG2 (z7 / station\n                        :mod (z8 / petrol)\n                        :ARG1-of (z9 / near-02\n                              :ARG2 z4\n                              :ARG2-of (z10 / have-degree-91\n                                    :ARG1 z7\n                                    :ARG3 (z11 / most)))))))", "# ::snt Is it much farther for me to drive to the next gas station.\n(z1 / have-degree-91\n      :ARG1 (z2 / drive-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / station\n                  :mod (z5 / gas)\n                  :mod (z6 / next)))\n      :ARG2 (z7 / far)\n      :ARG3 (z8 / more\n            :quant (z9 / much)))"], "113": ["I think I know her from somewhere because she has a familiar face.", "You have a very familiar face, where do I know you from.", "# ::snt I think I know her from somewhere because she has a familiar face.\n(z1 / think-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / know-02\n            :ARG0 z2\n            :ARG1 (z4 / she)\n            :source (z5 / somewhere))\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / have-03\n                  :ARG0 z4\n                  :ARG1 (z8 / face\n                        :ARG1-of (z9 / familiarize-01\n                              :ARG2 z2)))))", "# ::snt You have a very familiar face, where do I know you from.\n(z1 / and\n      :op1 (z2 / have-03\n            :ARG0 (z3 / you)\n            :ARG1 (z4 / face\n                  :ARG1-of (z5 / familiarize-01\n                        :degree (z6 / very))))\n      :op2 (z7 / know-02\n            :ARG0 (z8 / i)\n            :ARG1 z3\n            :source (z9 / amr-unknown)))"], "114": ["I am sorry but I can't go out as I have a heap of work to do.", "I've a heap of things to finish so I can't go out I'm afraid.", "# ::snt I am sorry but I can't go out as I have a heap of work to do.\n(z1 / contrast-01\n      :ARG1 (z2 / sorry-01\n            :ARG1 (z3 / i))\n      :ARG2 (z4 / possible-01\n            :polarity -\n            :ARG1 (z5 / go-out-17\n                  :ARG0 z3)\n            :ARG1-of (z6 / cause-01\n                  :ARG0 (z7 / work-01\n                        :ARG0 z3\n                        :quant (z8 / heap)\n                        :ARG1-of (z9 / do-02\n                              :ARG0 z3)))))", "# ::snt I've a heap of things to finish so I can't go out I'm afraid.\n(z1 / cause-01\n      :ARG0 (z2 / have-03\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / thing\n                  :quant (z5 / heap)\n                  :ARG1-of (z6 / finish-01\n                        :ARG0 z3)))\n      :ARG1 (z7 / possible-01\n            :polarity -\n            :ARG1 (z8 / go-out-17\n                  :ARG0 z3)\n            :ARG1-of (z9 / fear-01\n                  :ARG0 z3)))"], "115": ["The responsible man felt very guilty when he crashed into the back of someone's car.", "A slow driver can be annoying even though they are driving safely.", "# ::snt The responsible man felt very guilty when he crashed into the back of someone's car.\n(z1 / feel-01\n      :ARG0 (z2 / man\n            :ARG0-of (z3 / responsible-01))\n      :ARG1 (z4 / guilty-01\n            :ARG1 z2\n            :degree (z5 / very))\n      :time (z6 / crash-01\n            :ARG0 z2\n            :ARG1 (z7 / back\n                  :part-of (z8 / car\n                        :poss (z9 / someone)))))", "# ::snt A slow driver can be annoying even though they are driving safely.\n(z1 / possible-01\n      :ARG1 (z2 / annoy-01\n            :ARG0 (z3 / person\n                  :ARG0-of (z4 / drive-01)\n                  :ARG1-of (z5 / slow-05))\n            :concession (z6 / drive-01\n                  :ARG0 z3\n                  :ARG1-of (z7 / safe-01))))"], "116": ["Get that wet dog off my brand new white sofa.", "Make that wet hound get off my white couch, I only just bought it.", "# ::snt Get that wet dog off my brand new white sofa.\n(z1 / get-05\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / dog\n            :ARG1-of (z4 / wet-01)\n            :mod (z5 / that))\n      :ARG2 (z6 / off\n            :op1 (z7 / sofa\n                  :ARG1-of (z8 / new-01\n                        :degree (z9 / brand))\n                  :ARG1-of (z10 / white-03)\n                  :poss (z11 / i))))", "# ::snt Make that wet hound get off my white couch, I only just bought it.\n(z1 / make-02\n      :mode imperative\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / get-05\n            :ARG1 (z4 / hound\n                  :ARG1-of (z5 / wet-01)\n                  :mod (z6 / that))\n            :ARG2 (z7 / off\n                  :op1 (z8 / couch\n                        :ARG1-of (z9 / white-03)\n                        :poss (z10 / i)))))"], "117": ["He fought in the war in Iraq before being killed in a car crash.", "The prejudice I suffered whilst on holiday in Iraq was quite alarming.", "# ::snt He fought in the war in Iraq before being killed in a car crash.\n(z1 / fight-01\n      :ARG0 (z2 / he)\n      :ARG2 (z3 / war\n            :location (z4 / country\n                  :name (z5 / name\n                        :op1 \"Iraq\")))\n      :time (z6 / before\n            :op1 (z7 / kill-01\n                  :ARG1 z2\n                  :ARG2 (z8 / crash-01\n                        :ARG1 (z9 / car)))))", "# ::snt The prejudice I suffered whilst on holiday in Iraq was quite alarming.\n(z1 / alarm-01\n      :ARG0 (z2 / prejudice-01\n            :ARG1 (z3 / i)\n            :ARG1-of (z4 / suffer-01\n                  :ARG0 z3\n                  :time (z5 / holiday-01\n                        :ARG0 z3\n                        :ARG1 (z6 / country\n                              :name (z7 / name\n                                    :op1 \"Iraq\")))))\n      :degree (z8 / quite))"], "118": ["The cat was hungry so he went into the back garden to find lunch.", "The hen walked about in the yard eating tasty grain.", "# ::snt The cat was hungry so he went into the back garden to find lunch.\n(z1 / hunger-01\n      :ARG0 (z2 / cat)\n      :ARG0-of (z3 / cause-01\n            :ARG1 (z4 / go-02\n                  :ARG0 z2\n                  :ARG4 (z5 / garden\n                        :mod (z6 / back))\n                  :purpose (z7 / find-01\n                        :ARG0 z2\n                        :ARG1 (z8 / lunch)))))", "# ::snt The hen walked about in the yard eating tasty grain.\n(z1 / walk-01\n      :ARG0 (z2 / hen\n            :ARG0-of (z3 / eat-01\n                  :ARG1 (z4 / grain\n                        :mod (z5 / tasty))))\n      :ARG2 (z6 / about\n            :op1 (z7 / yard)))"], "119": ["My bedroom wall is lemon coloured but my mother says it is yellow.", "Roses can be different colours, it has to be said red is the best though.", "# ::snt My bedroom wall is lemon coloured but my mother says it is yellow.\n(z1 / contrast-01\n      :ARG1 (z2 / color-01\n            :ARG1 (z3 / wall\n                  :part-of (z4 / bedroom\n                        :poss (z5 / i)))\n            :ARG2 (z6 / lemon))\n      :ARG2 (z7 / say-01\n            :ARG0 (z8 / person\n                  :ARG0-of (z9 / have-rel-role-91\n                        :ARG1 z5\n                        :ARG2 (z10 / mother)))\n            :ARG1 (z11 / yellow\n                  :domain z3)))", "# ::snt Roses can be different colours, it has to be said red is the best though.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / differ-02\n                  :ARG1 (z4 / color\n                        :domain (z5 / rose)))))"], "120": ["Would you like to drink this wine with your meal.", "Will you drink a glass of wine while you eat.", "# ::snt Would you like to drink this wine with your meal.\n(z1 / like-02\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / drink-01\n            :ARG0 z2\n            :ARG1 (z4 / wine\n                  :mod (z5 / this))\n            :accompanier (z6 / meal\n                  :poss z2))\n      :polarity (z7 / amr-unknown))", "# ::snt Will you drink a glass of wine while you eat.\n(z1 / drink-01\n      :ARG0 (z2 / you)\n      :ARG1 (z3 / wine\n            :quant (z4 / volume-quantity\n                  :quant 1\n                  :unit (z5 / glass)))\n      :time (z6 / eat-01\n            :ARG0 z2)\n      :polarity (z7 / amr-unknown))"], "121": ["Roses can be different colours, it has to be said red is the best though.", "Roses come in many varieties and colours, but yellow is my favourite.", "# ::snt Roses can be different colours, it has to be said red is the best though.\n(z1 / contrast-01\n      :ARG1 (z2 / possible-01\n            :ARG1 (z3 / differ-02\n                  :ARG1 (z4 / color\n                        :domain (z5 / rose)))))", "# ::snt Roses come in many varieties and colours, but yellow is my favourite.\n(z1 / contrast-01\n      :ARG1 (z2 / come-01\n            :ARG1 (z3 / rose)\n            :manner (z4 / and\n                  :op1 (z5 / variety\n                        :quant (z6 / many))\n                  :op2 (z7 / color\n                        :quant z6))))"], "122": ["Flies can also carry a lot of disease and cause maggots.", "I dry my hair after I wash it or I will get ill.", "# ::snt Flies can also carry a lot of disease and cause maggots.\n(z1 / possible-01\n      :ARG1 (z2 / and\n            :op1 (z3 / carry-01\n                  :ARG0 (z4 / fly-01)\n                  :ARG1 (z5 / disease\n                        :quant (z6 / lot)))\n            :op2 (z7 / cause-01\n                  :ARG0 z4\n                  :ARG1 (z8 / maggot)))\n      :mod (z9 / also))", "# ::snt I dry my hair after I wash it or I will get ill.\n(z1 / dry-02\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / hair\n            :part-of z2)\n      :time (z4 / after\n            :op1 (z5 / wash-01\n                  :ARG0 z2\n                  :ARG1 z3))\n      :condition-of (z6 / ill-01\n            :ARG1 z2\n            :ARG2 z1))"], "123": ["Could you climb up the tree and save my cat from jumping please.", "Can you get up that tree and rescue my cat otherwise it might jump.", "# ::snt Could you climb up the tree and save my cat from jumping please.\n(z1 / possible-01\n      :polite +\n      :ARG1 (z2 / and\n            :op1 (z3 / climb-01\n                  :ARG0 (z4 / you)\n                  :ARG1 (z5 / tree)\n                  :direction (z6 / up))\n            :op2 (z7 / save-02\n                  :ARG0 z4\n                  :ARG1 (z8 / cat\n                        :poss (z9 / i))\n                  :ARG2 (z10 / jump-03\n                        :ARG0 z8))))", "# ::snt Can you get up that tree and rescue my cat otherwise it might jump.\n(z1 / possible-01\n      :ARG1 (z2 / and\n            :op1 (z3 / get-05\n                  :ARG0 (z4 / you\n                        :ARG1-of z3)\n                  :ARG2 (z5 / up-03\n                        :ARG1 z4\n                        :ARG2 (z6 / tree\n                              :mod (z7 / that))))\n            :op2 (z8 / rescue-01\n                  :ARG0 z4\n                  :ARG1 (z9 / cat\n                        :poss (z10 / i))))\n      :condition-of (z11 / possible-01\n            :ARG1 (z12 / jump-03\n                  :ARG0 (z13 / it))))"], "124": ["The pleasure that I get from studying, is that I learn new things.", "I have a doubt about this exam, we never got to study for it.", "# ::snt The pleasure that I get from studying, is that I learn new things.\n(z1 / pleasure\n      :ARG1-of (z2 / get-01\n            :ARG0 (z3 / i)\n            :ARG2 (z4 / study-01\n                  :ARG0 z3))\n      :domain (z5 / learn-01\n            :ARG0 z3\n            :ARG1 (z6 / thing\n                  :ARG1-of (z7 / new-01))))", "# ::snt I have a doubt about this exam, we never got to study for it.\n(z1 / doubt-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / exam\n            :mod (z4 / this))\n      :ARG1-of (z5 / cause-01\n            :ARG0 (z6 / study-01\n                  :polarity -\n                  :ARG0 (z7 / we)\n                  :ARG1 z3\n                  :time (z8 / ever))))"], "125": ["The perpetrators of war crimes are rotten to the core.", "There are many global issues that everybody should be aware of, such as the threat of terrorism.", "# ::snt The perpetrators of war crimes are rotten to the core.\n(z1 / rot-01\n      :ARG1 (z2 / person\n            :ARG0-of (z3 / perpetrate-01\n                  :ARG1 (z4 / crime-02\n                        :mod (z5 / war))))\n      :degree (z6 / core))", "# ::snt There are many global issues that everybody should be aware of, such as the threat of terrorism.\n(z1 / issue-02\n      :ARG0 (z2 / globe)\n      :quant (z3 / many)\n      :ARG1-of (z4 / realize-01\n            :ARG0 (z5 / everybody)\n            :ARG1-of (z6 / recommend-01))\n      :example (z7 / threaten-01\n            :ARG1 (z8 / terrorism)))"], "126": ["The damp was mostly in the very corner of the room.", "The young lady was somewhat partially burnt from the sun.", "# ::snt The damp was mostly in the very corner of the room.\n(z1 / damp\n      :location (z2 / corner\n            :mod (z3 / very)\n            :part-of (z4 / room)\n            :mod (z5 / most)))", "# ::snt The young lady was somewhat partially burnt from the sun.\n(z1 / burn-01\n      :ARG0 (z2 / sun)\n      :ARG1 (z3 / lady\n            :mod (z4 / young))\n      :degree (z5 / part\n            :degree (z6 / somewhat)))"], "127": ["We often ran to school because we were always late.", "I knew I was late for my class so I ran all the way to school.", "# ::snt We often ran to school because we were always late.\n(z1 / run-02\n      :ARG0 (z2 / we)\n      :ARG1 (z3 / school)\n      :frequency (z4 / often)\n      :ARG1-of (z5 / cause-01\n            :ARG0 (z6 / late-02\n                  :ARG1 z2\n                  :time (z7 / always))))", "# ::snt I knew I was late for my class so I ran all the way to school.\n(z1 / know-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / late-02\n            :ARG1 z2\n            :ARG2 (z4 / class\n                  :poss z2))\n      :ARG0-of (z5 / cause-01\n            :ARG1 (z6 / run-02\n                  :ARG0 z2\n                  :destination (z7 / school)\n                  :extent (z8 / all-the-way))))"], "128": ["I hope you're taking this seriously, if not you can get out of here.", "The difficult course meant that only the strong would survive.", "# ::snt I hope you're taking this seriously, if not you can get out of here.\n(z1 / and\n      :op1 (z2 / hope-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / take-04\n                  :ARG0 (z5 / you)\n                  :ARG1 (z6 / this)\n                  :ARG2 (z7 / serious-01))))", "# ::snt The difficult course meant that only the strong would survive.\n(z1 / mean-01\n      :ARG1 (z2 / course\n            :mod (z3 / difficult))\n      :ARG2 (z4 / survive-01\n            :ARG0 (z5 / person\n                  :ARG1-of (z6 / strong-02)\n                  :mod (z7 / only))))"], "129": ["The shores or shore of a sea, lake or wide river is the land along the edge of it.", "An autograph is the signature of someone famous which is specially written for a fan to keep.", "# ::snt The shores or shore of a sea, lake or wide river is the land along the edge of it.\n(z1 / land\n      :location (z2 / along\n            :op1 (z3 / edge\n                  :part-of (z4 / or\n                        :op1 (z5 / sea)\n                        :op2 (z6 / lake)\n                        :op3 (z7 / river\n                              :ARG1-of (z8 / wide-02)))))\n      :domain (z9 / or\n            :op1 (z10 / shore\n                  :part-of z4)\n            :op2 (z11 / shore\n                  :part-of z5)))", "# ::snt An autograph is the signature of someone famous which is specially written for a fan to keep.\n(z1 / autograph\n      :domain (z2 / sign-01\n            :ARG0 (z3 / someone\n                  :ARG1-of (z4 / fame-01))\n            :ARG1-of (z5 / write-01\n                  :ARG1-of (z6 / special-02)\n                  :purpose (z7 / keep-01\n                        :ARG0 (z8 / fan)\n                        :ARG1 z2))))"], "130": ["I bought a new guitar today, do you like it.", "The weapon choice reflects the personality of the carrier.", "# ::snt I bought a new guitar today, do you like it.\n(z1 / buy-01\n      :ARG0 (z2 / i)\n      :ARG1 (z3 / guitar\n            :ARG1-of (z4 / new-01))\n      :time (z5 / today)\n      :ARG0-of (z6 / cause-01\n            :ARG1 (z7 / like-01\n                  :ARG0 (z8 / you)\n                  :ARG1 z3\n                  :polarity (z9 / amr-unknown))))", "# ::snt The weapon choice reflects the personality of the carrier.\n(z1 / reflect-01\n      :ARG1 (z2 / choose-01\n            :ARG1 (z3 / weapon))\n      :ARG2 (z4 / personality\n            :poss (z5 / carrier)))"], "131": ["I am so hungry I could eat a whole horse plus dessert.", "I could have eaten another meal, I'm still starving.", "# ::snt I am so hungry I could eat a whole horse plus dessert.\n(z1 / hunger-01\n      :ARG0 (z2 / i)\n      :ARG2-of (z3 / have-degree-91\n            :ARG1 z2\n            :ARG3 (z4 / so)\n            :ARG6 (z5 / possible-01\n                  :ARG1 (z6 / eat-01\n                        :ARG0 z2\n                        :ARG1 (z7 / and\n                              :op1 (z8 / horse\n                                    :mod (z9 / whole))\n                              :op2 (z10 / dessert))))))", "# ::snt I could have eaten another meal, I'm still starving.\n(z1 / possible-01\n      :ARG1 (z2 / eat-01\n            :ARG0 (z3 / i)\n            :ARG1 (z4 / meal\n                  :mod (z5 / another)))\n      :ARG1-of (z6 / cause-01\n            :ARG0 (z7 / starve-01\n                  :ARG1 z3\n                  :mod (z8 / still))))"]}